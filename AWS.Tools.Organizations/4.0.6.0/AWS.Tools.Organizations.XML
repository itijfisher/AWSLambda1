<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AWS.Tools.Organizations</name>
    </assembly>
    <members>
        <member name="T:Amazon.PowerShell.Cmdlets.ORG.AddORGPolicyCmdlet">
            <summary>
            Attaches a policy to a root, an organizational unit (OU), or an individual account.
            How the policy affects accounts depends on the type of policy:
            
             <ul><li><para><b>Service control policy (SCP)</b> - An SCP specifies what permissions can be delegated
            to users in affected member accounts. The scope of influence for a policy depends
            on what you attach the policy to:
            </para><ul><li><para>
            If you attach an SCP to a root, it affects all accounts in the organization.
            </para></li><li><para>
            If you attach an SCP to an OU, it affects all accounts in that OU and in any child
            OUs.
            </para></li><li><para>
            If you attach the policy directly to an account, it affects only that account.
            </para></li></ul><para>
            SCPs are JSON policies that specify the maximum permissions for an organization or
            organizational unit (OU). You can attach one SCP to a higher level root or OU, and
            a different SCP to a child OU or to an account. The child policy can further restrict
            only the permissions that pass through the parent filter and are available to the
            child. An SCP that is attached to a child can't grant a permission that the parent
            hasn't already granted. For example, imagine that the parent SCP allows permissions
            A, B, C, D, and E. The child SCP allows C, D, E, F, and G. The result is that the
            accounts affected by the child SCP are allowed to use only C, D, and E. They can't
            use A or B because the child OU filtered them out. They also can't use F and G because
            the parent OU filtered them out. They can't be granted back by the child SCP; child
            SCPs can only filter the permissions they receive from the parent SCP.
            </para><para>
            AWS Organizations attaches a default SCP named <code>"FullAWSAccess</code> to every
            root, OU, and account. This default SCP allows all services and actions, enabling
            any new child OU or account to inherit the permissions of the parent root or OU. If
            you detach the default policy, you must replace it with a policy that specifies the
            permissions that you want to allow in that OU or account.
            </para><para>
            For more information about how AWS Organizations policies permissions work, see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_scp.html">Using
            Service Control Policies</a> in the <i>AWS Organizations User Guide.</i></para></li></ul><para>
            This operation can be called only from the organization's master account.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.AddORGPolicyCmdlet.PolicyId">
            <summary>
            <para>
            <para>The unique identifier (ID) of the policy that you want to attach to the target. You
            can get the ID for the policy by calling the <a>ListPolicies</a> operation.</para><para>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for a policy ID string
            requires "p-" followed by from 8 to 128 lowercase or uppercase letters, digits, or
            the underscore character (_).</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.AddORGPolicyCmdlet.TargetId">
            <summary>
            <para>
            <para>The unique identifier (ID) of the root, OU, or account that you want to attach the
            policy to. You can get the ID by calling the <a>ListRoots</a>, <a>ListOrganizationalUnitsForParent</a>,
            or <a>ListAccounts</a> operations.</para><para>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for a target ID string
            requires one of the following:</para><ul><li><para><b>Root</b> - A string that begins with "r-" followed by from 4 to 32 lowercase letters
            or digits.</para></li><li><para><b>Account</b> - A string that consists of exactly 12 digits.</para></li><li><para><b>Organizational unit (OU)</b> - A string that begins with "ou-" followed by from
            4 to 32 lowercase letters or digits (the ID of the root that the OU is in). This string
            is followed by a second "-" dash and from 8 to 32 additional lowercase letters or
            digits.</para></li></ul>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.AddORGPolicyCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The cmdlet doesn't have a return value by default.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Organizations.Model.AttachPolicyResponse).
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.AddORGPolicyCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the PolicyId parameter.
            The -PassThru parameter is deprecated, use -Select '^PolicyId' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.AddORGPolicyCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ORG.AddORGResourceTagCmdlet">
            <summary>
            Adds one or more tags to the specified resource.
            
             
            <para>
            Currently, you can tag and untag accounts in AWS Organizations.
            </para><para>
            This operation can be called only from the organization's master account.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.AddORGResourceTagCmdlet.ResourceId">
            <summary>
            <para>
            <para>The ID of the resource to add a tag to.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.AddORGResourceTagCmdlet.Tag">
            <summary>
            <para>
            <para>The tag to add to the specified resource. Specifying the tag key is required. You
            can set the value of a tag to an empty string, but you can't set the value of a tag
            to null.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.AddORGResourceTagCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The cmdlet doesn't have a return value by default.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Organizations.Model.TagResourceResponse).
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.AddORGResourceTagCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the ResourceId parameter.
            The -PassThru parameter is deprecated, use -Select '^ResourceId' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.AddORGResourceTagCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ORG.ConfirmORGHandshakeCmdlet">
            <summary>
            Sends a response to the originator of a handshake agreeing to the action proposed
            by the handshake request. 
            
             
            <para>
            This operation can be called only by the following principals when they also have
            the relevant IAM permissions:
            </para><ul><li><para><b>Invitation to join</b> or <b>Approve all features request</b> handshakes: only
            a principal from the member account. 
            </para><para>
            The user who calls the API for an invitation to join must have the <code>organizations:AcceptHandshake</code>
            permission. If you enabled all features in the organization, the user must also have
            the <code>iam:CreateServiceLinkedRole</code> permission so that AWS Organizations
            can create the required service-linked role named <code>AWSServiceRoleForOrganizations</code>.
            For more information, see <a href="http://docs.aws.amazon.com/organizations/latest/userguide/orgs_integration_services.html#orgs_integration_service-linked-roles">AWS
            Organizations and Service-Linked Roles</a> in the <i>AWS Organizations User Guide</i>.
            </para></li><li><para><b>Enable all features final confirmation</b> handshake: only a principal from the
            master account.
            </para><para>
            For more information about invitations, see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_invites.html">Inviting
            an AWS Account to Join Your Organization</a> in the <i>AWS Organizations User Guide.</i>
            For more information about requests to enable all features in the organization, see
            <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_org_support-all-features.html">Enabling
            All Features in Your Organization</a> in the <i>AWS Organizations User Guide.</i></para></li></ul><para>
            After you accept a handshake, it continues to appear in the results of relevant APIs
            for only 30 days. After that, it's deleted.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.ConfirmORGHandshakeCmdlet.HandshakeId">
            <summary>
            <para>
            <para>The unique identifier (ID) of the handshake that you want to accept.</para><para>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for handshake ID string
            requires "h-" followed by from 8 to 32 lowercase letters or digits.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.ConfirmORGHandshakeCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'Handshake'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Organizations.Model.AcceptHandshakeResponse).
            Specifying the name of a property of type Amazon.Organizations.Model.AcceptHandshakeResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.ConfirmORGHandshakeCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the HandshakeId parameter.
            The -PassThru parameter is deprecated, use -Select '^HandshakeId' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.ConfirmORGHandshakeCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ORG.DenyORGHandshakeCmdlet">
            <summary>
            Declines a handshake request. This sets the handshake state to <code>DECLINED</code>
            and effectively deactivates the request.
            
             
            <para>
            This operation can be called only from the account that received the handshake. The
            originator of the handshake can use <a>CancelHandshake</a> instead. The originator
            can't reactivate a declined request, but can reinitiate the process with a new handshake
            request.
            </para><para>
            After you decline a handshake, it continues to appear in the results of relevant APIs
            for only 30 days. After that, it's deleted.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.DenyORGHandshakeCmdlet.HandshakeId">
            <summary>
            <para>
            <para>The unique identifier (ID) of the handshake that you want to decline. You can get
            the ID from the <a>ListHandshakesForAccount</a> operation.</para><para>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for handshake ID string
            requires "h-" followed by from 8 to 32 lowercase letters or digits.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.DenyORGHandshakeCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'Handshake'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Organizations.Model.DeclineHandshakeResponse).
            Specifying the name of a property of type Amazon.Organizations.Model.DeclineHandshakeResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.DenyORGHandshakeCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the HandshakeId parameter.
            The -PassThru parameter is deprecated, use -Select '^HandshakeId' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.DenyORGHandshakeCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ORG.DisableORGAWSServiceAccessCmdlet">
            <summary>
            Disables the integration of an AWS service (the service that is specified by <code>ServicePrincipal</code>)
            with AWS Organizations. When you disable integration, the specified service no longer
            can create a <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/using-service-linked-roles.html">service-linked
            role</a> in <i>new</i> accounts in your organization. This means the service can't
            perform operations on your behalf on any new accounts in your organization. The service
            can still perform operations in older accounts until the service completes its clean-up
            from AWS Organizations.
            
              <important><para>
            We recommend that you disable integration between AWS Organizations and the specified
            AWS service by using the console or commands that are provided by the specified service.
            Doing so ensures that the other service is aware that it can clean up any resources
            that are required only for the integration. How the service cleans up its resources
            in the organization's accounts depends on that service. For more information, see
            the documentation for the other AWS service.
            </para></important><para>
            After you perform the <code>DisableAWSServiceAccess</code> operation, the specified
            service can no longer perform operations in your organization's accounts unless the
            operations are explicitly permitted by the IAM policies that are attached to your
            roles.
            </para><para>
            For more information about integrating other services with AWS Organizations, including
            the list of services that work with Organizations, see <a href="http://docs.aws.amazon.com/organizations/latest/userguide/orgs_integrate_services.html">Integrating
            AWS Organizations with Other AWS Services</a> in the <i>AWS Organizations User Guide.</i></para><para>
            This operation can be called only from the organization's master account.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.DisableORGAWSServiceAccessCmdlet.ServicePrincipal">
            <summary>
            <para>
            <para>The service principal name of the AWS service for which you want to disable integration
            with your organization. This is typically in the form of a URL, such as <code><i>service-abbreviation</i>.amazonaws.com</code>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.DisableORGAWSServiceAccessCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The cmdlet doesn't have a return value by default.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Organizations.Model.DisableAWSServiceAccessResponse).
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.DisableORGAWSServiceAccessCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the ServicePrincipal parameter.
            The -PassThru parameter is deprecated, use -Select '^ServicePrincipal' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.DisableORGAWSServiceAccessCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ORG.DisableORGPolicyTypeCmdlet">
            <summary>
            Disables an organizational control policy type in a root. A policy of a certain type
            can be attached to entities in a root only if that type is enabled in the root. After
            you perform this operation, you no longer can attach policies of the specified type
            to that root or to any organizational unit (OU) or account in that root. You can undo
            this by using the <a>EnablePolicyType</a> operation.
            
             
            <para>
            This is an asynchronous request that AWS performs in the background. If you disable
            a policy for a root, it still appears enabled for the organization if <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_org_support-all-features.html">all
            features</a> are enabled for the organization. AWS recommends that you first use <a>ListRoots</a>
            to see the status of policy types for a specified root, and then use this operation.
            
            </para><para>
            This operation can be called only from the organization's master account.
            </para><para>
             To view the status of available policy types in the organization, use <a>DescribeOrganization</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.DisableORGPolicyTypeCmdlet.PolicyType">
            <summary>
            <para>
            <para>The policy type that you want to disable in this root.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.DisableORGPolicyTypeCmdlet.RootId">
            <summary>
            <para>
            <para>The unique identifier (ID) of the root in which you want to disable a policy type.
            You can get the ID from the <a>ListRoots</a> operation.</para><para>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for a root ID string
            requires "r-" followed by from 4 to 32 lowercase letters or digits.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.DisableORGPolicyTypeCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'Root'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Organizations.Model.DisablePolicyTypeResponse).
            Specifying the name of a property of type Amazon.Organizations.Model.DisablePolicyTypeResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.DisableORGPolicyTypeCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the PolicyType parameter.
            The -PassThru parameter is deprecated, use -Select '^PolicyType' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.DisableORGPolicyTypeCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ORG.DismountORGPolicyCmdlet">
            <summary>
            Detaches a policy from a target root, organizational unit (OU), or account. If the
            policy being detached is a service control policy (SCP), the changes to permissions
            for IAM users and roles in affected accounts are immediate.
            
             
            <para><b>Note:</b> Every root, OU, and account must have at least one SCP attached. If
            you want to replace the default <code>FullAWSAccess</code> policy with one that limits
            the permissions that can be delegated, you must attach the replacement policy before
            you can remove the default one. This is the authorization strategy of an "<a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_about-scps.html#orgs_policies_whitelist">allow
            list</a>". If you instead attach a second SCP and leave the <code>FullAWSAccess</code>
            SCP still attached, and specify <code>"Effect": "Deny"</code> in the second SCP to
            override the <code>"Effect": "Allow"</code> in the <code>FullAWSAccess</code> policy
            (or any other attached SCP), you're using the authorization strategy of a "<a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_about-scps.html#orgs_policies_blacklist">deny
            list</a>".
            </para><para>
            This operation can be called only from the organization's master account.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.DismountORGPolicyCmdlet.PolicyId">
            <summary>
            <para>
            <para>The unique identifier (ID) of the policy you want to detach. You can get the ID from
            the <a>ListPolicies</a> or <a>ListPoliciesForTarget</a> operations.</para><para>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for a policy ID string
            requires "p-" followed by from 8 to 128 lowercase or uppercase letters, digits, or
            the underscore character (_).</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.DismountORGPolicyCmdlet.TargetId">
            <summary>
            <para>
            <para>The unique identifier (ID) of the root, OU, or account that you want to detach the
            policy from. You can get the ID from the <a>ListRoots</a>, <a>ListOrganizationalUnitsForParent</a>,
            or <a>ListAccounts</a> operations.</para><para>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for a target ID string
            requires one of the following:</para><ul><li><para><b>Root</b> - A string that begins with "r-" followed by from 4 to 32 lowercase letters
            or digits.</para></li><li><para><b>Account</b> - A string that consists of exactly 12 digits.</para></li><li><para><b>Organizational unit (OU)</b> - A string that begins with "ou-" followed by from
            4 to 32 lowercase letters or digits (the ID of the root that the OU is in). This string
            is followed by a second "-" dash and from 8 to 32 additional lowercase letters or
            digits.</para></li></ul>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.DismountORGPolicyCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The cmdlet doesn't have a return value by default.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Organizations.Model.DetachPolicyResponse).
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.DismountORGPolicyCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the PolicyId parameter.
            The -PassThru parameter is deprecated, use -Select '^PolicyId' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.DismountORGPolicyCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ORG.EnableORGAllFeatureCmdlet">
            <summary>
            Enables all features in an organization. This enables the use of organization policies
            that can restrict the services and actions that can be called in each account. Until
            you enable all features, you have access only to consolidated billing, and you can't
            use any of the advanced account administration features that AWS Organizations supports.
            For more information, see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_org_support-all-features.html">Enabling
            All Features in Your Organization</a> in the <i>AWS Organizations User Guide.</i><important><para>
            This operation is required only for organizations that were created explicitly with
            only the consolidated billing features enabled. Calling this operation sends a handshake
            to every invited account in the organization. The feature set change can be finalized
            and the additional features enabled only after all administrators in the invited accounts
            approve the change by accepting the handshake.
            </para></important><para>
            After you enable all features, you can separately enable or disable individual policy
            types in a root using <a>EnablePolicyType</a> and <a>DisablePolicyType</a>. To see
            the status of policy types in a root, use <a>ListRoots</a>.
            </para><para>
            After all invited member accounts accept the handshake, you finalize the feature set
            change by accepting the handshake that contains <code>"Action": "ENABLE_ALL_FEATURES"</code>.
            This completes the change.
            </para><para>
            After you enable all features in your organization, the master account in the organization
            can apply policies on all member accounts. These policies can restrict what users
            and even administrators in those accounts can do. The master account can apply policies
            that prevent accounts from leaving the organization. Ensure that your account administrators
            are aware of this.
            </para><para>
            This operation can be called only from the organization's master account. 
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.EnableORGAllFeatureCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'Handshake'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Organizations.Model.EnableAllFeaturesResponse).
            Specifying the name of a property of type Amazon.Organizations.Model.EnableAllFeaturesResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.EnableORGAllFeatureCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ORG.EnableORGAWSServiceAccessCmdlet">
            <summary>
            Enables the integration of an AWS service (the service that is specified by <code>ServicePrincipal</code>)
            with AWS Organizations. When you enable integration, you allow the specified service
            to create a <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/using-service-linked-roles.html">service-linked
            role</a> in all the accounts in your organization. This allows the service to perform
            operations on your behalf in your organization and its accounts.
            
             <important><para>
            We recommend that you enable integration between AWS Organizations and the specified
            AWS service by using the console or commands that are provided by the specified service.
            Doing so ensures that the service is aware that it can create the resources that are
            required for the integration. How the service creates those resources in the organization's
            accounts depends on that service. For more information, see the documentation for
            the other AWS service.
            </para></important><para>
            For more information about enabling services to integrate with AWS Organizations,
            see <a href="http://docs.aws.amazon.com/organizations/latest/userguide/orgs_integrate_services.html">Integrating
            AWS Organizations with Other AWS Services</a> in the <i>AWS Organizations User Guide.</i></para><para>
            This operation can be called only from the organization's master account and only
            if the organization has <a href="http://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_org_support-all-features.html">enabled
            all features</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.EnableORGAWSServiceAccessCmdlet.ServicePrincipal">
            <summary>
            <para>
            <para>The service principal name of the AWS service for which you want to enable integration
            with your organization. This is typically in the form of a URL, such as <code><i>service-abbreviation</i>.amazonaws.com</code>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.EnableORGAWSServiceAccessCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The cmdlet doesn't have a return value by default.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Organizations.Model.EnableAWSServiceAccessResponse).
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.EnableORGAWSServiceAccessCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the ServicePrincipal parameter.
            The -PassThru parameter is deprecated, use -Select '^ServicePrincipal' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.EnableORGAWSServiceAccessCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ORG.EnableORGPolicyTypeCmdlet">
            <summary>
            Enables a policy type in a root. After you enable a policy type in a root, you can
            attach policies of that type to the root, any organizational unit (OU), or account
            in that root. You can undo this by using the <a>DisablePolicyType</a> operation.
            
             
            <para>
            This is an asynchronous request that AWS performs in the background. AWS recommends
            that you first use <a>ListRoots</a> to see the status of policy types for a specified
            root, and then use this operation. 
            </para><para>
            This operation can be called only from the organization's master account.
            </para><para>
            You can enable a policy type in a root only if that policy type is available in the
            organization. To view the status of available policy types in the organization, use
            <a>DescribeOrganization</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.EnableORGPolicyTypeCmdlet.PolicyType">
            <summary>
            <para>
            <para>The policy type that you want to enable.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.EnableORGPolicyTypeCmdlet.RootId">
            <summary>
            <para>
            <para>The unique identifier (ID) of the root in which you want to enable a policy type.
            You can get the ID from the <a>ListRoots</a> operation.</para><para>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for a root ID string
            requires "r-" followed by from 4 to 32 lowercase letters or digits.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.EnableORGPolicyTypeCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'Root'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Organizations.Model.EnablePolicyTypeResponse).
            Specifying the name of a property of type Amazon.Organizations.Model.EnablePolicyTypeResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.EnableORGPolicyTypeCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the PolicyType parameter.
            The -PassThru parameter is deprecated, use -Select '^PolicyType' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.EnableORGPolicyTypeCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ORG.GetORGAccountCmdlet">
            <summary>
            Retrieves AWS Organizations-related information about the specified account.
            
             
            <para>
            This operation can be called only from the organization's master account or by a member
            account that is a delegated administrator for an AWS service.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGAccountCmdlet.AccountId">
            <summary>
            <para>
            <para>The unique identifier (ID) of the AWS account that you want information about. You
            can get the ID from the <a>ListAccounts</a> or <a>ListAccountsForParent</a> operations.</para><para>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for an account ID
            string requires exactly 12 digits.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGAccountCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'Account'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Organizations.Model.DescribeAccountResponse).
            Specifying the name of a property of type Amazon.Organizations.Model.DescribeAccountResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGAccountCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the AccountId parameter.
            The -PassThru parameter is deprecated, use -Select '^AccountId' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ORG.GetORGAccountCreationStatusCmdlet">
            <summary>
            Retrieves the current status of an asynchronous request to create an account.
            
             
            <para>
            This operation can be called only from the organization's master account or by a member
            account that is a delegated administrator for an AWS service.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGAccountCreationStatusCmdlet.CreateAccountRequestId">
            <summary>
            <para>
            <para>Specifies the <code>operationId</code> that uniquely identifies the request. You can
            get the ID from the response to an earlier <a>CreateAccount</a> request, or from the
            <a>ListCreateAccountStatus</a> operation.</para><para>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for a create account
            request ID string requires "car-" followed by from 8 to 32 lowercase letters or digits.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGAccountCreationStatusCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'CreateAccountStatus'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Organizations.Model.DescribeCreateAccountStatusResponse).
            Specifying the name of a property of type Amazon.Organizations.Model.DescribeCreateAccountStatusResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGAccountCreationStatusCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the CreateAccountRequestId parameter.
            The -PassThru parameter is deprecated, use -Select '^CreateAccountRequestId' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ORG.GetORGAccountCreationStatusListCmdlet">
            <summary>
            Lists the account creation requests that match the specified status that is currently
            being tracked for the organization.
            
             <note><para>
            Always check the <code>NextToken</code> response parameter for a <code>null</code>
            value when calling a <code>List*</code> operation. These operations can occasionally
            return an empty set of results even when there are more results available. The <code>NextToken</code>
            response parameter value is <code>null</code><i>only</i> when there are no more results
            to display.
            </para></note><para>
            This operation can be called only from the organization's master account or by a member
            account that is a delegated administrator for an AWS service.
            </para><br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGAccountCreationStatusListCmdlet.State">
            <summary>
            <para>
            <para>A list of one or more states that you want included in the response. If this parameter
            isn't present, all requests are included in the response.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGAccountCreationStatusListCmdlet.MaxResult">
            <summary>
            <para>
            <para>The total number of results that you want included on each page of the response. If
            you do not include this parameter, it defaults to a value that is specific to the
            operation. If additional items exist beyond the maximum you specify, the <code>NextToken</code>
            response element is present and has a value (is not null). Include that value as the
            <code>NextToken</code> request parameter in the next call to the operation to get
            the next part of the results. Note that Organizations might return fewer results than
            the maximum even when there are more results available. You should check <code>NextToken</code>
            after every operation to ensure that you receive all of the results.</para>
            </para>
            <para>
            <br/><b>Note:</b> In AWSPowerShell and AWSPowerShell.NetCore this parameter is used to limit the total number of items returned by the cmdlet.
            <br/>In AWS.Tools this parameter is simply passed to the service to specify how many items should be returned by each service call.
            <br/>Pipe the output of this cmdlet into Select-Object -First to terminate retrieving data pages early and control the number of items returned.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGAccountCreationStatusListCmdlet.NextToken">
            <summary>
            <para>
            <para>The parameter for receiving additional results if you receive a <code>NextToken</code>
            response in a previous request. A <code>NextToken</code> response indicates that more
            output is available. Set this parameter to the value of the previous call's <code>NextToken</code>
            response to indicate where the output should continue from.</para>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGAccountCreationStatusListCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'CreateAccountStatuses'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Organizations.Model.ListCreateAccountStatusResponse).
            Specifying the name of a property of type Amazon.Organizations.Model.ListCreateAccountStatusResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGAccountCreationStatusListCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the State parameter.
            The -PassThru parameter is deprecated, use -Select '^State' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGAccountCreationStatusListCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ORG.GetORGAccountForParentCmdlet">
            <summary>
            Lists the accounts in an organization that are contained by the specified target root
            or organizational unit (OU). If you specify the root, you get a list of all the accounts
            that aren't in any OU. If you specify an OU, you get a list of all the accounts in
            only that OU and not in any child OUs. To get a list of all accounts in the organization,
            use the <a>ListAccounts</a> operation.
            
             <note><para>
            Always check the <code>NextToken</code> response parameter for a <code>null</code>
            value when calling a <code>List*</code> operation. These operations can occasionally
            return an empty set of results even when there are more results available. The <code>NextToken</code>
            response parameter value is <code>null</code><i>only</i> when there are no more results
            to display.
            </para></note><para>
            This operation can be called only from the organization's master account or by a member
            account that is a delegated administrator for an AWS service.
            </para><br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGAccountForParentCmdlet.ParentId">
            <summary>
            <para>
            <para>The unique identifier (ID) for the parent root or organization unit (OU) whose accounts
            you want to list.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGAccountForParentCmdlet.MaxResult">
            <summary>
            <para>
            <para>The total number of results that you want included on each page of the response. If
            you do not include this parameter, it defaults to a value that is specific to the
            operation. If additional items exist beyond the maximum you specify, the <code>NextToken</code>
            response element is present and has a value (is not null). Include that value as the
            <code>NextToken</code> request parameter in the next call to the operation to get
            the next part of the results. Note that Organizations might return fewer results than
            the maximum even when there are more results available. You should check <code>NextToken</code>
            after every operation to ensure that you receive all of the results.</para>
            </para>
            <para>
            <br/><b>Note:</b> In AWSPowerShell and AWSPowerShell.NetCore this parameter is used to limit the total number of items returned by the cmdlet.
            <br/>In AWS.Tools this parameter is simply passed to the service to specify how many items should be returned by each service call.
            <br/>Pipe the output of this cmdlet into Select-Object -First to terminate retrieving data pages early and control the number of items returned.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGAccountForParentCmdlet.NextToken">
            <summary>
            <para>
            <para>The parameter for receiving additional results if you receive a <code>NextToken</code>
            response in a previous request. A <code>NextToken</code> response indicates that more
            output is available. Set this parameter to the value of the previous call's <code>NextToken</code>
            response to indicate where the output should continue from.</para>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGAccountForParentCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'Accounts'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Organizations.Model.ListAccountsForParentResponse).
            Specifying the name of a property of type Amazon.Organizations.Model.ListAccountsForParentResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGAccountForParentCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the ParentId parameter.
            The -PassThru parameter is deprecated, use -Select '^ParentId' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGAccountForParentCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ORG.GetORGAccountHandshakeListCmdlet">
            <summary>
            Lists the current handshakes that are associated with the account of the requesting
            user.
            
             
            <para>
            Handshakes that are <code>ACCEPTED</code>, <code>DECLINED</code>, or <code>CANCELED</code>
            appear in the results of this API for only 30 days after changing to that state. After
            that, they're deleted and no longer accessible.
            </para><note><para>
            Always check the <code>NextToken</code> response parameter for a <code>null</code>
            value when calling a <code>List*</code> operation. These operations can occasionally
            return an empty set of results even when there are more results available. The <code>NextToken</code>
            response parameter value is <code>null</code><i>only</i> when there are no more results
            to display.
            </para></note><para>
            This operation can be called only from the organization's master account or by a member
            account that is a delegated administrator for an AWS service.
            </para><br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGAccountHandshakeListCmdlet.Filter_ActionType">
            <summary>
            <para>
            <para>Specifies the type of handshake action.</para><para>If you specify <code>ActionType</code>, you cannot also specify <code>ParentHandshakeId</code>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGAccountHandshakeListCmdlet.Filter_ParentHandshakeId">
            <summary>
            <para>
            <para>Specifies the parent handshake. Only used for handshake types that are a child of
            another type.</para><para>If you specify <code>ParentHandshakeId</code>, you cannot also specify <code>ActionType</code>.</para><para>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for handshake ID string
            requires "h-" followed by from 8 to 32 lower-case letters or digits.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGAccountHandshakeListCmdlet.MaxResult">
            <summary>
            <para>
            <para>The total number of results that you want included on each page of the response. If
            you do not include this parameter, it defaults to a value that is specific to the
            operation. If additional items exist beyond the maximum you specify, the <code>NextToken</code>
            response element is present and has a value (is not null). Include that value as the
            <code>NextToken</code> request parameter in the next call to the operation to get
            the next part of the results. Note that Organizations might return fewer results than
            the maximum even when there are more results available. You should check <code>NextToken</code>
            after every operation to ensure that you receive all of the results.</para>
            </para>
            <para>
            <br/><b>Note:</b> In AWSPowerShell and AWSPowerShell.NetCore this parameter is used to limit the total number of items returned by the cmdlet.
            <br/>In AWS.Tools this parameter is simply passed to the service to specify how many items should be returned by each service call.
            <br/>Pipe the output of this cmdlet into Select-Object -First to terminate retrieving data pages early and control the number of items returned.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGAccountHandshakeListCmdlet.NextToken">
            <summary>
            <para>
            <para>The parameter for receiving additional results if you receive a <code>NextToken</code>
            response in a previous request. A <code>NextToken</code> response indicates that more
            output is available. Set this parameter to the value of the previous call's <code>NextToken</code>
            response to indicate where the output should continue from.</para>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGAccountHandshakeListCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'Handshakes'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Organizations.Model.ListHandshakesForAccountResponse).
            Specifying the name of a property of type Amazon.Organizations.Model.ListHandshakesForAccountResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGAccountHandshakeListCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ORG.GetORGAccountListCmdlet">
            <summary>
            Lists all the accounts in the organization. To request only the accounts in a specified
            root or organizational unit (OU), use the <a>ListAccountsForParent</a> operation instead.
            
             <note><para>
            Always check the <code>NextToken</code> response parameter for a <code>null</code>
            value when calling a <code>List*</code> operation. These operations can occasionally
            return an empty set of results even when there are more results available. The <code>NextToken</code>
            response parameter value is <code>null</code><i>only</i> when there are no more results
            to display.
            </para></note><para>
            This operation can be called only from the organization's master account or by a member
            account that is a delegated administrator for an AWS service.
            </para><br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGAccountListCmdlet.MaxResult">
            <summary>
            <para>
            <para>The total number of results that you want included on each page of the response. If
            you do not include this parameter, it defaults to a value that is specific to the
            operation. If additional items exist beyond the maximum you specify, the <code>NextToken</code>
            response element is present and has a value (is not null). Include that value as the
            <code>NextToken</code> request parameter in the next call to the operation to get
            the next part of the results. Note that Organizations might return fewer results than
            the maximum even when there are more results available. You should check <code>NextToken</code>
            after every operation to ensure that you receive all of the results.</para>
            </para>
            <para>
            <br/><b>Note:</b> In AWSPowerShell and AWSPowerShell.NetCore this parameter is used to limit the total number of items returned by the cmdlet.
            <br/>In AWS.Tools this parameter is simply passed to the service to specify how many items should be returned by each service call.
            <br/>Pipe the output of this cmdlet into Select-Object -First to terminate retrieving data pages early and control the number of items returned.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGAccountListCmdlet.NextToken">
            <summary>
            <para>
            <para>The parameter for receiving additional results if you receive a <code>NextToken</code>
            response in a previous request. A <code>NextToken</code> response indicates that more
            output is available. Set this parameter to the value of the previous call's <code>NextToken</code>
            response to indicate where the output should continue from.</para>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGAccountListCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'Accounts'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Organizations.Model.ListAccountsResponse).
            Specifying the name of a property of type Amazon.Organizations.Model.ListAccountsResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGAccountListCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ORG.GetORGAWSServiceAccessForOrganizationCmdlet">
            <summary>
            Returns a list of the AWS services that you enabled to integrate with your organization.
            After a service on this list creates the resources that it requires for the integration,
            it can perform operations on your organization and its accounts.
            
             
            <para>
            For more information about integrating other services with AWS Organizations, including
            the list of services that currently work with Organizations, see <a href="http://docs.aws.amazon.com/organizations/latest/userguide/orgs_integrate_services.html">Integrating
            AWS Organizations with Other AWS Services</a> in the <i>AWS Organizations User Guide.</i></para><para>
            This operation can be called only from the organization's master account or by a member
            account that is a delegated administrator for an AWS service.
            </para><br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGAWSServiceAccessForOrganizationCmdlet.MaxResult">
            <summary>
            <para>
            <para>The total number of results that you want included on each page of the response. If
            you do not include this parameter, it defaults to a value that is specific to the
            operation. If additional items exist beyond the maximum you specify, the <code>NextToken</code>
            response element is present and has a value (is not null). Include that value as the
            <code>NextToken</code> request parameter in the next call to the operation to get
            the next part of the results. Note that Organizations might return fewer results than
            the maximum even when there are more results available. You should check <code>NextToken</code>
            after every operation to ensure that you receive all of the results.</para>
            </para>
            <para>
            <br/><b>Note:</b> In AWSPowerShell and AWSPowerShell.NetCore this parameter is used to limit the total number of items returned by the cmdlet.
            <br/>In AWS.Tools this parameter is simply passed to the service to specify how many items should be returned by each service call.
            <br/>Pipe the output of this cmdlet into Select-Object -First to terminate retrieving data pages early and control the number of items returned.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGAWSServiceAccessForOrganizationCmdlet.NextToken">
            <summary>
            <para>
            <para>The parameter for receiving additional results if you receive a <code>NextToken</code>
            response in a previous request. A <code>NextToken</code> response indicates that more
            output is available. Set this parameter to the value of the previous call's <code>NextToken</code>
            response to indicate where the output should continue from.</para>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGAWSServiceAccessForOrganizationCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'EnabledServicePrincipals'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Organizations.Model.ListAWSServiceAccessForOrganizationResponse).
            Specifying the name of a property of type Amazon.Organizations.Model.ListAWSServiceAccessForOrganizationResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGAWSServiceAccessForOrganizationCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ORG.GetORGChildCmdlet">
            <summary>
            Lists all of the organizational units (OUs) or accounts that are contained in the
            specified parent OU or root. This operation, along with <a>ListParents</a> enables
            you to traverse the tree structure that makes up this root.
            
             <note><para>
            Always check the <code>NextToken</code> response parameter for a <code>null</code>
            value when calling a <code>List*</code> operation. These operations can occasionally
            return an empty set of results even when there are more results available. The <code>NextToken</code>
            response parameter value is <code>null</code><i>only</i> when there are no more results
            to display.
            </para></note><para>
            This operation can be called only from the organization's master account or by a member
            account that is a delegated administrator for an AWS service.
            </para><br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGChildCmdlet.ChildType">
            <summary>
            <para>
            <para>Filters the output to include only the specified child type.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGChildCmdlet.ParentId">
            <summary>
            <para>
            <para>The unique identifier (ID) for the parent root or OU whose children you want to list.</para><para>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for a parent ID string
            requires one of the following:</para><ul><li><para><b>Root</b> - A string that begins with "r-" followed by from 4 to 32 lowercase letters
            or digits.</para></li><li><para><b>Organizational unit (OU)</b> - A string that begins with "ou-" followed by from
            4 to 32 lowercase letters or digits (the ID of the root that the OU is in). This string
            is followed by a second "-" dash and from 8 to 32 additional lowercase letters or
            digits.</para></li></ul>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGChildCmdlet.MaxResult">
            <summary>
            <para>
            <para>The total number of results that you want included on each page of the response. If
            you do not include this parameter, it defaults to a value that is specific to the
            operation. If additional items exist beyond the maximum you specify, the <code>NextToken</code>
            response element is present and has a value (is not null). Include that value as the
            <code>NextToken</code> request parameter in the next call to the operation to get
            the next part of the results. Note that Organizations might return fewer results than
            the maximum even when there are more results available. You should check <code>NextToken</code>
            after every operation to ensure that you receive all of the results.</para>
            </para>
            <para>
            <br/><b>Note:</b> In AWSPowerShell and AWSPowerShell.NetCore this parameter is used to limit the total number of items returned by the cmdlet.
            <br/>In AWS.Tools this parameter is simply passed to the service to specify how many items should be returned by each service call.
            <br/>Pipe the output of this cmdlet into Select-Object -First to terminate retrieving data pages early and control the number of items returned.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGChildCmdlet.NextToken">
            <summary>
            <para>
            <para>The parameter for receiving additional results if you receive a <code>NextToken</code>
            response in a previous request. A <code>NextToken</code> response indicates that more
            output is available. Set this parameter to the value of the previous call's <code>NextToken</code>
            response to indicate where the output should continue from.</para>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGChildCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'Children'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Organizations.Model.ListChildrenResponse).
            Specifying the name of a property of type Amazon.Organizations.Model.ListChildrenResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGChildCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the ParentId parameter.
            The -PassThru parameter is deprecated, use -Select '^ParentId' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGChildCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ORG.GetORGDelegatedAdministratorListCmdlet">
            <summary>
            Lists the AWS accounts that are designated as delegated administrators in this organization.
            
             
            <para>
            This operation can be called only from the organization's master account or by a member
            account that is a delegated administrator for an AWS service.
            </para><br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGDelegatedAdministratorListCmdlet.ServicePrincipal">
            <summary>
            <para>
            <para>Specifies a service principal name. If specified, then the operation lists the delegated
            administrators only for the specified service.</para><para>If you don't specify a service principal, the operation lists all delegated administrators
            for all services in your organization.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGDelegatedAdministratorListCmdlet.MaxResult">
            <summary>
            <para>
            <para>The total number of results that you want included on each page of the response. If
            you do not include this parameter, it defaults to a value that is specific to the
            operation. If additional items exist beyond the maximum you specify, the <code>NextToken</code>
            response element is present and has a value (is not null). Include that value as the
            <code>NextToken</code> request parameter in the next call to the operation to get
            the next part of the results. Note that Organizations might return fewer results than
            the maximum even when there are more results available. You should check <code>NextToken</code>
            after every operation to ensure that you receive all of the results.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGDelegatedAdministratorListCmdlet.NextToken">
            <summary>
            <para>
            <para>The parameter for receiving additional results if you receive a <code>NextToken</code>
            response in a previous request. A <code>NextToken</code> response indicates that more
            output is available. Set this parameter to the value of the previous call's <code>NextToken</code>
            response to indicate where the output should continue from.</para>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGDelegatedAdministratorListCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'DelegatedAdministrators'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Organizations.Model.ListDelegatedAdministratorsResponse).
            Specifying the name of a property of type Amazon.Organizations.Model.ListDelegatedAdministratorsResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGDelegatedAdministratorListCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the ServicePrincipal parameter.
            The -PassThru parameter is deprecated, use -Select '^ServicePrincipal' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGDelegatedAdministratorListCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ORG.GetORGDelegatedServicesForAccountListCmdlet">
            <summary>
            List the AWS services for which the specified account is a delegated administrator.
            
            
             
            <para>
            This operation can be called only from the organization's master account or by a member
            account that is a delegated administrator for an AWS service.
            </para><br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGDelegatedServicesForAccountListCmdlet.AccountId">
            <summary>
            <para>
            <para>The account ID number of a delegated administrator account in the organization.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGDelegatedServicesForAccountListCmdlet.MaxResult">
            <summary>
            <para>
            <para>The total number of results that you want included on each page of the response. If
            you do not include this parameter, it defaults to a value that is specific to the
            operation. If additional items exist beyond the maximum you specify, the <code>NextToken</code>
            response element is present and has a value (is not null). Include that value as the
            <code>NextToken</code> request parameter in the next call to the operation to get
            the next part of the results. Note that Organizations might return fewer results than
            the maximum even when there are more results available. You should check <code>NextToken</code>
            after every operation to ensure that you receive all of the results.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGDelegatedServicesForAccountListCmdlet.NextToken">
            <summary>
            <para>
            <para>The parameter for receiving additional results if you receive a <code>NextToken</code>
            response in a previous request. A <code>NextToken</code> response indicates that more
            output is available. Set this parameter to the value of the previous call's <code>NextToken</code>
            response to indicate where the output should continue from.</para>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGDelegatedServicesForAccountListCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'DelegatedServices'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Organizations.Model.ListDelegatedServicesForAccountResponse).
            Specifying the name of a property of type Amazon.Organizations.Model.ListDelegatedServicesForAccountResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGDelegatedServicesForAccountListCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the AccountId parameter.
            The -PassThru parameter is deprecated, use -Select '^AccountId' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGDelegatedServicesForAccountListCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ORG.GetORGEffectivePolicyCmdlet">
            <summary>
            Returns the contents of the effective tag policy for the account. The effective tag
            policy is the aggregation of any tag policies the account inherits, plus any policy
            directly that is attached to the account. 
            
             
            <para>
            This action returns information on tag policies only.
            </para><para>
            For more information on policy inheritance, see <a href="http://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies-inheritance.html">How
            Policy Inheritance Works</a> in the <i>AWS Organizations User Guide</i>.
            </para><para>
            This operation can be called only from the organization's master account or by a member
            account that is a delegated administrator for an AWS service.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGEffectivePolicyCmdlet.PolicyType">
            <summary>
            <para>
            <para>The type of policy that you want information about.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGEffectivePolicyCmdlet.TargetId">
            <summary>
            <para>
            <para>When you're signed in as the master account, specify the ID of the account that you
            want details about. Specifying an organization root or OU as the target is not supported.
            </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGEffectivePolicyCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'EffectivePolicy'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Organizations.Model.DescribeEffectivePolicyResponse).
            Specifying the name of a property of type Amazon.Organizations.Model.DescribeEffectivePolicyResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGEffectivePolicyCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the PolicyType parameter.
            The -PassThru parameter is deprecated, use -Select '^PolicyType' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ORG.GetORGHandshakeCmdlet">
            <summary>
            Retrieves information about a previously requested handshake. The handshake ID comes
            from the response to the original <a>InviteAccountToOrganization</a> operation that
            generated the handshake.
            
             
            <para>
            You can access handshakes that are <code>ACCEPTED</code>, <code>DECLINED</code>, or
            <code>CANCELED</code> for only 30 days after they change to that state. They're then
            deleted and no longer accessible.
            </para><para>
            This operation can be called from any account in the organization.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGHandshakeCmdlet.HandshakeId">
            <summary>
            <para>
            <para>The unique identifier (ID) of the handshake that you want information about. You can
            get the ID from the original call to <a>InviteAccountToOrganization</a>, or from a
            call to <a>ListHandshakesForAccount</a> or <a>ListHandshakesForOrganization</a>.</para><para>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for handshake ID string
            requires "h-" followed by from 8 to 32 lowercase letters or digits.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGHandshakeCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'Handshake'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Organizations.Model.DescribeHandshakeResponse).
            Specifying the name of a property of type Amazon.Organizations.Model.DescribeHandshakeResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGHandshakeCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the HandshakeId parameter.
            The -PassThru parameter is deprecated, use -Select '^HandshakeId' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ORG.GetORGOrganizationCmdlet">
            <summary>
            Retrieves information about the organization that the user's account belongs to.
            
             
            <para>
            This operation can be called from any account in the organization.
            </para><note><para>
            Even if a policy type is shown as available in the organization, you can disable it
            separately at the root level with <a>DisablePolicyType</a>. Use <a>ListRoots</a> to
            see the status of policy types for a specified root.
            </para></note>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGOrganizationCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'Organization'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Organizations.Model.DescribeOrganizationResponse).
            Specifying the name of a property of type Amazon.Organizations.Model.DescribeOrganizationResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ORG.GetORGOrganizationalUnitCmdlet">
            <summary>
            Retrieves information about an organizational unit (OU).
            
             
            <para>
            This operation can be called only from the organization's master account or by a member
            account that is a delegated administrator for an AWS service.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGOrganizationalUnitCmdlet.OrganizationalUnitId">
            <summary>
            <para>
            <para>The unique identifier (ID) of the organizational unit that you want details about.
            You can get the ID from the <a>ListOrganizationalUnitsForParent</a> operation.</para><para>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for an organizational
            unit ID string requires "ou-" followed by from 4 to 32 lowercase letters or digits
            (the ID of the root that contains the OU). This string is followed by a second "-"
            dash and from 8 to 32 additional lowercase letters or digits.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGOrganizationalUnitCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'OrganizationalUnit'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Organizations.Model.DescribeOrganizationalUnitResponse).
            Specifying the name of a property of type Amazon.Organizations.Model.DescribeOrganizationalUnitResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGOrganizationalUnitCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the OrganizationalUnitId parameter.
            The -PassThru parameter is deprecated, use -Select '^OrganizationalUnitId' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ORG.GetORGOrganizationalUnitListCmdlet">
            <summary>
            Lists the organizational units (OUs) in a parent organizational unit or root.
            
             <note><para>
            Always check the <code>NextToken</code> response parameter for a <code>null</code>
            value when calling a <code>List*</code> operation. These operations can occasionally
            return an empty set of results even when there are more results available. The <code>NextToken</code>
            response parameter value is <code>null</code><i>only</i> when there are no more results
            to display.
            </para></note><para>
            This operation can be called only from the organization's master account or by a member
            account that is a delegated administrator for an AWS service.
            </para><br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGOrganizationalUnitListCmdlet.ParentId">
            <summary>
            <para>
            <para>The unique identifier (ID) of the root or OU whose child OUs you want to list.</para><para>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for a parent ID string
            requires one of the following:</para><ul><li><para><b>Root</b> - A string that begins with "r-" followed by from 4 to 32 lowercase letters
            or digits.</para></li><li><para><b>Organizational unit (OU)</b> - A string that begins with "ou-" followed by from
            4 to 32 lowercase letters or digits (the ID of the root that the OU is in). This string
            is followed by a second "-" dash and from 8 to 32 additional lowercase letters or
            digits.</para></li></ul>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGOrganizationalUnitListCmdlet.MaxResult">
            <summary>
            <para>
            <para>The total number of results that you want included on each page of the response. If
            you do not include this parameter, it defaults to a value that is specific to the
            operation. If additional items exist beyond the maximum you specify, the <code>NextToken</code>
            response element is present and has a value (is not null). Include that value as the
            <code>NextToken</code> request parameter in the next call to the operation to get
            the next part of the results. Note that Organizations might return fewer results than
            the maximum even when there are more results available. You should check <code>NextToken</code>
            after every operation to ensure that you receive all of the results.</para>
            </para>
            <para>
            <br/><b>Note:</b> In AWSPowerShell and AWSPowerShell.NetCore this parameter is used to limit the total number of items returned by the cmdlet.
            <br/>In AWS.Tools this parameter is simply passed to the service to specify how many items should be returned by each service call.
            <br/>Pipe the output of this cmdlet into Select-Object -First to terminate retrieving data pages early and control the number of items returned.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGOrganizationalUnitListCmdlet.NextToken">
            <summary>
            <para>
            <para>The parameter for receiving additional results if you receive a <code>NextToken</code>
            response in a previous request. A <code>NextToken</code> response indicates that more
            output is available. Set this parameter to the value of the previous call's <code>NextToken</code>
            response to indicate where the output should continue from.</para>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGOrganizationalUnitListCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'OrganizationalUnits'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Organizations.Model.ListOrganizationalUnitsForParentResponse).
            Specifying the name of a property of type Amazon.Organizations.Model.ListOrganizationalUnitsForParentResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGOrganizationalUnitListCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the ParentId parameter.
            The -PassThru parameter is deprecated, use -Select '^ParentId' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGOrganizationalUnitListCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ORG.GetORGOrganizationHandshakeListCmdlet">
            <summary>
            Lists the handshakes that are associated with the organization that the requesting
            user is part of. The <code>ListHandshakesForOrganization</code> operation returns
            a list of handshake structures. Each structure contains details and status about a
            handshake.
            
             
            <para>
            Handshakes that are <code>ACCEPTED</code>, <code>DECLINED</code>, or <code>CANCELED</code>
            appear in the results of this API for only 30 days after changing to that state. After
            that, they're deleted and no longer accessible.
            </para><note><para>
            Always check the <code>NextToken</code> response parameter for a <code>null</code>
            value when calling a <code>List*</code> operation. These operations can occasionally
            return an empty set of results even when there are more results available. The <code>NextToken</code>
            response parameter value is <code>null</code><i>only</i> when there are no more results
            to display.
            </para></note><para>
            This operation can be called only from the organization's master account or by a member
            account that is a delegated administrator for an AWS service.
            </para><br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGOrganizationHandshakeListCmdlet.Filter_ActionType">
            <summary>
            <para>
            <para>Specifies the type of handshake action.</para><para>If you specify <code>ActionType</code>, you cannot also specify <code>ParentHandshakeId</code>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGOrganizationHandshakeListCmdlet.Filter_ParentHandshakeId">
            <summary>
            <para>
            <para>Specifies the parent handshake. Only used for handshake types that are a child of
            another type.</para><para>If you specify <code>ParentHandshakeId</code>, you cannot also specify <code>ActionType</code>.</para><para>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for handshake ID string
            requires "h-" followed by from 8 to 32 lower-case letters or digits.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGOrganizationHandshakeListCmdlet.MaxResult">
            <summary>
            <para>
            <para>The total number of results that you want included on each page of the response. If
            you do not include this parameter, it defaults to a value that is specific to the
            operation. If additional items exist beyond the maximum you specify, the <code>NextToken</code>
            response element is present and has a value (is not null). Include that value as the
            <code>NextToken</code> request parameter in the next call to the operation to get
            the next part of the results. Note that Organizations might return fewer results than
            the maximum even when there are more results available. You should check <code>NextToken</code>
            after every operation to ensure that you receive all of the results.</para>
            </para>
            <para>
            <br/><b>Note:</b> In AWSPowerShell and AWSPowerShell.NetCore this parameter is used to limit the total number of items returned by the cmdlet.
            <br/>In AWS.Tools this parameter is simply passed to the service to specify how many items should be returned by each service call.
            <br/>Pipe the output of this cmdlet into Select-Object -First to terminate retrieving data pages early and control the number of items returned.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGOrganizationHandshakeListCmdlet.NextToken">
            <summary>
            <para>
            <para>The parameter for receiving additional results if you receive a <code>NextToken</code>
            response in a previous request. A <code>NextToken</code> response indicates that more
            output is available. Set this parameter to the value of the previous call's <code>NextToken</code>
            response to indicate where the output should continue from.</para>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGOrganizationHandshakeListCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'Handshakes'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Organizations.Model.ListHandshakesForOrganizationResponse).
            Specifying the name of a property of type Amazon.Organizations.Model.ListHandshakesForOrganizationResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGOrganizationHandshakeListCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ORG.GetORGParentCmdlet">
            <summary>
            Lists the root or organizational units (OUs) that serve as the immediate parent of
            the specified child OU or account. This operation, along with <a>ListChildren</a>
            enables you to traverse the tree structure that makes up this root.
            
             <note><para>
            Always check the <code>NextToken</code> response parameter for a <code>null</code>
            value when calling a <code>List*</code> operation. These operations can occasionally
            return an empty set of results even when there are more results available. The <code>NextToken</code>
            response parameter value is <code>null</code><i>only</i> when there are no more results
            to display.
            </para></note><para>
            This operation can be called only from the organization's master account or by a member
            account that is a delegated administrator for an AWS service.
            </para><note><para>
            In the current release, a child can have only a single parent. 
            </para></note><br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGParentCmdlet.ChildId">
            <summary>
            <para>
            <para>The unique identifier (ID) of the OU or account whose parent containers you want to
            list. Don't specify a root.</para><para>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for a child ID string
            requires one of the following:</para><ul><li><para><b>Account</b> - A string that consists of exactly 12 digits.</para></li><li><para><b>Organizational unit (OU)</b> - A string that begins with "ou-" followed by from
            4 to 32 lowercase letters or digits (the ID of the root that contains the OU). This
            string is followed by a second "-" dash and from 8 to 32 additional lowercase letters
            or digits.</para></li></ul>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGParentCmdlet.MaxResult">
            <summary>
            <para>
            <para>The total number of results that you want included on each page of the response. If
            you do not include this parameter, it defaults to a value that is specific to the
            operation. If additional items exist beyond the maximum you specify, the <code>NextToken</code>
            response element is present and has a value (is not null). Include that value as the
            <code>NextToken</code> request parameter in the next call to the operation to get
            the next part of the results. Note that Organizations might return fewer results than
            the maximum even when there are more results available. You should check <code>NextToken</code>
            after every operation to ensure that you receive all of the results.</para>
            </para>
            <para>
            <br/><b>Note:</b> In AWSPowerShell and AWSPowerShell.NetCore this parameter is used to limit the total number of items returned by the cmdlet.
            <br/>In AWS.Tools this parameter is simply passed to the service to specify how many items should be returned by each service call.
            <br/>Pipe the output of this cmdlet into Select-Object -First to terminate retrieving data pages early and control the number of items returned.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGParentCmdlet.NextToken">
            <summary>
            <para>
            <para>The parameter for receiving additional results if you receive a <code>NextToken</code>
            response in a previous request. A <code>NextToken</code> response indicates that more
            output is available. Set this parameter to the value of the previous call's <code>NextToken</code>
            response to indicate where the output should continue from.</para>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGParentCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'Parents'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Organizations.Model.ListParentsResponse).
            Specifying the name of a property of type Amazon.Organizations.Model.ListParentsResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGParentCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the ChildId parameter.
            The -PassThru parameter is deprecated, use -Select '^ChildId' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGParentCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ORG.GetORGPolicyCmdlet">
            <summary>
            Retrieves information about a policy.
            
             
            <para>
            This operation can be called only from the organization's master account or by a member
            account that is a delegated administrator for an AWS service.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGPolicyCmdlet.PolicyId">
            <summary>
            <para>
            <para>The unique identifier (ID) of the policy that you want details about. You can get
            the ID from the <a>ListPolicies</a> or <a>ListPoliciesForTarget</a> operations.</para><para>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for a policy ID string
            requires "p-" followed by from 8 to 128 lowercase or uppercase letters, digits, or
            the underscore character (_).</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGPolicyCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'Policy'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Organizations.Model.DescribePolicyResponse).
            Specifying the name of a property of type Amazon.Organizations.Model.DescribePolicyResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGPolicyCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the PolicyId parameter.
            The -PassThru parameter is deprecated, use -Select '^PolicyId' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ORG.GetORGPolicyForTargetCmdlet">
            <summary>
            Lists the policies that are directly attached to the specified target root, organizational
            unit (OU), or account. You must specify the policy type that you want included in
            the returned list.
            
             <note><para>
            Always check the <code>NextToken</code> response parameter for a <code>null</code>
            value when calling a <code>List*</code> operation. These operations can occasionally
            return an empty set of results even when there are more results available. The <code>NextToken</code>
            response parameter value is <code>null</code><i>only</i> when there are no more results
            to display.
            </para></note><para>
            This operation can be called only from the organization's master account or by a member
            account that is a delegated administrator for an AWS service.
            </para><br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGPolicyForTargetCmdlet.Filter">
            <summary>
            <para>
            <para>The type of policy that you want to include in the returned list.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGPolicyForTargetCmdlet.TargetId">
            <summary>
            <para>
            <para>The unique identifier (ID) of the root, organizational unit, or account whose policies
            you want to list.</para><para>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for a target ID string
            requires one of the following:</para><ul><li><para><b>Root</b> - A string that begins with "r-" followed by from 4 to 32 lowercase letters
            or digits.</para></li><li><para><b>Account</b> - A string that consists of exactly 12 digits.</para></li><li><para><b>Organizational unit (OU)</b> - A string that begins with "ou-" followed by from
            4 to 32 lowercase letters or digits (the ID of the root that the OU is in). This string
            is followed by a second "-" dash and from 8 to 32 additional lowercase letters or
            digits.</para></li></ul>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGPolicyForTargetCmdlet.MaxResult">
            <summary>
            <para>
            <para>The total number of results that you want included on each page of the response. If
            you do not include this parameter, it defaults to a value that is specific to the
            operation. If additional items exist beyond the maximum you specify, the <code>NextToken</code>
            response element is present and has a value (is not null). Include that value as the
            <code>NextToken</code> request parameter in the next call to the operation to get
            the next part of the results. Note that Organizations might return fewer results than
            the maximum even when there are more results available. You should check <code>NextToken</code>
            after every operation to ensure that you receive all of the results.</para>
            </para>
            <para>
            <br/><b>Note:</b> In AWSPowerShell and AWSPowerShell.NetCore this parameter is used to limit the total number of items returned by the cmdlet.
            <br/>In AWS.Tools this parameter is simply passed to the service to specify how many items should be returned by each service call.
            <br/>Pipe the output of this cmdlet into Select-Object -First to terminate retrieving data pages early and control the number of items returned.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGPolicyForTargetCmdlet.NextToken">
            <summary>
            <para>
            <para>The parameter for receiving additional results if you receive a <code>NextToken</code>
            response in a previous request. A <code>NextToken</code> response indicates that more
            output is available. Set this parameter to the value of the previous call's <code>NextToken</code>
            response to indicate where the output should continue from.</para>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGPolicyForTargetCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'Policies'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Organizations.Model.ListPoliciesForTargetResponse).
            Specifying the name of a property of type Amazon.Organizations.Model.ListPoliciesForTargetResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGPolicyForTargetCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the TargetId parameter.
            The -PassThru parameter is deprecated, use -Select '^TargetId' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGPolicyForTargetCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ORG.GetORGPolicyListCmdlet">
            <summary>
            Retrieves the list of all policies in an organization of a specified type.
            
             <note><para>
            Always check the <code>NextToken</code> response parameter for a <code>null</code>
            value when calling a <code>List*</code> operation. These operations can occasionally
            return an empty set of results even when there are more results available. The <code>NextToken</code>
            response parameter value is <code>null</code><i>only</i> when there are no more results
            to display.
            </para></note><para>
            This operation can be called only from the organization's master account or by a member
            account that is a delegated administrator for an AWS service.
            </para><br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGPolicyListCmdlet.Filter">
            <summary>
            <para>
            <para>Specifies the type of policy that you want to include in the response.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGPolicyListCmdlet.MaxResult">
            <summary>
            <para>
            <para>The total number of results that you want included on each page of the response. If
            you do not include this parameter, it defaults to a value that is specific to the
            operation. If additional items exist beyond the maximum you specify, the <code>NextToken</code>
            response element is present and has a value (is not null). Include that value as the
            <code>NextToken</code> request parameter in the next call to the operation to get
            the next part of the results. Note that Organizations might return fewer results than
            the maximum even when there are more results available. You should check <code>NextToken</code>
            after every operation to ensure that you receive all of the results.</para>
            </para>
            <para>
            <br/><b>Note:</b> In AWSPowerShell and AWSPowerShell.NetCore this parameter is used to limit the total number of items returned by the cmdlet.
            <br/>In AWS.Tools this parameter is simply passed to the service to specify how many items should be returned by each service call.
            <br/>Pipe the output of this cmdlet into Select-Object -First to terminate retrieving data pages early and control the number of items returned.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGPolicyListCmdlet.NextToken">
            <summary>
            <para>
            <para>The parameter for receiving additional results if you receive a <code>NextToken</code>
            response in a previous request. A <code>NextToken</code> response indicates that more
            output is available. Set this parameter to the value of the previous call's <code>NextToken</code>
            response to indicate where the output should continue from.</para>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGPolicyListCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'Policies'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Organizations.Model.ListPoliciesResponse).
            Specifying the name of a property of type Amazon.Organizations.Model.ListPoliciesResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGPolicyListCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the Filter parameter.
            The -PassThru parameter is deprecated, use -Select '^Filter' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGPolicyListCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ORG.GetORGResourceTagCmdlet">
            <summary>
            Lists tags for the specified resource. 
            
             
            <para>
            Currently, you can list tags on an account in AWS Organizations.
            </para><para>
            This operation can be called only from the organization's master account or by a member
            account that is a delegated administrator for an AWS service.
            </para><br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGResourceTagCmdlet.ResourceId">
            <summary>
            <para>
            <para>The ID of the resource that you want to retrieve tags for. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGResourceTagCmdlet.NextToken">
            <summary>
            <para>
            <para>The parameter for receiving additional results if you receive a <code>NextToken</code>
            response in a previous request. A <code>NextToken</code> response indicates that more
            output is available. Set this parameter to the value of the previous call's <code>NextToken</code>
            response to indicate where the output should continue from.</para>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGResourceTagCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'Tags'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Organizations.Model.ListTagsForResourceResponse).
            Specifying the name of a property of type Amazon.Organizations.Model.ListTagsForResourceResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGResourceTagCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the ResourceId parameter.
            The -PassThru parameter is deprecated, use -Select '^ResourceId' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGResourceTagCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ORG.GetORGRootCmdlet">
            <summary>
            Lists the roots that are defined in the current organization.
            
             <note><para>
            Always check the <code>NextToken</code> response parameter for a <code>null</code>
            value when calling a <code>List*</code> operation. These operations can occasionally
            return an empty set of results even when there are more results available. The <code>NextToken</code>
            response parameter value is <code>null</code><i>only</i> when there are no more results
            to display.
            </para></note><para>
            This operation can be called only from the organization's master account or by a member
            account that is a delegated administrator for an AWS service.
            </para><note><para>
            Policy types can be enabled and disabled in roots. This is distinct from whether they're
            available in the organization. When you enable all features, you make policy types
            available for use in that organization. Individual policy types can then be enabled
            and disabled in a root. To see the availability of a policy type in an organization,
            use <a>DescribeOrganization</a>.
            </para></note><br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGRootCmdlet.MaxResult">
            <summary>
            <para>
            <para>The total number of results that you want included on each page of the response. If
            you do not include this parameter, it defaults to a value that is specific to the
            operation. If additional items exist beyond the maximum you specify, the <code>NextToken</code>
            response element is present and has a value (is not null). Include that value as the
            <code>NextToken</code> request parameter in the next call to the operation to get
            the next part of the results. Note that Organizations might return fewer results than
            the maximum even when there are more results available. You should check <code>NextToken</code>
            after every operation to ensure that you receive all of the results.</para>
            </para>
            <para>
            <br/><b>Note:</b> In AWSPowerShell and AWSPowerShell.NetCore this parameter is used to limit the total number of items returned by the cmdlet.
            <br/>In AWS.Tools this parameter is simply passed to the service to specify how many items should be returned by each service call.
            <br/>Pipe the output of this cmdlet into Select-Object -First to terminate retrieving data pages early and control the number of items returned.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGRootCmdlet.NextToken">
            <summary>
            <para>
            <para>The parameter for receiving additional results if you receive a <code>NextToken</code>
            response in a previous request. A <code>NextToken</code> response indicates that more
            output is available. Set this parameter to the value of the previous call's <code>NextToken</code>
            response to indicate where the output should continue from.</para>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGRootCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'Roots'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Organizations.Model.ListRootsResponse).
            Specifying the name of a property of type Amazon.Organizations.Model.ListRootsResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGRootCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ORG.GetORGTargetForPolicyCmdlet">
            <summary>
            Lists all the roots, organizational units (OUs), and accounts that the specified policy
            is attached to.
            
             <note><para>
            Always check the <code>NextToken</code> response parameter for a <code>null</code>
            value when calling a <code>List*</code> operation. These operations can occasionally
            return an empty set of results even when there are more results available. The <code>NextToken</code>
            response parameter value is <code>null</code><i>only</i> when there are no more results
            to display.
            </para></note><para>
            This operation can be called only from the organization's master account or by a member
            account that is a delegated administrator for an AWS service.
            </para><br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGTargetForPolicyCmdlet.PolicyId">
            <summary>
            <para>
            <para>The unique identifier (ID) of the policy whose attachments you want to know.</para><para>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for a policy ID string
            requires "p-" followed by from 8 to 128 lowercase or uppercase letters, digits, or
            the underscore character (_).</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGTargetForPolicyCmdlet.MaxResult">
            <summary>
            <para>
            <para>The total number of results that you want included on each page of the response. If
            you do not include this parameter, it defaults to a value that is specific to the
            operation. If additional items exist beyond the maximum you specify, the <code>NextToken</code>
            response element is present and has a value (is not null). Include that value as the
            <code>NextToken</code> request parameter in the next call to the operation to get
            the next part of the results. Note that Organizations might return fewer results than
            the maximum even when there are more results available. You should check <code>NextToken</code>
            after every operation to ensure that you receive all of the results.</para>
            </para>
            <para>
            <br/><b>Note:</b> In AWSPowerShell and AWSPowerShell.NetCore this parameter is used to limit the total number of items returned by the cmdlet.
            <br/>In AWS.Tools this parameter is simply passed to the service to specify how many items should be returned by each service call.
            <br/>Pipe the output of this cmdlet into Select-Object -First to terminate retrieving data pages early and control the number of items returned.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGTargetForPolicyCmdlet.NextToken">
            <summary>
            <para>
            <para>The parameter for receiving additional results if you receive a <code>NextToken</code>
            response in a previous request. A <code>NextToken</code> response indicates that more
            output is available. Set this parameter to the value of the previous call's <code>NextToken</code>
            response to indicate where the output should continue from.</para>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGTargetForPolicyCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'Targets'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Organizations.Model.ListTargetsForPolicyResponse).
            Specifying the name of a property of type Amazon.Organizations.Model.ListTargetsForPolicyResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGTargetForPolicyCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the PolicyId parameter.
            The -PassThru parameter is deprecated, use -Select '^PolicyId' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.GetORGTargetForPolicyCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ORG.MoveORGAccountCmdlet">
            <summary>
            Moves an account from its current source parent root or organizational unit (OU) to
            the specified destination parent root or OU.
            
             
            <para>
            This operation can be called only from the organization's master account.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.MoveORGAccountCmdlet.AccountId">
            <summary>
            <para>
            <para>The unique identifier (ID) of the account that you want to move.</para><para>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for an account ID
            string requires exactly 12 digits.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.MoveORGAccountCmdlet.DestinationParentId">
            <summary>
            <para>
            <para>The unique identifier (ID) of the root or organizational unit that you want to move
            the account to.</para><para>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for a parent ID string
            requires one of the following:</para><ul><li><para><b>Root</b> - A string that begins with "r-" followed by from 4 to 32 lowercase letters
            or digits.</para></li><li><para><b>Organizational unit (OU)</b> - A string that begins with "ou-" followed by from
            4 to 32 lowercase letters or digits (the ID of the root that the OU is in). This string
            is followed by a second "-" dash and from 8 to 32 additional lowercase letters or
            digits.</para></li></ul>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.MoveORGAccountCmdlet.SourceParentId">
            <summary>
            <para>
            <para>The unique identifier (ID) of the root or organizational unit that you want to move
            the account from.</para><para>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for a parent ID string
            requires one of the following:</para><ul><li><para><b>Root</b> - A string that begins with "r-" followed by from 4 to 32 lowercase letters
            or digits.</para></li><li><para><b>Organizational unit (OU)</b> - A string that begins with "ou-" followed by from
            4 to 32 lowercase letters or digits (the ID of the root that the OU is in). This string
            is followed by a second "-" dash and from 8 to 32 additional lowercase letters or
            digits.</para></li></ul>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.MoveORGAccountCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The cmdlet doesn't have a return value by default.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Organizations.Model.MoveAccountResponse).
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.MoveORGAccountCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the AccountId parameter.
            The -PassThru parameter is deprecated, use -Select '^AccountId' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.MoveORGAccountCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ORG.NewORGAccountCmdlet">
            <summary>
            Creates an AWS account that is automatically a member of the organization whose credentials
            made the request. This is an asynchronous request that AWS performs in the background.
            Because <code>CreateAccount</code> operates asynchronously, it can return a successful
            completion message even though account initialization might still be in progress.
            You might need to wait a few minutes before you can successfully access the account.
            To check the status of the request, do one of the following:
            
             <ul><li><para>
            Use the <code>OperationId</code> response element from this operation to provide as
            a parameter to the <a>DescribeCreateAccountStatus</a> operation.
            </para></li><li><para>
            Check the AWS CloudTrail log for the <code>CreateAccountResult</code> event. For information
            on using AWS CloudTrail with AWS Organizations, see <a href="http://docs.aws.amazon.com/organizations/latest/userguide/orgs_monitoring.html">Monitoring
            the Activity in Your Organization</a> in the <i>AWS Organizations User Guide.</i></para></li></ul><para>
            The user who calls the API to create an account must have the <code>organizations:CreateAccount</code>
            permission. If you enabled all features in the organization, AWS Organizations creates
            the required service-linked role named <code>AWSServiceRoleForOrganizations</code>.
            For more information, see <a href="http://docs.aws.amazon.com/organizations/latest/userguide/orgs_integrate_services.html#orgs_integrate_services-using_slrs">AWS
            Organizations and Service-Linked Roles</a> in the <i>AWS Organizations User Guide</i>.
            </para><para>
            AWS Organizations preconfigures the new member account with a role (named <code>OrganizationAccountAccessRole</code>
            by default) that grants users in the master account administrator permissions in the
            new member account. Principals in the master account can assume the role. AWS Organizations
            clones the company name and address information for the new account from the organization's
            master account.
            </para><para>
            This operation can be called only from the organization's master account.
            </para><para>
            For more information about creating accounts, see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_create.html">Creating
            an AWS Account in Your Organization</a> in the <i>AWS Organizations User Guide.</i></para><important><ul><li><para>
            When you create an account in an organization using the AWS Organizations console,
            API, or CLI commands, the information required for the account to operate as a standalone
            account, such as a payment method and signing the end user license agreement (EULA)
            is <i>not</i> automatically collected. If you must remove an account from your organization
            later, you can do so only after you provide the missing information. Follow the steps
            at <a href="http://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_remove.html#leave-without-all-info">
            To leave an organization as a member account</a> in the <i>AWS Organizations User
            Guide</i>.
            </para></li><li><para>
            If you get an exception that indicates that you exceeded your account limits for the
            organization, contact <a href="https://console.aws.amazon.com/support/home#/">AWS
            Support</a>.
            </para></li><li><para>
            If you get an exception that indicates that the operation failed because your organization
            is still initializing, wait one hour and then try again. If the error persists, contact
            <a href="https://console.aws.amazon.com/support/home#/">AWS Support</a>.
            </para></li><li><para>
            Using <code>CreateAccount</code> to create multiple temporary accounts isn't recommended.
            You can only close an account from the Billing and Cost Management Console, and you
            must be signed in as the root user. For information on the requirements and process
            for closing an account, see <a href="http://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_close.html">Closing
            an AWS Account</a> in the <i>AWS Organizations User Guide</i>.
            </para></li></ul></important><note><para>
            When you create a member account with this operation, you can choose whether to create
            the account with the <b>IAM User and Role Access to Billing Information</b> switch
            enabled. If you enable it, IAM users and roles that have appropriate permissions can
            view billing information for the account. If you disable it, only the account root
            user can access billing information. For information about how to disable this switch
            for an account, see <a href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/grantaccess.html">Granting
            Access to Your Billing Information and Tools</a>.
            </para></note>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.NewORGAccountCmdlet.AccountName">
            <summary>
            <para>
            <para>The friendly name of the member account.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.NewORGAccountCmdlet.Email">
            <summary>
            <para>
            <para>The email address of the owner to assign to the new member account. This email address
            must not already be associated with another AWS account. You must use a valid email
            address to complete account creation. You can't access the root user of the account
            or remove an account that was created with an invalid email address.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.NewORGAccountCmdlet.IamUserAccessToBilling">
            <summary>
            <para>
            <para>If set to <code>ALLOW</code>, the new account enables IAM users to access account
            billing information <i>if</i> they have the required permissions. If set to <code>DENY</code>,
            only the root user of the new account can access account billing information. For
            more information, see <a href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/grantaccess.html#ControllingAccessWebsite-Activate">Activating
            Access to the Billing and Cost Management Console</a> in the <i>AWS Billing and Cost
            Management User Guide</i>.</para><para>If you don't specify this parameter, the value defaults to <code>ALLOW</code>, and
            IAM users and roles with the required permissions can access billing information for
            the new account.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.NewORGAccountCmdlet.RoleName">
            <summary>
            <para>
            <para>(Optional)</para><para>The name of an IAM role that AWS Organizations automatically preconfigures in the
            new member account. This role trusts the master account, allowing users in the master
            account to assume the role, as permitted by the master account administrator. The
            role has administrator permissions in the new member account.</para><para>If you don't specify this parameter, the role name defaults to <code>OrganizationAccountAccessRole</code>.</para><para>For more information about how to use this role to access the member account, see
            the following links:</para><ul><li><para><a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_access.html#orgs_manage_accounts_create-cross-account-role">Accessing
            and Administering the Member Accounts in Your Organization</a> in the <i>AWS Organizations
            User Guide</i></para></li><li><para>Steps 2 and 3 in <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/tutorial_cross-account-with-roles.html">Tutorial:
            Delegate Access Across AWS Accounts Using IAM Roles</a> in the <i>IAM User Guide</i></para></li></ul><para>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> that is used to validate
            this parameter. The pattern can include uppercase letters, lowercase letters, digits
            with no spaces, and any of the following characters: =,.@-</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.NewORGAccountCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'CreateAccountStatus'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Organizations.Model.CreateAccountResponse).
            Specifying the name of a property of type Amazon.Organizations.Model.CreateAccountResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.NewORGAccountCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the AccountName parameter.
            The -PassThru parameter is deprecated, use -Select '^AccountName' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.NewORGAccountCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ORG.NewORGAccountInvitationCmdlet">
            <summary>
            Sends an invitation to another account to join your organization as a member account.
            AWS Organizations sends email on your behalf to the email address that is associated
            with the other account's owner. The invitation is implemented as a <a>Handshake</a>
            whose details are in the response.
            
             <important><ul><li><para>
            You can invite AWS accounts only from the same seller as the master account. For example,
            if your organization's master account was created by Amazon Internet Services Pvt.
            Ltd (AISPL), an AWS seller in India, you can invite only other AISPL accounts to your
            organization. You can't combine accounts from AISPL and AWS or from any other AWS
            seller. For more information, see <a href="http://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/useconsolidatedbilliing-India.html">Consolidated
            Billing in India</a>.
            </para></li><li><para>
            If you receive an exception that indicates that you exceeded your account limits for
            the organization or that the operation failed because your organization is still initializing,
            wait one hour and then try again. If the error persists after an hour, contact <a href="https://console.aws.amazon.com/support/home#/">AWS Support</a>.
            </para></li></ul></important><para>
            This operation can be called only from the organization's master account.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.NewORGAccountInvitationCmdlet.Target_Id">
            <summary>
            <para>
            <para>The unique identifier (ID) for the party.</para><para>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for handshake ID string
            requires "h-" followed by from 8 to 32 lower-case letters or digits.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.NewORGAccountInvitationCmdlet.Note">
            <summary>
            <para>
            <para>Additional information that you want to include in the generated email to the recipient
            account owner.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.NewORGAccountInvitationCmdlet.Target_Type">
            <summary>
            <para>
            <para>The type of party.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.NewORGAccountInvitationCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'Handshake'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Organizations.Model.InviteAccountToOrganizationResponse).
            Specifying the name of a property of type Amazon.Organizations.Model.InviteAccountToOrganizationResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.NewORGAccountInvitationCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the Target_Id parameter.
            The -PassThru parameter is deprecated, use -Select '^Target_Id' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.NewORGAccountInvitationCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ORG.NewORGGovCloudAccountCmdlet">
            <summary>
            This action is available if all of the following are true:
            
             <ul><li><para>
            You're authorized to create accounts in the AWS GovCloud (US) Region. For more information
            on the AWS GovCloud (US) Region, see the <a href="http://docs.aws.amazon.com/govcloud-us/latest/UserGuide/welcome.html"><i>AWS GovCloud User Guide</i>.</a></para></li><li><para>
            You already have an account in the AWS GovCloud (US) Region that is associated with
            your master account in the commercial Region. 
            </para></li><li><para>
            You call this action from the master account of your organization in the commercial
            Region.
            </para></li><li><para>
            You have the <code>organizations:CreateGovCloudAccount</code> permission. AWS Organizations
            creates the required service-linked role named <code>AWSServiceRoleForOrganizations</code>.
            For more information, see <a href="http://docs.aws.amazon.com/organizations/latest/userguide/orgs_integrate_services.html#orgs_integrate_services-using_slrs">AWS
            Organizations and Service-Linked Roles</a> in the <i>AWS Organizations User Guide.</i></para></li></ul><para>
            AWS automatically enables AWS CloudTrail for AWS GovCloud (US) accounts, but you should
            also do the following:
            </para><ul><li><para>
            Verify that AWS CloudTrail is enabled to store logs.
            </para></li><li><para>
            Create an S3 bucket for AWS CloudTrail log storage.
            </para><para>
            For more information, see <a href="http://docs.aws.amazon.com/govcloud-us/latest/UserGuide/verifying-cloudtrail.html">Verifying
            AWS CloudTrail Is Enabled</a> in the <i>AWS GovCloud User Guide</i>. 
            </para></li></ul><para>
            You call this action from the master account of your organization in the commercial
            Region to create a standalone AWS account in the AWS GovCloud (US) Region. After the
            account is created, the master account of an organization in the AWS GovCloud (US)
            Region can invite it to that organization. For more information on inviting standalone
            accounts in the AWS GovCloud (US) to join an organization, see <a href="http://docs.aws.amazon.com/govcloud-us/latest/UserGuide/govcloud-organizations.html">AWS
            Organizations</a> in the <i>AWS GovCloud User Guide.</i></para><para>
            Calling <code>CreateGovCloudAccount</code> is an asynchronous request that AWS performs
            in the background. Because <code>CreateGovCloudAccount</code> operates asynchronously,
            it can return a successful completion message even though account initialization might
            still be in progress. You might need to wait a few minutes before you can successfully
            access the account. To check the status of the request, do one of the following:
            </para><ul><li><para>
            Use the <code>OperationId</code> response element from this operation to provide as
            a parameter to the <a>DescribeCreateAccountStatus</a> operation.
            </para></li><li><para>
            Check the AWS CloudTrail log for the <code>CreateAccountResult</code> event. For information
            on using AWS CloudTrail with Organizations, see <a href="http://docs.aws.amazon.com/organizations/latest/userguide/orgs_monitoring.html">Monitoring
            the Activity in Your Organization</a> in the <i>AWS Organizations User Guide.</i></para></li></ul><para>
            When you call the <code>CreateGovCloudAccount</code> action, you create two accounts:
            a standalone account in the AWS GovCloud (US) Region and an associated account in
            the commercial Region for billing and support purposes. The account in the commercial
            Region is automatically a member of the organization whose credentials made the request.
            Both accounts are associated with the same email address.
            </para><para>
            A role is created in the new account in the commercial Region that allows the master
            account in the organization in the commercial Region to assume it. An AWS GovCloud
            (US) account is then created and associated with the commercial account that you just
            created. A role is created in the new AWS GovCloud (US) account that can be assumed
            by the AWS GovCloud (US) account that is associated with the master account of the
            commercial organization. For more information and to view a diagram that explains
            how account access works, see <a href="http://docs.aws.amazon.com/govcloud-us/latest/UserGuide/govcloud-organizations.html">AWS
            Organizations</a> in the <i>AWS GovCloud User Guide.</i></para><para>
            For more information about creating accounts, see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_create.html">Creating
            an AWS Account in Your Organization</a> in the <i>AWS Organizations User Guide.</i></para><important><ul><li><para>
            When you create an account in an organization using the AWS Organizations console,
            API, or CLI commands, the information required for the account to operate as a standalone
            account, such as a payment method and signing the end user license agreement (EULA)
            is <i>not</i> automatically collected. If you must remove an account from your organization
            later, you can do so only after you provide the missing information. Follow the steps
            at <a href="http://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_remove.html#leave-without-all-info">
            To leave an organization as a member account</a> in the <i>AWS Organizations User
            Guide.</i></para></li><li><para>
            If you get an exception that indicates that you exceeded your account limits for the
            organization, contact <a href="https://console.aws.amazon.com/support/home#/">AWS
            Support</a>.
            </para></li><li><para>
            If you get an exception that indicates that the operation failed because your organization
            is still initializing, wait one hour and then try again. If the error persists, contact
            <a href="https://console.aws.amazon.com/support/home#/">AWS Support</a>.
            </para></li><li><para>
            Using <code>CreateGovCloudAccount</code> to create multiple temporary accounts isn't
            recommended. You can only close an account from the AWS Billing and Cost Management
            console, and you must be signed in as the root user. For information on the requirements
            and process for closing an account, see <a href="http://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_close.html">Closing
            an AWS Account</a> in the <i>AWS Organizations User Guide</i>.
            </para></li></ul></important><note><para>
            When you create a member account with this operation, you can choose whether to create
            the account with the <b>IAM User and Role Access to Billing Information</b> switch
            enabled. If you enable it, IAM users and roles that have appropriate permissions can
            view billing information for the account. If you disable it, only the account root
            user can access billing information. For information about how to disable this switch
            for an account, see <a href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/grantaccess.html">Granting
            Access to Your Billing Information and Tools</a>.
            </para></note>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.NewORGGovCloudAccountCmdlet.AccountName">
            <summary>
            <para>
            <para>The friendly name of the member account.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.NewORGGovCloudAccountCmdlet.Email">
            <summary>
            <para>
            <para>The email address of the owner to assign to the new member account in the commercial
            Region. This email address must not already be associated with another AWS account.
            You must use a valid email address to complete account creation. You can't access
            the root user of the account or remove an account that was created with an invalid
            email address. Like all request parameters for <code>CreateGovCloudAccount</code>,
            the request for the email address for the AWS GovCloud (US) account originates from
            the commercial Region, not from the AWS GovCloud (US) Region.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.NewORGGovCloudAccountCmdlet.IamUserAccessToBilling">
            <summary>
            <para>
            <para>If set to <code>ALLOW</code>, the new linked account in the commercial Region enables
            IAM users to access account billing information <i>if</i> they have the required permissions.
            If set to <code>DENY</code>, only the root user of the new account can access account
            billing information. For more information, see <a href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/grantaccess.html#ControllingAccessWebsite-Activate">Activating
            Access to the Billing and Cost Management Console</a> in the <i>AWS Billing and Cost
            Management User Guide.</i></para><para>If you don't specify this parameter, the value defaults to <code>ALLOW</code>, and
            IAM users and roles with the required permissions can access billing information for
            the new account.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.NewORGGovCloudAccountCmdlet.RoleName">
            <summary>
            <para>
            <para>(Optional)</para><para>The name of an IAM role that AWS Organizations automatically preconfigures in the
            new member accounts in both the AWS GovCloud (US) Region and in the commercial Region.
            This role trusts the master account, allowing users in the master account to assume
            the role, as permitted by the master account administrator. The role has administrator
            permissions in the new member account.</para><para>If you don't specify this parameter, the role name defaults to <code>OrganizationAccountAccessRole</code>.</para><para>For more information about how to use this role to access the member account, see
            <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_access.html#orgs_manage_accounts_create-cross-account-role">Accessing
            and Administering the Member Accounts in Your Organization</a> in the <i>AWS Organizations
            User Guide</i> and steps 2 and 3 in <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/tutorial_cross-account-with-roles.html">Tutorial:
            Delegate Access Across AWS Accounts Using IAM Roles</a> in the <i>IAM User Guide.</i></para><para>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> that is used to validate
            this parameter. The pattern can include uppercase letters, lowercase letters, digits
            with no spaces, and any of the following characters: =,.@-</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.NewORGGovCloudAccountCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'CreateAccountStatus'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Organizations.Model.CreateGovCloudAccountResponse).
            Specifying the name of a property of type Amazon.Organizations.Model.CreateGovCloudAccountResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.NewORGGovCloudAccountCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the Email parameter.
            The -PassThru parameter is deprecated, use -Select '^Email' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.NewORGGovCloudAccountCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ORG.NewORGOrganizationCmdlet">
            <summary>
            Creates an AWS organization. The account whose user is calling the <code>CreateOrganization</code>
            operation automatically becomes the <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/orgs_getting-started_concepts.html#account">master
            account</a> of the new organization.
            
             
            <para>
            This operation must be called using credentials from the account that is to become
            the new organization's master account. The principal must also have the relevant IAM
            permissions.
            </para><para>
            By default (or if you set the <code>FeatureSet</code> parameter to <code>ALL</code>),
            the new organization is created with all features enabled and service control policies
            automatically enabled in the root. If you instead choose to create the organization
            supporting only the consolidated billing features by setting the <code>FeatureSet</code>
            parameter to <code>CONSOLIDATED_BILLING"</code>, no policy types are enabled by default,
            and you can't use organization policies
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.NewORGOrganizationCmdlet.FeatureSet">
            <summary>
            <para>
            <para>Specifies the feature set supported by the new organization. Each feature set supports
            different levels of functionality.</para><ul><li><para><code>CONSOLIDATED_BILLING</code>: All member accounts have their bills consolidated
            to and paid by the master account. For more information, see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_getting-started_concepts.html#feature-set-cb-only">Consolidated
            billing</a> in the <i>AWS Organizations User Guide.</i></para><para> The consolidated billing feature subset isn't available for organizations in the
            AWS GovCloud (US) Region.</para></li><li><para><code>ALL</code>: In addition to all the features supported by the consolidated billing
            feature set, the master account can also apply any policy type to any member account
            in the organization. For more information, see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_getting-started_concepts.html#feature-set-all">All
            features</a> in the <i>AWS Organizations User Guide.</i></para></li></ul>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.NewORGOrganizationCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'Organization'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Organizations.Model.CreateOrganizationResponse).
            Specifying the name of a property of type Amazon.Organizations.Model.CreateOrganizationResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.NewORGOrganizationCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the FeatureSet parameter.
            The -PassThru parameter is deprecated, use -Select '^FeatureSet' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.NewORGOrganizationCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ORG.NewORGOrganizationalUnitCmdlet">
            <summary>
            Creates an organizational unit (OU) within a root or parent OU. An OU is a container
            for accounts that enables you to organize your accounts to apply policies according
            to your business requirements. The number of levels deep that you can nest OUs is
            dependent upon the policy types enabled for that root. For service control policies,
            the limit is five. 
            
             
            <para>
            For more information about OUs, see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_ous.html">Managing
            Organizational Units</a> in the <i>AWS Organizations User Guide.</i></para><para>
            This operation can be called only from the organization's master account.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.NewORGOrganizationalUnitCmdlet.Name">
            <summary>
            <para>
            <para>The friendly name to assign to the new OU.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.NewORGOrganizationalUnitCmdlet.ParentId">
            <summary>
            <para>
            <para>The unique identifier (ID) of the parent root or OU that you want to create the new
            OU in.</para><para>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for a parent ID string
            requires one of the following:</para><ul><li><para><b>Root</b> - A string that begins with "r-" followed by from 4 to 32 lowercase letters
            or digits.</para></li><li><para><b>Organizational unit (OU)</b> - A string that begins with "ou-" followed by from
            4 to 32 lowercase letters or digits (the ID of the root that the OU is in). This string
            is followed by a second "-" dash and from 8 to 32 additional lowercase letters or
            digits.</para></li></ul>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.NewORGOrganizationalUnitCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'OrganizationalUnit'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Organizations.Model.CreateOrganizationalUnitResponse).
            Specifying the name of a property of type Amazon.Organizations.Model.CreateOrganizationalUnitResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.NewORGOrganizationalUnitCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the Name parameter.
            The -PassThru parameter is deprecated, use -Select '^Name' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.NewORGOrganizationalUnitCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ORG.NewORGPolicyCmdlet">
            <summary>
            Creates a policy of a specified type that you can attach to a root, an organizational
            unit (OU), or an individual AWS account.
            
             
            <para>
            For more information about policies and their use, see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies.html">Managing
            Organization Policies</a>.
            </para><para>
            This operation can be called only from the organization's master account.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.NewORGPolicyCmdlet.Content">
            <summary>
            <para>
            <para>The policy content to add to the new policy. For example, if you create a <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_scp.html">service
            control policy</a> (SCP), this string must be JSON text that specifies the permissions
            that admins in attached accounts can delegate to their users, groups, and roles. For
            more information about the SCP syntax, see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_reference_scp-syntax.html">Service
            Control Policy Syntax</a> in the <i>AWS Organizations User Guide.</i></para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.NewORGPolicyCmdlet.Description">
            <summary>
            <para>
            <para>An optional description to assign to the policy.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.NewORGPolicyCmdlet.Name">
            <summary>
            <para>
            <para>The friendly name to assign to the policy.</para><para>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> that is used to validate
            this parameter is a string of any of the characters in the ASCII character range.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.NewORGPolicyCmdlet.Type">
            <summary>
            <para>
            <para>The type of policy to create.</para><note><para>In the current release, the only type of policy that you can create is a service control
            policy (SCP).</para></note>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.NewORGPolicyCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'Policy'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Organizations.Model.CreatePolicyResponse).
            Specifying the name of a property of type Amazon.Organizations.Model.CreatePolicyResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.NewORGPolicyCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the Name parameter.
            The -PassThru parameter is deprecated, use -Select '^Name' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.NewORGPolicyCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ORG.RegisterORGDelegatedAdministratorCmdlet">
            <summary>
            Enables the specified member account to administer the Organizations features of the
            specified AWS service. It grants read-only access to AWS Organizations service data.
            The account still requires IAM permissions to access and administer the AWS service.
            
             
            <para>
            You can run this action only for AWS services that support this feature. For a current
            list of services that support it, see the column <i>Supports Delegated Administrator</i>
            in the table at <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_integrated-services-list.html">AWS
            Services that you can use with AWS Organizations</a> in the <i>AWS Organizations User
            Guide.</i></para><para>
            This operation can be called only from the organization's master account.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.RegisterORGDelegatedAdministratorCmdlet.AccountId">
            <summary>
            <para>
            <para>The account ID number of the member account in the organization to register as a delegated
            administrator.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.RegisterORGDelegatedAdministratorCmdlet.ServicePrincipal">
            <summary>
            <para>
            <para>The service principal of the AWS service for which you want to make the member account
            a delegated administrator.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.RegisterORGDelegatedAdministratorCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The cmdlet doesn't have a return value by default.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Organizations.Model.RegisterDelegatedAdministratorResponse).
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.RegisterORGDelegatedAdministratorCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the AccountId parameter.
            The -PassThru parameter is deprecated, use -Select '^AccountId' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.RegisterORGDelegatedAdministratorCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ORG.RemoveORGAccountFromOrganizationCmdlet">
            <summary>
            Removes the specified account from the organization.
            
             
            <para>
            The removed account becomes a standalone account that isn't a member of any organization.
            It's no longer subject to any policies and is responsible for its own bill payments.
            The organization's master account is no longer charged for any expenses accrued by
            the member account after it's removed from the organization.
            </para><para>
            This operation can be called only from the organization's master account. Member accounts
            can remove themselves with <a>LeaveOrganization</a> instead.
            </para><important><para>
            You can remove an account from your organization only if the account is configured
            with the information required to operate as a standalone account. When you create
            an account in an organization using the AWS Organizations console, API, or CLI commands,
            the information required of standalone accounts is <i>not</i> automatically collected.
            For an account that you want to make standalone, you must accept the end user license
            agreement (EULA), choose a support plan, provide and verify the required contact information,
            and provide a current payment method. AWS uses the payment method to charge for any
            billable (not free tier) AWS activity that occurs while the account isn't attached
            to an organization. To remove an account that doesn't yet have this information, you
            must sign in as the member account and follow the steps at <a href="http://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_remove.html#leave-without-all-info">
            To leave an organization when all required account information has not yet been provided</a>
            in the <i>AWS Organizations User Guide.</i></para></important>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.RemoveORGAccountFromOrganizationCmdlet.AccountId">
            <summary>
            <para>
            <para>The unique identifier (ID) of the member account that you want to remove from the
            organization.</para><para>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for an account ID
            string requires exactly 12 digits.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.RemoveORGAccountFromOrganizationCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The cmdlet doesn't have a return value by default.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Organizations.Model.RemoveAccountFromOrganizationResponse).
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.RemoveORGAccountFromOrganizationCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the AccountId parameter.
            The -PassThru parameter is deprecated, use -Select '^AccountId' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.RemoveORGAccountFromOrganizationCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ORG.RemoveORGOrganizationCmdlet">
            <summary>
            Deletes the organization. You can delete an organization only by using credentials
            from the master account. The organization must be empty of member accounts.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.RemoveORGOrganizationCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The cmdlet doesn't have a return value by default.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Organizations.Model.DeleteOrganizationResponse).
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.RemoveORGOrganizationCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ORG.RemoveORGOrganizationalUnitCmdlet">
            <summary>
            Deletes an organizational unit (OU) from a root or another OU. You must first remove
            all accounts and child OUs from the OU that you want to delete.
            
             
            <para>
            This operation can be called only from the organization's master account.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.RemoveORGOrganizationalUnitCmdlet.OrganizationalUnitId">
            <summary>
            <para>
            <para>The unique identifier (ID) of the organizational unit that you want to delete. You
            can get the ID from the <a>ListOrganizationalUnitsForParent</a> operation.</para><para>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for an organizational
            unit ID string requires "ou-" followed by from 4 to 32 lowercase letters or digits
            (the ID of the root that contains the OU). This string is followed by a second "-"
            dash and from 8 to 32 additional lowercase letters or digits.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.RemoveORGOrganizationalUnitCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The cmdlet doesn't have a return value by default.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Organizations.Model.DeleteOrganizationalUnitResponse).
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.RemoveORGOrganizationalUnitCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the OrganizationalUnitId parameter.
            The -PassThru parameter is deprecated, use -Select '^OrganizationalUnitId' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.RemoveORGOrganizationalUnitCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ORG.RemoveORGOrganizationAssociationCmdlet">
            <summary>
            Removes a member account from its parent organization. This version of the operation
            is performed by the account that wants to leave. To remove a member account as a user
            in the master account, use <a>RemoveAccountFromOrganization</a> instead.
            
             
            <para>
            This operation can be called only from a member account in the organization.
            </para><important><ul><li><para>
            The master account in an organization with all features enabled can set service control
            policies (SCPs) that can restrict what administrators of member accounts can do. This
            includes preventing them from successfully calling <code>LeaveOrganization</code>
            and leaving the organization. 
            </para></li><li><para>
            You can leave an organization as a member account only if the account is configured
            with the information required to operate as a standalone account. When you create
            an account in an organization using the AWS Organizations console, API, or CLI commands,
            the information required of standalone accounts is <i>not</i> automatically collected.
            For each account that you want to make standalone, you must do the following steps:
            </para><ul><li><para>
            Accept the end user license agreement (EULA)
            </para></li><li><para>
            Choose a support plan
            </para></li><li><para>
            Provide and verify the required contact information
            </para></li><li><para>
            Provide a current payment method
            </para></li></ul><para>
            AWS uses the payment method to charge for any billable (not free tier) AWS activity
            that occurs while the account isn't attached to an organization. Follow the steps
            at <a href="http://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_remove.html#leave-without-all-info">
            To leave an organization when all required account information has not yet been provided</a>
            in the <i>AWS Organizations User Guide.</i></para></li><li><para>
            You can leave an organization only after you enable IAM user access to billing in
            your account. For more information, see <a href="http://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/grantaccess.html#ControllingAccessWebsite-Activate">Activating
            Access to the Billing and Cost Management Console</a> in the <i>AWS Billing and Cost
            Management User Guide.</i></para></li></ul></important>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.RemoveORGOrganizationAssociationCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The cmdlet doesn't have a return value by default.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Organizations.Model.LeaveOrganizationResponse).
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.RemoveORGOrganizationAssociationCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ORG.RemoveORGPolicyCmdlet">
            <summary>
            Deletes the specified policy from your organization. Before you perform this operation,
            you must first detach the policy from all organizational units (OUs), roots, and accounts.
            
             
            <para>
            This operation can be called only from the organization's master account.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.RemoveORGPolicyCmdlet.PolicyId">
            <summary>
            <para>
            <para>The unique identifier (ID) of the policy that you want to delete. You can get the
            ID from the <a>ListPolicies</a> or <a>ListPoliciesForTarget</a> operations.</para><para>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for a policy ID string
            requires "p-" followed by from 8 to 128 lowercase or uppercase letters, digits, or
            the underscore character (_).</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.RemoveORGPolicyCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The cmdlet doesn't have a return value by default.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Organizations.Model.DeletePolicyResponse).
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.RemoveORGPolicyCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the PolicyId parameter.
            The -PassThru parameter is deprecated, use -Select '^PolicyId' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.RemoveORGPolicyCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ORG.RemoveORGResourceTagCmdlet">
            <summary>
            Removes a tag from the specified resource. 
            
             
            <para>
            Currently, you can tag and untag accounts in AWS Organizations.
            </para><para>
            This operation can be called only from the organization's master account.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.RemoveORGResourceTagCmdlet.ResourceId">
            <summary>
            <para>
            <para>The ID of the resource to remove the tag from.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.RemoveORGResourceTagCmdlet.TagKey">
            <summary>
            <para>
            <para>The tag to remove from the specified resource.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.RemoveORGResourceTagCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The cmdlet doesn't have a return value by default.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Organizations.Model.UntagResourceResponse).
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.RemoveORGResourceTagCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the ResourceId parameter.
            The -PassThru parameter is deprecated, use -Select '^ResourceId' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.RemoveORGResourceTagCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ORG.StopORGHandshakeCmdlet">
            <summary>
            Cancels a handshake. Canceling a handshake sets the handshake state to <code>CANCELED</code>.
            
            
             
            <para>
            This operation can be called only from the account that originated the handshake.
            The recipient of the handshake can't cancel it, but can use <a>DeclineHandshake</a>
            instead. After a handshake is canceled, the recipient can no longer respond to that
            handshake.
            </para><para>
            After you cancel a handshake, it continues to appear in the results of relevant APIs
            for only 30 days. After that, it's deleted.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.StopORGHandshakeCmdlet.HandshakeId">
            <summary>
            <para>
            <para>The unique identifier (ID) of the handshake that you want to cancel. You can get the
            ID from the <a>ListHandshakesForOrganization</a> operation.</para><para>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for handshake ID string
            requires "h-" followed by from 8 to 32 lowercase letters or digits.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.StopORGHandshakeCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'Handshake'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Organizations.Model.CancelHandshakeResponse).
            Specifying the name of a property of type Amazon.Organizations.Model.CancelHandshakeResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.StopORGHandshakeCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the HandshakeId parameter.
            The -PassThru parameter is deprecated, use -Select '^HandshakeId' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.StopORGHandshakeCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ORG.UnregisterORGDelegatedAdministratorCmdlet">
            <summary>
            Removes the specified member AWS account as a delegated administrator for the specified
            AWS service.
            
             
            <para>
            You can run this action only for AWS services that support this feature. For a current
            list of services that support it, see the column <i>Supports Delegated Administrator</i>
            in the table at <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_integrated-services-list.html">AWS
            Services that you can use with AWS Organizations</a> in the <i>AWS Organizations User
            Guide.</i></para><para>
            This operation can be called only from the organization's master account.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.UnregisterORGDelegatedAdministratorCmdlet.AccountId">
            <summary>
            <para>
            <para>The account ID number of the member account in the organization that you want to deregister
            as a delegated administrator.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.UnregisterORGDelegatedAdministratorCmdlet.ServicePrincipal">
            <summary>
            <para>
            <para>The service principal name of an AWS service for which the account is a delegated
            administrator.</para><para>Delegated administrator privileges are revoked for only the specified AWS service
            from the member account. If the specified service is the only service for which the
            member account is a delegated administrator, the operation also revokes Organizations
            read action permissions.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.UnregisterORGDelegatedAdministratorCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The cmdlet doesn't have a return value by default.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Organizations.Model.DeregisterDelegatedAdministratorResponse).
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.UnregisterORGDelegatedAdministratorCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the AccountId parameter.
            The -PassThru parameter is deprecated, use -Select '^AccountId' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.UnregisterORGDelegatedAdministratorCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ORG.UpdateORGOrganizationalUnitCmdlet">
            <summary>
            Renames the specified organizational unit (OU). The ID and ARN don't change. The child
            OUs and accounts remain in place, and any attached policies of the OU remain attached.
            
            
             
            <para>
            This operation can be called only from the organization's master account.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.UpdateORGOrganizationalUnitCmdlet.Name">
            <summary>
            <para>
            <para>The new name that you want to assign to the OU.</para><para>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> that is used to validate
            this parameter is a string of any of the characters in the ASCII character range.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.UpdateORGOrganizationalUnitCmdlet.OrganizationalUnitId">
            <summary>
            <para>
            <para>The unique identifier (ID) of the OU that you want to rename. You can get the ID from
            the <a>ListOrganizationalUnitsForParent</a> operation.</para><para>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for an organizational
            unit ID string requires "ou-" followed by from 4 to 32 lowercase letters or digits
            (the ID of the root that contains the OU). This string is followed by a second "-"
            dash and from 8 to 32 additional lowercase letters or digits.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.UpdateORGOrganizationalUnitCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'OrganizationalUnit'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Organizations.Model.UpdateOrganizationalUnitResponse).
            Specifying the name of a property of type Amazon.Organizations.Model.UpdateOrganizationalUnitResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.UpdateORGOrganizationalUnitCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the Name parameter.
            The -PassThru parameter is deprecated, use -Select '^Name' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.UpdateORGOrganizationalUnitCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ORG.UpdateORGPolicyCmdlet">
            <summary>
            Updates an existing policy with a new name, description, or content. If you don't
            supply any parameter, that value remains unchanged. You can't change a policy's type.
            
             
            <para>
            This operation can be called only from the organization's master account.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.UpdateORGPolicyCmdlet.Content">
            <summary>
            <para>
            <para>If provided, the new content for the policy. The text must be correctly formatted
            JSON that complies with the syntax for the policy's type. For more information, see
            <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_reference_scp-syntax.html">Service
            Control Policy Syntax</a> in the <i>AWS Organizations User Guide.</i></para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.UpdateORGPolicyCmdlet.Description">
            <summary>
            <para>
            <para>If provided, the new description for the policy.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.UpdateORGPolicyCmdlet.Name">
            <summary>
            <para>
            <para>If provided, the new name for the policy.</para><para>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> that is used to validate
            this parameter is a string of any of the characters in the ASCII character range.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.UpdateORGPolicyCmdlet.PolicyId">
            <summary>
            <para>
            <para>The unique identifier (ID) of the policy that you want to update.</para><para>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for a policy ID string
            requires "p-" followed by from 8 to 128 lowercase or uppercase letters, digits, or
            the underscore character (_).</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.UpdateORGPolicyCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'Policy'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Organizations.Model.UpdatePolicyResponse).
            Specifying the name of a property of type Amazon.Organizations.Model.UpdatePolicyResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.UpdateORGPolicyCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the Name parameter.
            The -PassThru parameter is deprecated, use -Select '^Name' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ORG.UpdateORGPolicyCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
    </members>
</doc>
