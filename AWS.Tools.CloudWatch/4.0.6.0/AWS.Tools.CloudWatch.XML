<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AWS.Tools.CloudWatch</name>
    </assembly>
    <members>
        <member name="T:Amazon.PowerShell.Cmdlets.CW.AddCWResourceTagCmdlet">
            <summary>
            Assigns one or more tags (key-value pairs) to the specified CloudWatch resource. Currently,
            the only CloudWatch resources that can be tagged are alarms and Contributor Insights
            rules.
            
             
            <para>
            Tags can help you organize and categorize your resources. You can also use them to
            scope user permissions, by granting a user permission to access or change only resources
            with certain tag values.
            </para><para>
            Tags don't have any semantic meaning to AWS and are interpreted strictly as strings
            of characters.
            </para><para>
            You can use the <code>TagResource</code> action with an alarm that already has tags.
            If you specify a new tag key for the alarm, this tag is appended to the list of tags
            associated with the alarm. If you specify a tag key that is already associated with
            the alarm, the new tag value that you specify replaces the previous value for that
            tag.
            </para><para>
            You can associate as many as 50 tags with a CloudWatch resource.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.AddCWResourceTagCmdlet.ResourceARN">
            <summary>
            <para>
            <para>The ARN of the CloudWatch resource that you're adding tags to.</para><para>The ARN format of an alarm is <code>arn:aws:cloudwatch:<i>Region</i>:<i>account-id</i>:alarm:<i>alarm-name</i></code></para><para>The ARN format of a Contributor Insights rule is <code>arn:aws:cloudwatch:<i>Region</i>:<i>account-id</i>:insight-rule:<i>insight-rule-name</i></code></para><para>For more information on ARN format, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazoncloudwatch.html#amazoncloudwatch-resources-for-iam-policies">
            Resource Types Defined by Amazon CloudWatch</a> in the <i>Amazon Web Services General
            Reference</i>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.AddCWResourceTagCmdlet.Tag">
            <summary>
            <para>
            <para>The list of key-value pairs to associate with the alarm.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.AddCWResourceTagCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The cmdlet doesn't have a return value by default.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.CloudWatch.Model.TagResourceResponse).
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.AddCWResourceTagCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the ResourceARN parameter.
            The -PassThru parameter is deprecated, use -Select '^ResourceARN' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.AddCWResourceTagCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CW.DisableCWAlarmActionCmdlet">
            <summary>
            Disables the actions for the specified alarms. When an alarm's actions are disabled,
            the alarm actions do not execute when the alarm state changes.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.DisableCWAlarmActionCmdlet.AlarmName">
            <summary>
            <para>
            <para>The names of the alarms.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.DisableCWAlarmActionCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The cmdlet doesn't have a return value by default.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.CloudWatch.Model.DisableAlarmActionsResponse).
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.DisableCWAlarmActionCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the AlarmName parameter.
            The -PassThru parameter is deprecated, use -Select '^AlarmName' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.DisableCWAlarmActionCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CW.DisableCWInsightRuleCmdlet">
            <summary>
            Disables the specified Contributor Insights rules. When rules are disabled, they do
            not analyze log groups and do not incur costs.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.DisableCWInsightRuleCmdlet.RuleName">
            <summary>
            <para>
            <para>An array of the rule names to disable. If you need to find out the names of your rules,
            use <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_DescribeInsightRules.html">DescribeInsightRules</a>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.DisableCWInsightRuleCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'Failures'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.CloudWatch.Model.DisableInsightRulesResponse).
            Specifying the name of a property of type Amazon.CloudWatch.Model.DisableInsightRulesResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.DisableCWInsightRuleCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the RuleName parameter.
            The -PassThru parameter is deprecated, use -Select '^RuleName' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.DisableCWInsightRuleCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CW.EnableCWAlarmActionCmdlet">
            <summary>
            Enables the actions for the specified alarms.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.EnableCWAlarmActionCmdlet.AlarmName">
            <summary>
            <para>
            <para>The names of the alarms.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.EnableCWAlarmActionCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The cmdlet doesn't have a return value by default.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.CloudWatch.Model.EnableAlarmActionsResponse).
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.EnableCWAlarmActionCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the AlarmName parameter.
            The -PassThru parameter is deprecated, use -Select '^AlarmName' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.EnableCWAlarmActionCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CW.EnableCWInsightRuleCmdlet">
            <summary>
            Enables the specified Contributor Insights rules. When rules are enabled, they immediately
            begin analyzing log data.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.EnableCWInsightRuleCmdlet.RuleName">
            <summary>
            <para>
            <para>An array of the rule names to enable. If you need to find out the names of your rules,
            use <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_DescribeInsightRules.html">DescribeInsightRules</a>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.EnableCWInsightRuleCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'Failures'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.CloudWatch.Model.EnableInsightRulesResponse).
            Specifying the name of a property of type Amazon.CloudWatch.Model.EnableInsightRulesResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.EnableCWInsightRuleCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the RuleName parameter.
            The -PassThru parameter is deprecated, use -Select '^RuleName' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.EnableCWInsightRuleCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CW.GetCWAlarmCmdlet">
            <summary>
            Retrieves the specified alarms. You can filter the results by specifying a a prefix
            for the alarm name, the alarm state, or a prefix for any action.<br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWAlarmCmdlet.ActionPrefix">
            <summary>
            <para>
            <para>Use this parameter to filter the results of the operation to only those alarms that
            use a certain alarm action. For example, you could specify the ARN of an SNS topic
            to find all alarms that send notifications to that topic.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWAlarmCmdlet.AlarmNamePrefix">
            <summary>
            <para>
            <para>An alarm name prefix. If you specify this parameter, you receive information about
            all alarms that have names that start with this prefix.</para><para>If this parameter is specified, you cannot specify <code>AlarmNames</code>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWAlarmCmdlet.AlarmName">
            <summary>
            <para>
            <para>The names of the alarms to retrieve information about.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWAlarmCmdlet.AlarmType">
            <summary>
            <para>
            <para>Use this parameter to specify whether you want the operation to return metric alarms
            or composite alarms. If you omit this parameter, only metric alarms are returned.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWAlarmCmdlet.ChildrenOfAlarmName">
            <summary>
            <para>
            <para>If you use this parameter and specify the name of a composite alarm, the operation
            returns information about the "children" alarms of the alarm you specify. These are
            the metric alarms and composite alarms referenced in the <code>AlarmRule</code> field
            of the composite alarm that you specify in <code>ChildrenOfAlarmName</code>. Information
            about the composite alarm that you name in <code>ChildrenOfAlarmName</code> is not
            returned.</para><para>If you specify <code>ChildrenOfAlarmName</code>, you cannot specify any other parameters
            in the request except for <code>MaxRecords</code> and <code>NextToken</code>. If you
            do so, you will receive a validation error.</para><note><para>Only the <code>Alarm Name</code>, <code>ARN</code>, <code>StateValue</code> (OK/ALARM/INSUFFICIENT_DATA),
            and <code>StateUpdatedTimestamp</code> information are returned by this operation
            when you use this parameter. To get complete information about these alarms, perform
            another <code>DescribeAlarms</code> operation and specify the parent alarm names in
            the <code>AlarmNames</code> parameter.</para></note>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWAlarmCmdlet.ParentsOfAlarmName">
            <summary>
            <para>
            <para>If you use this parameter and specify the name of a metric or composite alarm, the
            operation returns information about the "parent" alarms of the alarm you specify.
            These are the composite alarms that have <code>AlarmRule</code> parameters that reference
            the alarm named in <code>ParentsOfAlarmName</code>. Information about the alarm that
            you specify in <code>ParentsOfAlarmName</code> is not returned.</para><para>If you specify <code>ParentsOfAlarmName</code>, you cannot specify any other parameters
            in the request except for <code>MaxRecords</code> and <code>NextToken</code>. If you
            do so, you will receive a validation error.</para><note><para>Only the Alarm Name and ARN are returned by this operation when you use this parameter.
            To get complete information about these alarms, perform another <code>DescribeAlarms</code>
            operation and specify the parent alarm names in the <code>AlarmNames</code> parameter.</para></note>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWAlarmCmdlet.StateValue">
            <summary>
            <para>
            <para>Specify this parameter to receive information only about alarms that are currently
            in the state that you specify.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWAlarmCmdlet.MaxRecord">
            <summary>
            <para>
            <para>The maximum number of alarm descriptions to retrieve.</para>
            </para>
            <para>
            <br/><b>Note:</b> In AWSPowerShell and AWSPowerShell.NetCore this parameter is used to limit the total number of items returned by the cmdlet.
            <br/>In AWS.Tools this parameter is simply passed to the service to specify how many items should be returned by each service call.
            <br/>Pipe the output of this cmdlet into Select-Object -First to terminate retrieving data pages early and control the number of items returned.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWAlarmCmdlet.NextToken">
            <summary>
            <para>
            <para>The token returned by a previous call to indicate that there is more data available.</para>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWAlarmCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'MetricAlarms'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.CloudWatch.Model.DescribeAlarmsResponse).
            Specifying the name of a property of type Amazon.CloudWatch.Model.DescribeAlarmsResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWAlarmCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the AlarmName parameter.
            The -PassThru parameter is deprecated, use -Select '^AlarmName' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWAlarmCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CW.GetCWAlarmForMetricCmdlet">
            <summary>
            Retrieves the alarms for the specified metric. To filter the results, specify a statistic,
            period, or unit.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWAlarmForMetricCmdlet.Dimension">
            <summary>
            <para>
            <para>The dimensions associated with the metric. If the metric has any associated dimensions,
            you must specify them in order for the call to succeed.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWAlarmForMetricCmdlet.ExtendedStatistic">
            <summary>
            <para>
            <para>The percentile statistic for the metric. Specify a value between p0.0 and p100.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWAlarmForMetricCmdlet.MetricName">
            <summary>
            <para>
            <para>The name of the metric.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWAlarmForMetricCmdlet.Namespace">
            <summary>
            <para>
            <para>The namespace of the metric.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWAlarmForMetricCmdlet.Period">
            <summary>
            <para>
            <para>The period, in seconds, over which the statistic is applied.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWAlarmForMetricCmdlet.Statistic">
            <summary>
            <para>
            <para>The statistic for the metric, other than percentiles. For percentile statistics, use
            <code>ExtendedStatistics</code>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWAlarmForMetricCmdlet.Unit">
            <summary>
            <para>
            <para>The unit for the metric.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWAlarmForMetricCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'MetricAlarms'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.CloudWatch.Model.DescribeAlarmsForMetricResponse).
            Specifying the name of a property of type Amazon.CloudWatch.Model.DescribeAlarmsForMetricResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWAlarmForMetricCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the MetricName parameter.
            The -PassThru parameter is deprecated, use -Select '^MetricName' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CW.GetCWAlarmHistoryCmdlet">
            <summary>
            Retrieves the history for the specified alarm. You can filter the results by date
            range or item type. If an alarm name is not specified, the histories for either all
            metric alarms or all composite alarms are returned.
            
             
            <para>
            CloudWatch retains the history of an alarm even if you delete the alarm.
            </para><br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWAlarmHistoryCmdlet.AlarmName">
            <summary>
            <para>
            <para>The name of the alarm.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWAlarmHistoryCmdlet.AlarmType">
            <summary>
            <para>
            <para>Use this parameter to specify whether you want the operation to return metric alarms
            or composite alarms. If you omit this parameter, only metric alarms are returned.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWAlarmHistoryCmdlet.UtcEndDate">
            <summary>
            <para>
            <para>The ending date to retrieve alarm history.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWAlarmHistoryCmdlet.HistoryItemType">
            <summary>
            <para>
            <para>The type of alarm histories to retrieve.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWAlarmHistoryCmdlet.ScanBy">
            <summary>
            <para>
            <para>Specified whether to return the newest or oldest alarm history first. Specify <code>TimestampDescending</code>
            to have the newest event history returned first, and specify <code>TimestampAscending</code>
            to have the oldest history returned first.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWAlarmHistoryCmdlet.UtcStartDate">
            <summary>
            <para>
            <para>The starting date to retrieve alarm history.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWAlarmHistoryCmdlet.EndDate">
            <summary>
            <para>
            <para>This property is deprecated. Setting this property results in non-UTC DateTimes not
            being marshalled correctly. Use EndDateUtc instead. Setting either EndDate or EndDateUtc
            results in both EndDate and EndDateUtc being assigned, the latest assignment to either
            one of the two property is reflected in the value of both. EndDate is provided for
            backwards compatibility only and assigning a non-Utc DateTime to it results in the
            wrong timestamp being passed to the service.</para><para>The ending date to retrieve alarm history.</para>
            </para>
            <para>This parameter is deprecated.</para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWAlarmHistoryCmdlet.MaxRecord">
            <summary>
            <para>
            <para>The maximum number of alarm history records to retrieve.</para>
            </para>
            <para>
            <br/><b>Note:</b> In AWSPowerShell and AWSPowerShell.NetCore this parameter is used to limit the total number of items returned by the cmdlet.
            <br/>In AWS.Tools this parameter is simply passed to the service to specify how many items should be returned by each service call.
            <br/>Pipe the output of this cmdlet into Select-Object -First to terminate retrieving data pages early and control the number of items returned.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWAlarmHistoryCmdlet.NextToken">
            <summary>
            <para>
            <para>The token returned by a previous call to indicate that there is more data available.</para>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWAlarmHistoryCmdlet.StartDate">
            <summary>
            <para>
            <para>This property is deprecated. Setting this property results in non-UTC DateTimes not
            being marshalled correctly. Use StartDateUtc instead. Setting either StartDate or
            StartDateUtc results in both StartDate and StartDateUtc being assigned, the latest
            assignment to either one of the two property is reflected in the value of both. StartDate
            is provided for backwards compatibility only and assigning a non-Utc DateTime to it
            results in the wrong timestamp being passed to the service.</para><para>The starting date to retrieve alarm history.</para>
            </para>
            <para>This parameter is deprecated.</para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWAlarmHistoryCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'AlarmHistoryItems'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.CloudWatch.Model.DescribeAlarmHistoryResponse).
            Specifying the name of a property of type Amazon.CloudWatch.Model.DescribeAlarmHistoryResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWAlarmHistoryCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the AlarmName parameter.
            The -PassThru parameter is deprecated, use -Select '^AlarmName' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWAlarmHistoryCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CW.GetCWAnomalyDetectorCmdlet">
            <summary>
            Lists the anomaly detection models that you have created in your account. You can
            list all models in your account or filter the results to only the models that are
            related to a certain namespace, metric name, or metric dimension.<br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWAnomalyDetectorCmdlet.Dimension">
            <summary>
            <para>
            <para>Limits the results to only the anomaly detection models that are associated with the
            specified metric dimensions. If there are multiple metrics that have these dimensions
            and have anomaly detection models associated, they're all returned.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWAnomalyDetectorCmdlet.MetricName">
            <summary>
            <para>
            <para>Limits the results to only the anomaly detection models that are associated with the
            specified metric name. If there are multiple metrics with this name in different namespaces
            that have anomaly detection models, they're all returned.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWAnomalyDetectorCmdlet.Namespace">
            <summary>
            <para>
            <para>Limits the results to only the anomaly detection models that are associated with the
            specified namespace.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWAnomalyDetectorCmdlet.MaxResult">
            <summary>
            <para>
            <para>The maximum number of results to return in one operation. The maximum value that you
            can specify is 100.</para><para>To retrieve the remaining results, make another call with the returned <code>NextToken</code>
            value. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWAnomalyDetectorCmdlet.NextToken">
            <summary>
            <para>
            <para>Use the token returned by the previous operation to request the next page of results.</para>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWAnomalyDetectorCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'AnomalyDetectors'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.CloudWatch.Model.DescribeAnomalyDetectorsResponse).
            Specifying the name of a property of type Amazon.CloudWatch.Model.DescribeAnomalyDetectorsResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWAnomalyDetectorCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the MetricName parameter.
            The -PassThru parameter is deprecated, use -Select '^MetricName' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWAnomalyDetectorCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CW.GetCWDashboardCmdlet">
            <summary>
            Displays the details of the dashboard that you specify.
            
             
            <para>
            To copy an existing dashboard, use <code>GetDashboard</code>, and then use the data
            returned within <code>DashboardBody</code> as the template for the new dashboard when
            you call <code>PutDashboard</code> to create the copy.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWDashboardCmdlet.DashboardName">
            <summary>
            <para>
            <para>The name of the dashboard to be described.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWDashboardCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.CloudWatch.Model.GetDashboardResponse).
            Specifying the name of a property of type Amazon.CloudWatch.Model.GetDashboardResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWDashboardCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the DashboardName parameter.
            The -PassThru parameter is deprecated, use -Select '^DashboardName' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CW.GetCWDashboardListCmdlet">
            <summary>
            Returns a list of the dashboards for your account. If you include <code>DashboardNamePrefix</code>,
            only those dashboards with names starting with the prefix are listed. Otherwise, all
            dashboards in your account are listed. 
            
             
            <para><code>ListDashboards</code> returns up to 1000 results on one page. If there are
            more than 1000 dashboards, you can call <code>ListDashboards</code> again and include
            the value you received for <code>NextToken</code> in the first call, to receive the
            next 1000 results.
            </para><br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWDashboardListCmdlet.DashboardNamePrefix">
            <summary>
            <para>
            <para>If you specify this parameter, only the dashboards with names starting with the specified
            string are listed. The maximum length is 255, and valid characters are A-Z, a-z, 0-9,
            ".", "-", and "_". </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWDashboardListCmdlet.NextToken">
            <summary>
            <para>
            <para>The token returned by a previous call to indicate that there is more data available.</para>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWDashboardListCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'DashboardEntries'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.CloudWatch.Model.ListDashboardsResponse).
            Specifying the name of a property of type Amazon.CloudWatch.Model.ListDashboardsResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWDashboardListCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the DashboardNamePrefix parameter.
            The -PassThru parameter is deprecated, use -Select '^DashboardNamePrefix' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWDashboardListCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CW.GetCWInsightRuleCmdlet">
            <summary>
            Returns a list of all the Contributor Insights rules in your account. All rules in
            your account are returned with a single operation.
            
             
            <para>
            For more information about Contributor Insights, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/ContributorInsights.html">Using
            Contributor Insights to Analyze High-Cardinality Data</a>.
            </para><br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWInsightRuleCmdlet.MaxResult">
            <summary>
            <para>
            <para>This parameter is not currently used. Reserved for future use. If it is used in the
            future, the maximum value may be different.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWInsightRuleCmdlet.NextToken">
            <summary>
            <para>
            <para>Reserved for future use.</para>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWInsightRuleCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'InsightRules'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.CloudWatch.Model.DescribeInsightRulesResponse).
            Specifying the name of a property of type Amazon.CloudWatch.Model.DescribeInsightRulesResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWInsightRuleCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the MaxResult parameter.
            The -PassThru parameter is deprecated, use -Select '^MaxResult' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWInsightRuleCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CW.GetCWInsightRuleReportCmdlet">
            <summary>
            This operation returns the time series data collected by a Contributor Insights rule.
            The data includes the identity and number of contributors to the log group.
            
             
            <para>
            You can also optionally return one or more statistics about each data point in the
            time series. These statistics can include the following:
            </para><ul><li><para><code>UniqueContributors</code> -- the number of unique contributors for each data
            point.
            </para></li><li><para><code>MaxContributorValue</code> -- the value of the top contributor for each data
            point. The identity of the contributor may change for each data point in the graph.
            </para><para>
            If this rule aggregates by COUNT, the top contributor for each data point is the contributor
            with the most occurrences in that period. If the rule aggregates by SUM, the top contributor
            is the contributor with the highest sum in the log field specified by the rule's <code>Value</code>,
            during that period.
            </para></li><li><para><code>SampleCount</code> -- the number of data points matched by the rule.
            </para></li><li><para><code>Sum</code> -- the sum of the values from all contributors during the time period
            represented by that data point.
            </para></li><li><para><code>Minimum</code> -- the minimum value from a single observation during the time
            period represented by that data point.
            </para></li><li><para><code>Maximum</code> -- the maximum value from a single observation during the time
            period represented by that data point.
            </para></li><li><para><code>Average</code> -- the average value from all contributors during the time period
            represented by that data point.
            </para></li></ul>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWInsightRuleReportCmdlet.EndTime">
            <summary>
            <para>
            <para>The end time of the data to use in the report. When used in a raw HTTP Query API,
            it is formatted as <code>yyyy-MM-dd'T'HH:mm:ss</code>. For example, <code>2019-07-01T23:59:59</code>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWInsightRuleReportCmdlet.MaxContributorCount">
            <summary>
            <para>
            <para>The maximum number of contributors to include in the report. The range is 1 to 100.
            If you omit this, the default of 10 is used.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWInsightRuleReportCmdlet.Metric">
            <summary>
            <para>
            <para>Specifies which metrics to use for aggregation of contributor values for the report.
            You can specify one or more of the following metrics:</para><ul><li><para><code>UniqueContributors</code> -- the number of unique contributors for each data
            point.</para></li><li><para><code>MaxContributorValue</code> -- the value of the top contributor for each data
            point. The identity of the contributor may change for each data point in the graph.</para><para>If this rule aggregates by COUNT, the top contributor for each data point is the contributor
            with the most occurrences in that period. If the rule aggregates by SUM, the top contributor
            is the contributor with the highest sum in the log field specified by the rule's <code>Value</code>,
            during that period.</para></li><li><para><code>SampleCount</code> -- the number of data points matched by the rule.</para></li><li><para><code>Sum</code> -- the sum of the values from all contributors during the time period
            represented by that data point.</para></li><li><para><code>Minimum</code> -- the minimum value from a single observation during the time
            period represented by that data point.</para></li><li><para><code>Maximum</code> -- the maximum value from a single observation during the time
            period represented by that data point.</para></li><li><para><code>Average</code> -- the average value from all contributors during the time period
            represented by that data point.</para></li></ul>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWInsightRuleReportCmdlet.OrderBy">
            <summary>
            <para>
            <para>Determines what statistic to use to rank the contributors. Valid values are SUM and
            MAXIMUM.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWInsightRuleReportCmdlet.Period">
            <summary>
            <para>
            <para>The period, in seconds, to use for the statistics in the <code>InsightRuleMetricDatapoint</code>
            results.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWInsightRuleReportCmdlet.RuleName">
            <summary>
            <para>
            <para>The name of the rule that you want to see data from.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWInsightRuleReportCmdlet.StartTime">
            <summary>
            <para>
            <para>The start time of the data to use in the report. When used in a raw HTTP Query API,
            it is formatted as <code>yyyy-MM-dd'T'HH:mm:ss</code>. For example, <code>2019-07-01T23:59:59</code>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWInsightRuleReportCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.CloudWatch.Model.GetInsightRuleReportResponse).
            Specifying the name of a property of type Amazon.CloudWatch.Model.GetInsightRuleReportResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWInsightRuleReportCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the RuleName parameter.
            The -PassThru parameter is deprecated, use -Select '^RuleName' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CW.GetCWMetricDataCmdlet">
            <summary>
            You can use the <code>GetMetricData</code> API to retrieve as many as 500 different
            metrics in a single request, with a total of as many as 100,800 data points. You can
            also optionally perform math expressions on the values of the returned statistics,
            to create new time series that represent new insights into your data. For example,
            using Lambda metrics, you could divide the Errors metric by the Invocations metric
            to get an error rate time series. For more information about metric math expressions,
            see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-metric-math.html#metric-math-syntax">Metric
            Math Syntax and Functions</a> in the <i>Amazon CloudWatch User Guide</i>.
            
             
            <para>
            Calls to the <code>GetMetricData</code> API have a different pricing structure than
            calls to <code>GetMetricStatistics</code>. For more information about pricing, see
            <a href="https://aws.amazon.com/cloudwatch/pricing/">Amazon CloudWatch Pricing</a>.
            </para><para>
            Amazon CloudWatch retains metric data as follows:
            </para><ul><li><para>
            Data points with a period of less than 60 seconds are available for 3 hours. These
            data points are high-resolution metrics and are available only for custom metrics
            that have been defined with a <code>StorageResolution</code> of 1.
            </para></li><li><para>
            Data points with a period of 60 seconds (1-minute) are available for 15 days.
            </para></li><li><para>
            Data points with a period of 300 seconds (5-minute) are available for 63 days.
            </para></li><li><para>
            Data points with a period of 3600 seconds (1 hour) are available for 455 days (15
            months).
            </para></li></ul><para>
            Data points that are initially published with a shorter period are aggregated together
            for long-term storage. For example, if you collect data using a period of 1 minute,
            the data remains available for 15 days with 1-minute resolution. After 15 days, this
            data is still available, but is aggregated and retrievable only with a resolution
            of 5 minutes. After 63 days, the data is further aggregated and is available with
            a resolution of 1 hour.
            </para><para>
            If you omit <code>Unit</code> in your request, all data that was collected with any
            unit is returned, along with the corresponding units that were specified when the
            data was reported to CloudWatch. If you specify a unit, the operation returns only
            data data that was collected with that unit specified. If you specify a unit that
            does not match the data collected, the results of the operation are null. CloudWatch
            does not perform unit conversions.
            </para><br/><br/>In the AWS.Tools.CloudWatch module, this cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWMetricDataCmdlet.UtcEndTime">
            <summary>
            <para>
            <para>The time stamp indicating the latest data to be returned.</para><para>The value specified is exclusive; results include data points up to the specified
            time stamp.</para><para>For better performance, specify <code>StartTime</code> and <code>EndTime</code> values
            that align with the value of the metric's <code>Period</code> and sync up with the
            beginning and end of an hour. For example, if the <code>Period</code> of a metric
            is 5 minutes, specifying 12:05 or 12:30 as <code>EndTime</code> can get a faster response
            from CloudWatch than setting 12:07 or 12:29 as the <code>EndTime</code>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWMetricDataCmdlet.MaxDatapoint">
            <summary>
            <para>
            <para>The maximum number of data points the request should return before paginating. If
            you omit this, the default of 100,800 is used.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWMetricDataCmdlet.MetricDataQuery">
            <summary>
            <para>
            <para>The metric queries to be returned. A single <code>GetMetricData</code> call can include
            as many as 500 <code>MetricDataQuery</code> structures. Each of these structures can
            specify either a metric to retrieve, or a math expression to perform on retrieved
            data. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWMetricDataCmdlet.ScanBy">
            <summary>
            <para>
            <para>The order in which data points should be returned. <code>TimestampDescending</code>
            returns the newest data first and paginates when the <code>MaxDatapoints</code> limit
            is reached. <code>TimestampAscending</code> returns the oldest data first and paginates
            when the <code>MaxDatapoints</code> limit is reached.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWMetricDataCmdlet.UtcStartTime">
            <summary>
            <para>
            <para>The time stamp indicating the earliest data to be returned.</para><para>The value specified is inclusive; results include data points with the specified time
            stamp. </para><para>CloudWatch rounds the specified time stamp as follows:</para><ul><li><para>Start time less than 15 days ago - Round down to the nearest whole minute. For example,
            12:32:34 is rounded down to 12:32:00.</para></li><li><para>Start time between 15 and 63 days ago - Round down to the nearest 5-minute clock interval.
            For example, 12:32:34 is rounded down to 12:30:00.</para></li><li><para>Start time greater than 63 days ago - Round down to the nearest 1-hour clock interval.
            For example, 12:32:34 is rounded down to 12:00:00.</para></li></ul><para>If you set <code>Period</code> to 5, 10, or 30, the start time of your request is
            rounded down to the nearest time that corresponds to even 5-, 10-, or 30-second divisions
            of a minute. For example, if you make a query at (HH:mm:ss) 01:05:23 for the previous
            10-second period, the start time of your request is rounded down and you receive data
            from 01:05:10 to 01:05:20. If you make a query at 15:07:17 for the previous 5 minutes
            of data, using a period of 5 seconds, you receive data timestamped between 15:02:15
            and 15:07:15. </para><para>For better performance, specify <code>StartTime</code> and <code>EndTime</code> values
            that align with the value of the metric's <code>Period</code> and sync up with the
            beginning and end of an hour. For example, if the <code>Period</code> of a metric
            is 5 minutes, specifying 12:05 or 12:30 as <code>StartTime</code> can get a faster
            response from CloudWatch than setting 12:07 or 12:29 as the <code>StartTime</code>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWMetricDataCmdlet.EndTime">
            <summary>
            <para>
            <para>This property is deprecated. Setting this property results in non-UTC DateTimes not
            being marshalled correctly. Use EndTimeUtc instead. Setting either EndTime or EndTimeUtc
            results in both EndTime and EndTimeUtc being assigned, the latest assignment to either
            one of the two property is reflected in the value of both. EndTime is provided for
            backwards compatibility only and assigning a non-Utc DateTime to it results in the
            wrong timestamp being passed to the service.</para><para>The time stamp indicating the latest data to be returned.</para><para>The value specified is exclusive; results include data points up to the specified
            time stamp.</para><para>For better performance, specify <code>StartTime</code> and <code>EndTime</code> values
            that align with the value of the metric's <code>Period</code> and sync up with the
            beginning and end of an hour. For example, if the <code>Period</code> of a metric
            is 5 minutes, specifying 12:05 or 12:30 as <code>EndTime</code> can get a faster response
            from CloudWatch than setting 12:07 or 12:29 as the <code>EndTime</code>.</para>
            </para>
            <para>This parameter is deprecated.</para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWMetricDataCmdlet.NextToken">
            <summary>
            <para>
            <para>Include this value, if it was returned by the previous call, to get the next set of
            data points.</para>
            </para>
            <para>
            <br/><b>Note:</b> In the AWS.Tools.CloudWatch module, this parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWMetricDataCmdlet.StartTime">
            <summary>
            <para>
            <para>This property is deprecated. Setting this property results in non-UTC DateTimes not
            being marshalled correctly. Use StartTimeUtc instead. Setting either StartTime or
            StartTimeUtc results in both StartTime and StartTimeUtc being assigned, the latest
            assignment to either one of the two property is reflected in the value of both. StartTime
            is provided for backwards compatibility only and assigning a non-Utc DateTime to it
            results in the wrong timestamp being passed to the service.</para><para>The time stamp indicating the earliest data to be returned.</para><para>The value specified is inclusive; results include data points with the specified time
            stamp. </para><para>CloudWatch rounds the specified time stamp as follows:</para><ul><li><para>Start time less than 15 days ago - Round down to the nearest whole minute. For example,
            12:32:34 is rounded down to 12:32:00.</para></li><li><para>Start time between 15 and 63 days ago - Round down to the nearest 5-minute clock interval.
            For example, 12:32:34 is rounded down to 12:30:00.</para></li><li><para>Start time greater than 63 days ago - Round down to the nearest 1-hour clock interval.
            For example, 12:32:34 is rounded down to 12:00:00.</para></li></ul><para>If you set <code>Period</code> to 5, 10, or 30, the start time of your request is
            rounded down to the nearest time that corresponds to even 5-, 10-, or 30-second divisions
            of a minute. For example, if you make a query at (HH:mm:ss) 01:05:23 for the previous
            10-second period, the start time of your request is rounded down and you receive data
            from 01:05:10 to 01:05:20. If you make a query at 15:07:17 for the previous 5 minutes
            of data, using a period of 5 seconds, you receive data timestamped between 15:02:15
            and 15:07:15. </para><para>For better performance, specify <code>StartTime</code> and <code>EndTime</code> values
            that align with the value of the metric's <code>Period</code> and sync up with the
            beginning and end of an hour. For example, if the <code>Period</code> of a metric
            is 5 minutes, specifying 12:05 or 12:30 as <code>StartTime</code> can get a faster
            response from CloudWatch than setting 12:07 or 12:29 as the <code>StartTime</code>.</para>
            </para>
            <para>This parameter is deprecated.</para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWMetricDataCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.CloudWatch.Model.GetMetricDataResponse).
            Specifying the name of a property of type Amazon.CloudWatch.Model.GetMetricDataResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWMetricDataCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CW.GetCWMetricListCmdlet">
            <summary>
            List the specified metrics. You can use the returned metrics with <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricData.html">GetMetricData</a>
            or <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricStatistics.html">GetMetricStatistics</a>
            to obtain statistical data.
            
             
            <para>
            Up to 500 results are returned for any one call. To retrieve additional results, use
            the returned token with subsequent calls.
            </para><para>
            After you create a metric, allow up to fifteen minutes before the metric appears.
            Statistics about the metric, however, are available sooner using <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricData.html">GetMetricData</a>
            or <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricStatistics.html">GetMetricStatistics</a>.
            </para><br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWMetricListCmdlet.Dimension">
            <summary>
            <para>
            <para>The dimensions to filter against.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWMetricListCmdlet.MetricName">
            <summary>
            <para>
            <para>The name of the metric to filter against.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWMetricListCmdlet.Namespace">
            <summary>
            <para>
            <para>The namespace to filter against.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWMetricListCmdlet.NextToken">
            <summary>
            <para>
            <para>The token returned by a previous call to indicate that there is more data available.</para>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWMetricListCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'Metrics'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.CloudWatch.Model.ListMetricsResponse).
            Specifying the name of a property of type Amazon.CloudWatch.Model.ListMetricsResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWMetricListCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the Namespace parameter.
            The -PassThru parameter is deprecated, use -Select '^Namespace' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWMetricListCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CW.GetCWMetricStatisticCmdlet">
            <summary>
            Gets statistics for the specified metric.
            
             
            <para>
            The maximum number of data points returned from a single call is 1,440. If you request
            more than 1,440 data points, CloudWatch returns an error. To reduce the number of
            data points, you can narrow the specified time range and make multiple requests across
            adjacent time ranges, or you can increase the specified period. Data points are not
            returned in chronological order.
            </para><para>
            CloudWatch aggregates data points based on the length of the period that you specify.
            For example, if you request statistics with a one-hour period, CloudWatch aggregates
            all data points with time stamps that fall within each one-hour period. Therefore,
            the number of values aggregated by CloudWatch is larger than the number of data points
            returned.
            </para><para>
            CloudWatch needs raw data points to calculate percentile statistics. If you publish
            data using a statistic set instead, you can only retrieve percentile statistics for
            this data if one of the following conditions is true:
            </para><ul><li><para>
            The SampleCount value of the statistic set is 1.
            </para></li><li><para>
            The Min and the Max values of the statistic set are equal.
            </para></li></ul><para>
            Percentile statistics are not available for metrics when any of the metric values
            are negative numbers.
            </para><para>
            Amazon CloudWatch retains metric data as follows:
            </para><ul><li><para>
            Data points with a period of less than 60 seconds are available for 3 hours. These
            data points are high-resolution metrics and are available only for custom metrics
            that have been defined with a <code>StorageResolution</code> of 1.
            </para></li><li><para>
            Data points with a period of 60 seconds (1-minute) are available for 15 days.
            </para></li><li><para>
            Data points with a period of 300 seconds (5-minute) are available for 63 days.
            </para></li><li><para>
            Data points with a period of 3600 seconds (1 hour) are available for 455 days (15
            months).
            </para></li></ul><para>
            Data points that are initially published with a shorter period are aggregated together
            for long-term storage. For example, if you collect data using a period of 1 minute,
            the data remains available for 15 days with 1-minute resolution. After 15 days, this
            data is still available, but is aggregated and retrievable only with a resolution
            of 5 minutes. After 63 days, the data is further aggregated and is available with
            a resolution of 1 hour.
            </para><para>
            CloudWatch started retaining 5-minute and 1-hour metric data as of July 9, 2016.
            </para><para>
            For information about metrics and dimensions supported by AWS services, see the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CW_Support_For_AWS.html">Amazon
            CloudWatch Metrics and Dimensions Reference</a> in the <i>Amazon CloudWatch User Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWMetricStatisticCmdlet.Dimension">
            <summary>
            <para>
            <para>The dimensions. If the metric contains multiple dimensions, you must include a value
            for each dimension. CloudWatch treats each unique combination of dimensions as a separate
            metric. If a specific combination of dimensions was not published, you can't retrieve
            statistics for it. You must specify the same dimensions that were used when the metrics
            were created. For an example, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html#dimension-combinations">Dimension
            Combinations</a> in the <i>Amazon CloudWatch User Guide</i>. For more information
            about specifying dimensions, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/publishingMetrics.html">Publishing
            Metrics</a> in the <i>Amazon CloudWatch User Guide</i>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWMetricStatisticCmdlet.UtcEndTime">
            <summary>
            <para>
            <para>The time stamp that determines the last data point to return.</para><para>The value specified is exclusive; results include data points up to the specified
            time stamp. In a raw HTTP query, the time stamp must be in ISO 8601 UTC format (for
            example, 2016-10-10T23:00:00Z).</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWMetricStatisticCmdlet.ExtendedStatistic">
            <summary>
            <para>
            <para>The percentile statistics. Specify values between p0.0 and p100. When calling <code>GetMetricStatistics</code>,
            you must specify either <code>Statistics</code> or <code>ExtendedStatistics</code>,
            but not both. Percentile statistics are not available for metrics when any of the
            metric values are negative numbers.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWMetricStatisticCmdlet.MetricName">
            <summary>
            <para>
            <para>The name of the metric, with or without spaces.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWMetricStatisticCmdlet.Namespace">
            <summary>
            <para>
            <para>The namespace of the metric, with or without spaces.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWMetricStatisticCmdlet.Period">
            <summary>
            <para>
            <para>The granularity, in seconds, of the returned data points. For metrics with regular
            resolution, a period can be as short as one minute (60 seconds) and must be a multiple
            of 60. For high-resolution metrics that are collected at intervals of less than one
            minute, the period can be 1, 5, 10, 30, 60, or any multiple of 60. High-resolution
            metrics are those metrics stored by a <code>PutMetricData</code> call that includes
            a <code>StorageResolution</code> of 1 second.</para><para>If the <code>StartTime</code> parameter specifies a time stamp that is greater than
            3 hours ago, you must specify the period as follows or no data points in that time
            range is returned:</para><ul><li><para>Start time between 3 hours and 15 days ago - Use a multiple of 60 seconds (1 minute).</para></li><li><para>Start time between 15 and 63 days ago - Use a multiple of 300 seconds (5 minutes).</para></li><li><para>Start time greater than 63 days ago - Use a multiple of 3600 seconds (1 hour).</para></li></ul>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWMetricStatisticCmdlet.UtcStartTime">
            <summary>
            <para>
            <para>The time stamp that determines the first data point to return. Start times are evaluated
            relative to the time that CloudWatch receives the request.</para><para>The value specified is inclusive; results include data points with the specified time
            stamp. In a raw HTTP query, the time stamp must be in ISO 8601 UTC format (for example,
            2016-10-03T23:00:00Z).</para><para>CloudWatch rounds the specified time stamp as follows:</para><ul><li><para>Start time less than 15 days ago - Round down to the nearest whole minute. For example,
            12:32:34 is rounded down to 12:32:00.</para></li><li><para>Start time between 15 and 63 days ago - Round down to the nearest 5-minute clock interval.
            For example, 12:32:34 is rounded down to 12:30:00.</para></li><li><para>Start time greater than 63 days ago - Round down to the nearest 1-hour clock interval.
            For example, 12:32:34 is rounded down to 12:00:00.</para></li></ul><para>If you set <code>Period</code> to 5, 10, or 30, the start time of your request is
            rounded down to the nearest time that corresponds to even 5-, 10-, or 30-second divisions
            of a minute. For example, if you make a query at (HH:mm:ss) 01:05:23 for the previous
            10-second period, the start time of your request is rounded down and you receive data
            from 01:05:10 to 01:05:20. If you make a query at 15:07:17 for the previous 5 minutes
            of data, using a period of 5 seconds, you receive data timestamped between 15:02:15
            and 15:07:15. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWMetricStatisticCmdlet.Statistic">
            <summary>
            <para>
            <para>The metric statistics, other than percentile. For percentile statistics, use <code>ExtendedStatistics</code>.
            When calling <code>GetMetricStatistics</code>, you must specify either <code>Statistics</code>
            or <code>ExtendedStatistics</code>, but not both.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWMetricStatisticCmdlet.Unit">
            <summary>
            <para>
            <para>The unit for a given metric. If you omit <code>Unit</code>, all data that was collected
            with any unit is returned, along with the corresponding units that were specified
            when the data was reported to CloudWatch. If you specify a unit, the operation returns
            only data data that was collected with that unit specified. If you specify a unit
            that does not match the data collected, the results of the operation are null. CloudWatch
            does not perform unit conversions.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWMetricStatisticCmdlet.EndTime">
            <summary>
            <para>
            <para>This property is deprecated. Setting this property results in non-UTC DateTimes not
            being marshalled correctly. Use EndTimeUtc instead. Setting either EndTime or EndTimeUtc
            results in both EndTime and EndTimeUtc being assigned, the latest assignment to either
            one of the two property is reflected in the value of both. EndTime is provided for
            backwards compatibility only and assigning a non-Utc DateTime to it results in the
            wrong timestamp being passed to the service.</para><para>The time stamp that determines the last data point to return.</para><para>The value specified is exclusive; results include data points up to the specified
            time stamp. In a raw HTTP query, the time stamp must be in ISO 8601 UTC format (for
            example, 2016-10-10T23:00:00Z).</para>
            </para>
            <para>This parameter is deprecated.</para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWMetricStatisticCmdlet.StartTime">
            <summary>
            <para>
            <para>This property is deprecated. Setting this property results in non-UTC DateTimes not
            being marshalled correctly. Use StartTimeUtc instead. Setting either StartTime or
            StartTimeUtc results in both StartTime and StartTimeUtc being assigned, the latest
            assignment to either one of the two property is reflected in the value of both. StartTime
            is provided for backwards compatibility only and assigning a non-Utc DateTime to it
            results in the wrong timestamp being passed to the service.</para><para>The time stamp that determines the first data point to return. Start times are evaluated
            relative to the time that CloudWatch receives the request.</para><para>The value specified is inclusive; results include data points with the specified time
            stamp. In a raw HTTP query, the time stamp must be in ISO 8601 UTC format (for example,
            2016-10-03T23:00:00Z).</para><para>CloudWatch rounds the specified time stamp as follows:</para><ul><li><para>Start time less than 15 days ago - Round down to the nearest whole minute. For example,
            12:32:34 is rounded down to 12:32:00.</para></li><li><para>Start time between 15 and 63 days ago - Round down to the nearest 5-minute clock interval.
            For example, 12:32:34 is rounded down to 12:30:00.</para></li><li><para>Start time greater than 63 days ago - Round down to the nearest 1-hour clock interval.
            For example, 12:32:34 is rounded down to 12:00:00.</para></li></ul><para>If you set <code>Period</code> to 5, 10, or 30, the start time of your request is
            rounded down to the nearest time that corresponds to even 5-, 10-, or 30-second divisions
            of a minute. For example, if you make a query at (HH:mm:ss) 01:05:23 for the previous
            10-second period, the start time of your request is rounded down and you receive data
            from 01:05:10 to 01:05:20. If you make a query at 15:07:17 for the previous 5 minutes
            of data, using a period of 5 seconds, you receive data timestamped between 15:02:15
            and 15:07:15. </para>
            </para>
            <para>This parameter is deprecated.</para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWMetricStatisticCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.CloudWatch.Model.GetMetricStatisticsResponse).
            Specifying the name of a property of type Amazon.CloudWatch.Model.GetMetricStatisticsResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWMetricStatisticCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the Namespace parameter.
            The -PassThru parameter is deprecated, use -Select '^Namespace' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CW.GetCWMetricWidgetImageCmdlet">
            <summary>
            You can use the <code>GetMetricWidgetImage</code> API to retrieve a snapshot graph
            of one or more Amazon CloudWatch metrics as a bitmap image. You can then embed this
            image into your services and products, such as wiki pages, reports, and documents.
            You could also retrieve images regularly, such as every minute, and create your own
            custom live dashboard.
            
             
            <para>
            The graph you retrieve can include all CloudWatch metric graph features, including
            metric math and horizontal and vertical annotations.
            </para><para>
            There is a limit of 20 transactions per second for this API. Each <code>GetMetricWidgetImage</code>
            action has the following limits:
            </para><ul><li><para>
            As many as 100 metrics in the graph.
            </para></li><li><para>
            Up to 100 KB uncompressed payload.
            </para></li></ul>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWMetricWidgetImageCmdlet.MetricWidget">
            <summary>
            <para>
            <para>A JSON string that defines the bitmap graph to be retrieved. The string includes the
            metrics to include in the graph, statistics, annotations, title, axis limits, and
            so on. You can include only one <code>MetricWidget</code> parameter in each <code>GetMetricWidgetImage</code>
            call.</para><para>For more information about the syntax of <code>MetricWidget</code> see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/CloudWatch-Metric-Widget-Structure.html">GetMetricWidgetImage:
            Metric Widget Structure and Syntax</a>.</para><para>If any metric on the graph could not load all the requested data points, an orange
            triangle with an exclamation point appears next to the graph legend.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWMetricWidgetImageCmdlet.OutputFormat">
            <summary>
            <para>
            <para>The format of the resulting image. Only PNG images are supported.</para><para>The default is <code>png</code>. If you specify <code>png</code>, the API returns
            an HTTP response with the content-type set to <code>text/xml</code>. The image data
            is in a <code>MetricWidgetImage</code> field. For example:</para><para><code> &lt;GetMetricWidgetImageResponse xmlns=&lt;URLstring&gt;&gt;</code></para><para><code> &lt;GetMetricWidgetImageResult&gt;</code></para><para><code> &lt;MetricWidgetImage&gt;</code></para><para><code> iVBORw0KGgoAAAANSUhEUgAAAlgAAAGQEAYAAAAip...</code></para><para><code> &lt;/MetricWidgetImage&gt;</code></para><para><code> &lt;/GetMetricWidgetImageResult&gt;</code></para><para><code> &lt;ResponseMetadata&gt;</code></para><para><code> &lt;RequestId&gt;6f0d4192-4d42-11e8-82c1-f539a07e0e3b&lt;/RequestId&gt;</code></para><para><code> &lt;/ResponseMetadata&gt;</code></para><para><code>&lt;/GetMetricWidgetImageResponse&gt;</code></para><para>The <code>image/png</code> setting is intended only for custom HTTP requests. For
            most use cases, and all actions using an AWS SDK, you should use <code>png</code>.
            If you specify <code>image/png</code>, the HTTP response has a content-type set to
            <code>image/png</code>, and the body of the response is a PNG image. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWMetricWidgetImageCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'MetricWidgetImage'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.CloudWatch.Model.GetMetricWidgetImageResponse).
            Specifying the name of a property of type Amazon.CloudWatch.Model.GetMetricWidgetImageResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CW.GetCWResourceTagCmdlet">
            <summary>
            Displays the tags associated with a CloudWatch resource. Currently, alarms and Contributor
            Insights rules support tagging.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWResourceTagCmdlet.ResourceARN">
            <summary>
            <para>
            <para>The ARN of the CloudWatch resource that you want to view tags for.</para><para>The ARN format of an alarm is <code>arn:aws:cloudwatch:<i>Region</i>:<i>account-id</i>:alarm:<i>alarm-name</i></code></para><para>The ARN format of a Contributor Insights rule is <code>arn:aws:cloudwatch:<i>Region</i>:<i>account-id</i>:insight-rule:<i>insight-rule-name</i></code></para><para>For more information on ARN format, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazoncloudwatch.html#amazoncloudwatch-resources-for-iam-policies">
            Resource Types Defined by Amazon CloudWatch</a> in the <i>Amazon Web Services General
            Reference</i>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWResourceTagCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'Tags'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.CloudWatch.Model.ListTagsForResourceResponse).
            Specifying the name of a property of type Amazon.CloudWatch.Model.ListTagsForResourceResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.GetCWResourceTagCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the ResourceARN parameter.
            The -PassThru parameter is deprecated, use -Select '^ResourceARN' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CW.RemoveCWAlarmCmdlet">
            <summary>
            Deletes the specified alarms. You can delete up to 100 alarms in one operation. However,
            this total can include no more than one composite alarm. For example, you could delete
            99 metric alarms and one composite alarms with one operation, but you can't delete
            two composite alarms with one operation.
            
             
            <para>
             In the event of an error, no alarms are deleted.
            </para><note><para>
            It is possible to create a loop or cycle of composite alarms, where composite alarm
            A depends on composite alarm B, and composite alarm B also depends on composite alarm
            A. In this scenario, you can't delete any composite alarm that is part of the cycle
            because there is always still a composite alarm that depends on that alarm that you
            want to delete.
            </para><para>
            To get out of such a situation, you must break the cycle by changing the rule of one
            of the composite alarms in the cycle to remove a dependency that creates the cycle.
            The simplest change to make to break a cycle is to change the <code>AlarmRule</code>
            of one of the alarms to <code>False</code>. 
            </para><para>
            Additionally, the evaluation of composite alarms stops if CloudWatch detects a cycle
            in the evaluation path. 
            </para></note>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.RemoveCWAlarmCmdlet.AlarmName">
            <summary>
            <para>
            <para>The alarms to be deleted.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.RemoveCWAlarmCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The cmdlet doesn't have a return value by default.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.CloudWatch.Model.DeleteAlarmsResponse).
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.RemoveCWAlarmCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the AlarmName parameter.
            The -PassThru parameter is deprecated, use -Select '^AlarmName' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.RemoveCWAlarmCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CW.RemoveCWAnomalyDetectorCmdlet">
            <summary>
            Deletes the specified anomaly detection model from your account.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.RemoveCWAnomalyDetectorCmdlet.Dimension">
            <summary>
            <para>
            <para>The metric dimensions associated with the anomaly detection model to delete.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.RemoveCWAnomalyDetectorCmdlet.MetricName">
            <summary>
            <para>
            <para>The metric name associated with the anomaly detection model to delete.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.RemoveCWAnomalyDetectorCmdlet.Namespace">
            <summary>
            <para>
            <para>The namespace associated with the anomaly detection model to delete.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.RemoveCWAnomalyDetectorCmdlet.Stat">
            <summary>
            <para>
            <para>The statistic associated with the anomaly detection model to delete.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.RemoveCWAnomalyDetectorCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The cmdlet doesn't have a return value by default.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.CloudWatch.Model.DeleteAnomalyDetectorResponse).
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.RemoveCWAnomalyDetectorCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the MetricName parameter.
            The -PassThru parameter is deprecated, use -Select '^MetricName' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.RemoveCWAnomalyDetectorCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CW.RemoveCWDashboardCmdlet">
            <summary>
            Deletes all dashboards that you specify. You may specify up to 100 dashboards to delete.
            If there is an error during this call, no dashboards are deleted.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.RemoveCWDashboardCmdlet.DashboardName">
            <summary>
            <para>
            <para>The dashboards to be deleted. This parameter is required.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.RemoveCWDashboardCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The cmdlet doesn't have a return value by default.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.CloudWatch.Model.DeleteDashboardsResponse).
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.RemoveCWDashboardCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the DashboardName parameter.
            The -PassThru parameter is deprecated, use -Select '^DashboardName' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.RemoveCWDashboardCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CW.RemoveCWInsightRuleCmdlet">
            <summary>
            Permanently deletes the specified Contributor Insights rules.
            
             
            <para>
            If you create a rule, delete it, and then re-create it with the same name, historical
            data from the first time the rule was created may or may not be available.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.RemoveCWInsightRuleCmdlet.RuleName">
            <summary>
            <para>
            <para>An array of the rule names to delete. If you need to find out the names of your rules,
            use <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_DescribeInsightRules.html">DescribeInsightRules</a>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.RemoveCWInsightRuleCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'Failures'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.CloudWatch.Model.DeleteInsightRulesResponse).
            Specifying the name of a property of type Amazon.CloudWatch.Model.DeleteInsightRulesResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.RemoveCWInsightRuleCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the RuleName parameter.
            The -PassThru parameter is deprecated, use -Select '^RuleName' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.RemoveCWInsightRuleCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CW.RemoveCWResourceTagCmdlet">
            <summary>
            Removes one or more tags from the specified resource.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.RemoveCWResourceTagCmdlet.ResourceARN">
            <summary>
            <para>
            <para>The ARN of the CloudWatch resource that you're removing tags from.</para><para>The ARN format of an alarm is <code>arn:aws:cloudwatch:<i>Region</i>:<i>account-id</i>:alarm:<i>alarm-name</i></code></para><para>The ARN format of a Contributor Insights rule is <code>arn:aws:cloudwatch:<i>Region</i>:<i>account-id</i>:insight-rule:<i>insight-rule-name</i></code></para><para>For more information on ARN format, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazoncloudwatch.html#amazoncloudwatch-resources-for-iam-policies">
            Resource Types Defined by Amazon CloudWatch</a> in the <i>Amazon Web Services General
            Reference</i>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.RemoveCWResourceTagCmdlet.TagKey">
            <summary>
            <para>
            <para>The list of tag keys to remove from the resource.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.RemoveCWResourceTagCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The cmdlet doesn't have a return value by default.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.CloudWatch.Model.UntagResourceResponse).
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.RemoveCWResourceTagCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the ResourceARN parameter.
            The -PassThru parameter is deprecated, use -Select '^ResourceARN' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.RemoveCWResourceTagCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CW.SetCWAlarmStateCmdlet">
            <summary>
            Temporarily sets the state of an alarm for testing purposes. When the updated state
            differs from the previous value, the action configured for the appropriate state is
            invoked. For example, if your alarm is configured to send an Amazon SNS message when
            an alarm is triggered, temporarily changing the alarm state to <code>ALARM</code>
            sends an SNS message.
            
             
            <para>
            Metric alarms returns to their actual state quickly, often within seconds. Because
            the metric alarm state change happens quickly, it is typically only visible in the
            alarm's <b>History</b> tab in the Amazon CloudWatch console or through <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_DescribeAlarmHistory.html">DescribeAlarmHistory</a>.
            </para><para>
            If you use <code>SetAlarmState</code> on a composite alarm, the composite alarm is
            not guaranteed to return to its actual state. It will return to its actual state only
            once any of its children alarms change state. It is also re-evaluated if you update
            its configuration.
            </para><para>
            If an alarm triggers EC2 Auto Scaling policies or application Auto Scaling policies,
            you must include information in the <code>StateReasonData</code> parameter to enable
            the policy to take the correct action.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.SetCWAlarmStateCmdlet.AlarmName">
            <summary>
            <para>
            <para>The name for the alarm. This name must be unique within the AWS account. The maximum
            length is 255 characters.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.SetCWAlarmStateCmdlet.StateReason">
            <summary>
            <para>
            <para>The reason that this alarm is set to this specific state, in text format.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.SetCWAlarmStateCmdlet.StateReasonData">
            <summary>
            <para>
            <para>The reason that this alarm is set to this specific state, in JSON format.</para><para>For SNS or EC2 alarm actions, this is just informational. But for EC2 Auto Scaling
            or application Auto Scaling alarm actions, the Auto Scaling policy uses the information
            in this field to take the correct action.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.SetCWAlarmStateCmdlet.StateValue">
            <summary>
            <para>
            <para>The value of the state.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.SetCWAlarmStateCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The cmdlet doesn't have a return value by default.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.CloudWatch.Model.SetAlarmStateResponse).
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.SetCWAlarmStateCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the AlarmName parameter.
            The -PassThru parameter is deprecated, use -Select '^AlarmName' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.SetCWAlarmStateCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CW.WriteCWAnomalyDetectorCmdlet">
            <summary>
            Creates an anomaly detection model for a CloudWatch metric. You can use the model
            to display a band of expected normal values when the metric is graphed.
            
             
            <para>
            For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Anomaly_Detection.html">CloudWatch
            Anomaly Detection</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.WriteCWAnomalyDetectorCmdlet.Dimension">
            <summary>
            <para>
            <para>The metric dimensions to create the anomaly detection model for.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.WriteCWAnomalyDetectorCmdlet.Configuration_ExcludedTimeRange">
            <summary>
            <para>
            <para>An array of time ranges to exclude from use when the anomaly detection model is trained.
            Use this to make sure that events that could cause unusual values for the metric,
            such as deployments, aren't used when CloudWatch creates the model.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.WriteCWAnomalyDetectorCmdlet.MetricName">
            <summary>
            <para>
            <para>The name of the metric to create the anomaly detection model for.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.WriteCWAnomalyDetectorCmdlet.Configuration_MetricTimezone">
            <summary>
            <para>
            <para>The time zone to use for the metric. This is useful to enable the model to automatically
            account for daylight savings time changes if the metric is sensitive to such time
            changes.</para><para>To specify a time zone, use the name of the time zone as specified in the standard
            tz database. For more information, see <a href="https://en.wikipedia.org/wiki/Tz_database">tz
            database</a>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.WriteCWAnomalyDetectorCmdlet.Namespace">
            <summary>
            <para>
            <para>The namespace of the metric to create the anomaly detection model for.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.WriteCWAnomalyDetectorCmdlet.Stat">
            <summary>
            <para>
            <para>The statistic to use for the metric and the anomaly detection model.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.WriteCWAnomalyDetectorCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The cmdlet doesn't have a return value by default.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.CloudWatch.Model.PutAnomalyDetectorResponse).
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.WriteCWAnomalyDetectorCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the MetricName parameter.
            The -PassThru parameter is deprecated, use -Select '^MetricName' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.WriteCWAnomalyDetectorCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CW.WriteCWCompositeAlarmCmdlet">
            <summary>
            Creates or updates a <i>composite alarm</i>. When you create a composite alarm, you
            specify a rule expression for the alarm that takes into account the alarm states of
            other alarms that you have created. The composite alarm goes into ALARM state only
            if all conditions of the rule are met.
            
             
            <para>
            The alarms specified in a composite alarm's rule expression can include metric alarms
            and other composite alarms.
            </para><para>
            Using composite alarms can reduce alarm noise. You can create multiple metric alarms,
            and also create a composite alarm and set up alerts only for the composite alarm.
            For example, you could create a composite alarm that goes into ALARM state only when
            more than one of the underlying metric alarms are in ALARM state.
            </para><para>
            Currently, the only alarm actions that can be taken by composite alarms are notifying
            SNS topics.
            </para><note><para>
            It is possible to create a loop or cycle of composite alarms, where composite alarm
            A depends on composite alarm B, and composite alarm B also depends on composite alarm
            A. In this scenario, you can't delete any composite alarm that is part of the cycle
            because there is always still a composite alarm that depends on that alarm that you
            want to delete.
            </para><para>
            To get out of such a situation, you must break the cycle by changing the rule of one
            of the composite alarms in the cycle to remove a dependency that creates the cycle.
            The simplest change to make to break a cycle is to change the <code>AlarmRule</code>
            of one of the alarms to <code>False</code>. 
            </para><para>
            Additionally, the evaluation of composite alarms stops if CloudWatch detects a cycle
            in the evaluation path. 
            </para></note><para>
            When this operation creates an alarm, the alarm state is immediately set to <code>INSUFFICIENT_DATA</code>.
            The alarm is then evaluated and its state is set appropriately. Any actions associated
            with the new state are then executed. For a composite alarm, this initial time after
            creation is the only time that the alarm can be in <code>INSUFFICIENT_DATA</code>
            state.
            </para><para>
            When you update an existing alarm, its state is left unchanged, but the update completely
            overwrites the previous configuration of the alarm.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.WriteCWCompositeAlarmCmdlet.ActionsEnabled">
            <summary>
            <para>
            <para>Indicates whether actions should be executed during any changes to the alarm state
            of the composite alarm. The default is <code>TRUE</code>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.WriteCWCompositeAlarmCmdlet.AlarmAction">
            <summary>
            <para>
            <para>The actions to execute when this alarm transitions to the <code>ALARM</code> state
            from any other state. Each action is specified as an Amazon Resource Name (ARN).</para><para>Valid Values: <code>arn:aws:sns:<i>region</i>:<i>account-id</i>:<i>sns-topic-name</i></code></para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.WriteCWCompositeAlarmCmdlet.AlarmDescription">
            <summary>
            <para>
            <para>The description for the composite alarm.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.WriteCWCompositeAlarmCmdlet.AlarmName">
            <summary>
            <para>
            <para>The name for the composite alarm. This name must be unique within your AWS account.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.WriteCWCompositeAlarmCmdlet.AlarmRule">
            <summary>
            <para>
            <para>An expression that specifies which other alarms are to be evaluated to determine this
            composite alarm's state. For each alarm that you reference, you designate a function
            that specifies whether that alarm needs to be in ALARM state, OK state, or INSUFFICIENT_DATA
            state. You can use operators (AND, OR and NOT) to combine multiple functions in a
            single expression. You can use parenthesis to logically group the functions in your
            expression.</para><para>You can use either alarm names or ARNs to reference the other alarms that are to be
            evaluated.</para><para>Functions can include the following:</para><ul><li><para><code>ALARM("<i>alarm-name</i> or <i>alarm-ARN</i>")</code> is TRUE if the named
            alarm is in ALARM state.</para></li><li><para><code>OK("<i>alarm-name</i> or <i>alarm-ARN</i>")</code> is TRUE if the named alarm
            is in OK state.</para></li><li><para><code>INSUFFICIENT_DATA("<i>alarm-name</i> or <i>alarm-ARN</i>")</code> is TRUE if
            the named alarm is in INSUFFICIENT_DATA state.</para></li><li><para><code>TRUE</code> always evaluates to TRUE.</para></li><li><para><code>FALSE</code> always evaluates to FALSE.</para></li></ul><para>TRUE and FALSE are useful for testing a complex <code>AlarmRule</code> structure,
            and for testing your alarm actions.</para><para>Alarm names specified in <code>AlarmRule</code> can be surrounded with double-quotes
            ("), but do not have to be.</para><para>The following are some examples of <code>AlarmRule</code>:</para><ul><li><para><code>ALARM(CPUUtilizationTooHigh) AND ALARM(DiskReadOpsTooHigh)</code> specifies
            that the composite alarm goes into ALARM state only if both CPUUtilizationTooHigh
            and DiskReadOpsTooHigh alarms are in ALARM state.</para></li><li><para><code>ALARM(CPUUtilizationTooHigh) AND NOT ALARM(DeploymentInProgress)</code> specifies
            that the alarm goes to ALARM state if CPUUtilizationTooHigh is in ALARM state and
            DeploymentInProgress is not in ALARM state. This example reduces alarm noise during
            a known deployment window.</para></li><li><para><code>(ALARM(CPUUtilizationTooHigh) OR ALARM(DiskReadOpsTooHigh)) AND OK(NetworkOutTooHigh)</code>
            goes into ALARM state if CPUUtilizationTooHigh OR DiskReadOpsTooHigh is in ALARM state,
            and if NetworkOutTooHigh is in OK state. This provides another example of using a
            composite alarm to prevent noise. This rule ensures that you are not notified with
            an alarm action on high CPU or disk usage if a known network problem is also occurring.</para></li></ul><para>The <code>AlarmRule</code> can specify as many as 100 "children" alarms. The <code>AlarmRule</code>
            expression can have as many as 500 elements. Elements are child alarms, TRUE or FALSE
            statements, and parentheses.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.WriteCWCompositeAlarmCmdlet.InsufficientDataAction">
            <summary>
            <para>
            <para>The actions to execute when this alarm transitions to the <code>INSUFFICIENT_DATA</code>
            state from any other state. Each action is specified as an Amazon Resource Name (ARN).</para><para>Valid Values: <code>arn:aws:sns:<i>region</i>:<i>account-id</i>:<i>sns-topic-name</i></code></para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.WriteCWCompositeAlarmCmdlet.OKAction">
            <summary>
            <para>
            <para>The actions to execute when this alarm transitions to an <code>OK</code> state from
            any other state. Each action is specified as an Amazon Resource Name (ARN).</para><para>Valid Values: <code>arn:aws:sns:<i>region</i>:<i>account-id</i>:<i>sns-topic-name</i></code></para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.WriteCWCompositeAlarmCmdlet.Tag">
            <summary>
            <para>
            <para>A list of key-value pairs to associate with the composite alarm. You can associate
            as many as 50 tags with an alarm.</para><para>Tags can help you organize and categorize your resources. You can also use them to
            scope user permissions, by granting a user permission to access or change only resources
            with certain tag values.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.WriteCWCompositeAlarmCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The cmdlet doesn't have a return value by default.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.CloudWatch.Model.PutCompositeAlarmResponse).
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.WriteCWCompositeAlarmCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the AlarmName parameter.
            The -PassThru parameter is deprecated, use -Select '^AlarmName' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.WriteCWCompositeAlarmCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CW.WriteCWDashboardCmdlet">
            <summary>
            Creates a dashboard if it does not already exist, or updates an existing dashboard.
            If you update a dashboard, the entire contents are replaced with what you specify
            here.
            
             
            <para>
            All dashboards in your account are global, not region-specific.
            </para><para>
            A simple way to create a dashboard using <code>PutDashboard</code> is to copy an existing
            dashboard. To copy an existing dashboard using the console, you can load the dashboard
            and then use the View/edit source command in the Actions menu to display the JSON
            block for that dashboard. Another way to copy a dashboard is to use <code>GetDashboard</code>,
            and then use the data returned within <code>DashboardBody</code> as the template for
            the new dashboard when you call <code>PutDashboard</code>.
            </para><para>
            When you create a dashboard with <code>PutDashboard</code>, a good practice is to
            add a text widget at the top of the dashboard with a message that the dashboard was
            created by script and should not be changed in the console. This message could also
            point console users to the location of the <code>DashboardBody</code> script or the
            CloudFormation template used to create the dashboard.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.WriteCWDashboardCmdlet.DashboardBody">
            <summary>
            <para>
            <para>The detailed information about the dashboard in JSON format, including the widgets
            to include and their location on the dashboard. This parameter is required.</para><para>For more information about the syntax, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/CloudWatch-Dashboard-Body-Structure.html">Dashboard
            Body Structure and Syntax</a>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.WriteCWDashboardCmdlet.DashboardName">
            <summary>
            <para>
            <para>The name of the dashboard. If a dashboard with this name already exists, this call
            modifies that dashboard, replacing its current contents. Otherwise, a new dashboard
            is created. The maximum length is 255, and valid characters are A-Z, a-z, 0-9, "-",
            and "_". This parameter is required.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.WriteCWDashboardCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'DashboardValidationMessages'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.CloudWatch.Model.PutDashboardResponse).
            Specifying the name of a property of type Amazon.CloudWatch.Model.PutDashboardResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.WriteCWDashboardCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the DashboardBody parameter.
            The -PassThru parameter is deprecated, use -Select '^DashboardBody' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.WriteCWDashboardCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CW.WriteCWInsightRuleCmdlet">
            <summary>
            Creates a Contributor Insights rule. Rules evaluate log events in a CloudWatch Logs
            log group, enabling you to find contributor data for the log events in that log group.
            For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/ContributorInsights.html">Using
            Contributor Insights to Analyze High-Cardinality Data</a>.
            
             
            <para>
            If you create a rule, delete it, and then re-create it with the same name, historical
            data from the first time the rule was created may or may not be available.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.WriteCWInsightRuleCmdlet.RuleDefinition">
            <summary>
            <para>
            <para>The definition of the rule, as a JSON object. For details on the valid syntax, see
            <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/ContributorInsights-RuleSyntax.html">Contributor
            Insights Rule Syntax</a>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.WriteCWInsightRuleCmdlet.RuleName">
            <summary>
            <para>
            <para>A unique name for the rule.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.WriteCWInsightRuleCmdlet.RuleState">
            <summary>
            <para>
            <para>The state of the rule. Valid values are ENABLED and DISABLED.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.WriteCWInsightRuleCmdlet.Tag">
            <summary>
            <para>
            <para>A list of key-value pairs to associate with the Contributor Insights rule. You can
            associate as many as 50 tags with a rule.</para><para>Tags can help you organize and categorize your resources. You can also use them to
            scope user permissions, by granting a user permission to access or change only the
            resources that have certain tag values.</para><para>To be able to associate tags with a rule, you must have the <code>cloudwatch:TagResource</code>
            permission in addition to the <code>cloudwatch:PutInsightRule</code> permission.</para><para>If you are using this operation to update an existing Contributor Insights rule, any
            tags you specify in this parameter are ignored. To change the tags of an existing
            rule, use <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_TagResource.html">TagResource</a>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.WriteCWInsightRuleCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The cmdlet doesn't have a return value by default.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.CloudWatch.Model.PutInsightRuleResponse).
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.WriteCWInsightRuleCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the RuleName parameter.
            The -PassThru parameter is deprecated, use -Select '^RuleName' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.WriteCWInsightRuleCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CW.WriteCWMetricAlarmCmdlet">
            <summary>
            Creates or updates an alarm and associates it with the specified metric, metric math
            expression, or anomaly detection model.
            
             
            <para>
            Alarms based on anomaly detection models cannot have Auto Scaling actions.
            </para><para>
            When this operation creates an alarm, the alarm state is immediately set to <code>INSUFFICIENT_DATA</code>.
            The alarm is then evaluated and its state is set appropriately. Any actions associated
            with the new state are then executed.
            </para><para>
            When you update an existing alarm, its state is left unchanged, but the update completely
            overwrites the previous configuration of the alarm.
            </para><para>
            If you are an IAM user, you must have Amazon EC2 permissions for some alarm operations:
            </para><ul><li><para><code>iam:CreateServiceLinkedRole</code> for all alarms with EC2 actions
            </para></li><li><para><code>ec2:DescribeInstanceStatus</code> and <code>ec2:DescribeInstances</code> for
            all alarms on EC2 instance status metrics
            </para></li><li><para><code>ec2:StopInstances</code> for alarms with stop actions
            </para></li><li><para><code>ec2:TerminateInstances</code> for alarms with terminate actions
            </para></li><li><para>
            No specific permissions are needed for alarms with recover actions
            </para></li></ul><para>
            If you have read/write permissions for Amazon CloudWatch but not for Amazon EC2, you
            can still create an alarm, but the stop or terminate actions are not performed. However,
            if you are later granted the required permissions, the alarm actions that you created
            earlier are performed.
            </para><para>
            If you are using an IAM role (for example, an EC2 instance profile), you cannot stop
            or terminate the instance using alarm actions. However, you can still see the alarm
            state and perform any other actions such as Amazon SNS notifications or Auto Scaling
            policies.
            </para><para>
            If you are using temporary security credentials granted using AWS STS, you cannot
            stop or terminate an EC2 instance using alarm actions.
            </para><para>
            The first time you create an alarm in the AWS Management Console, the CLI, or by using
            the PutMetricAlarm API, CloudWatch creates the necessary service-linked role for you.
            The service-linked role is called <code>AWSServiceRoleForCloudWatchEvents</code>.
            For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html#iam-term-service-linked-role">AWS
            service-linked role</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.WriteCWMetricAlarmCmdlet.ActionsEnabled">
            <summary>
            <para>
            <para>Indicates whether actions should be executed during any changes to the alarm state.
            The default is <code>TRUE</code>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.WriteCWMetricAlarmCmdlet.AlarmAction">
            <summary>
            <para>
            <para>The actions to execute when this alarm transitions to the <code>ALARM</code> state
            from any other state. Each action is specified as an Amazon Resource Name (ARN).</para><para>Valid Values: <code>arn:aws:automate:<i>region</i>:ec2:stop</code> | <code>arn:aws:automate:<i>region</i>:ec2:terminate</code>
            | <code>arn:aws:automate:<i>region</i>:ec2:recover</code> | <code>arn:aws:automate:<i>region</i>:ec2:reboot</code>
            | <code>arn:aws:sns:<i>region</i>:<i>account-id</i>:<i>sns-topic-name</i></code>
            | <code>arn:aws:autoscaling:<i>region</i>:<i>account-id</i>:scalingPolicy:<i>policy-id</i>:autoScalingGroupName/<i>group-friendly-name</i>:policyName/<i>policy-friendly-name</i></code></para><para>Valid Values (for use with IAM roles): <code>arn:aws:swf:<i>region</i>:<i>account-id</i>:action/actions/AWS_EC2.InstanceId.Stop/1.0</code>
            | <code>arn:aws:swf:<i>region</i>:<i>account-id</i>:action/actions/AWS_EC2.InstanceId.Terminate/1.0</code>
            | <code>arn:aws:swf:<i>region</i>:<i>account-id</i>:action/actions/AWS_EC2.InstanceId.Reboot/1.0</code></para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.WriteCWMetricAlarmCmdlet.AlarmDescription">
            <summary>
            <para>
            <para>The description for the alarm.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.WriteCWMetricAlarmCmdlet.AlarmName">
            <summary>
            <para>
            <para>The name for the alarm. This name must be unique within your AWS account.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.WriteCWMetricAlarmCmdlet.ComparisonOperator">
            <summary>
            <para>
            <para> The arithmetic operation to use when comparing the specified statistic and threshold.
            The specified statistic value is used as the first operand.</para><para>The values <code>LessThanLowerOrGreaterThanUpperThreshold</code>, <code>LessThanLowerThreshold</code>,
            and <code>GreaterThanUpperThreshold</code> are used only for alarms based on anomaly
            detection models.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.WriteCWMetricAlarmCmdlet.DatapointsToAlarm">
            <summary>
            <para>
            <para>The number of data points that must be breaching to trigger the alarm. This is used
            only if you are setting an "M out of N" alarm. In that case, this value is the M.
            For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html#alarm-evaluation">Evaluating
            an Alarm</a> in the <i>Amazon CloudWatch User Guide</i>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.WriteCWMetricAlarmCmdlet.Dimension">
            <summary>
            <para>
            <para>The dimensions for the metric specified in <code>MetricName</code>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.WriteCWMetricAlarmCmdlet.EvaluateLowSampleCountPercentile">
            <summary>
            <para>
            <para> Used only for alarms based on percentiles. If you specify <code>ignore</code>, the
            alarm state does not change during periods with too few data points to be statistically
            significant. If you specify <code>evaluate</code> or omit this parameter, the alarm
            is always evaluated and possibly changes state no matter how many data points are
            available. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html#percentiles-with-low-samples">Percentile-Based
            CloudWatch Alarms and Low Data Samples</a>.</para><para>Valid Values: <code>evaluate | ignore</code></para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.WriteCWMetricAlarmCmdlet.EvaluationPeriod">
            <summary>
            <para>
            <para>The number of periods over which data is compared to the specified threshold. If you
            are setting an alarm that requires that a number of consecutive data points be breaching
            to trigger the alarm, this value specifies that number. If you are setting an "M out
            of N" alarm, this value is the N.</para><para>An alarm's total current evaluation period can be no longer than one day, so this
            number multiplied by <code>Period</code> cannot be more than 86,400 seconds.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.WriteCWMetricAlarmCmdlet.ExtendedStatistic">
            <summary>
            <para>
            <para>The percentile statistic for the metric specified in <code>MetricName</code>. Specify
            a value between p0.0 and p100. When you call <code>PutMetricAlarm</code> and specify
            a <code>MetricName</code>, you must specify either <code>Statistic</code> or <code>ExtendedStatistic,</code>
            but not both.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.WriteCWMetricAlarmCmdlet.InsufficientDataAction">
            <summary>
            <para>
            <para>The actions to execute when this alarm transitions to the <code>INSUFFICIENT_DATA</code>
            state from any other state. Each action is specified as an Amazon Resource Name (ARN).</para><para>Valid Values: <code>arn:aws:automate:<i>region</i>:ec2:stop</code> | <code>arn:aws:automate:<i>region</i>:ec2:terminate</code>
            | <code>arn:aws:automate:<i>region</i>:ec2:recover</code> | <code>arn:aws:automate:<i>region</i>:ec2:reboot</code>
            | <code>arn:aws:sns:<i>region</i>:<i>account-id</i>:<i>sns-topic-name</i></code>
            | <code>arn:aws:autoscaling:<i>region</i>:<i>account-id</i>:scalingPolicy:<i>policy-id</i>:autoScalingGroupName/<i>group-friendly-name</i>:policyName/<i>policy-friendly-name</i></code></para><para>Valid Values (for use with IAM roles): <code>&gt;arn:aws:swf:<i>region</i>:<i>account-id</i>:action/actions/AWS_EC2.InstanceId.Stop/1.0</code>
            | <code>arn:aws:swf:<i>region</i>:<i>account-id</i>:action/actions/AWS_EC2.InstanceId.Terminate/1.0</code>
            | <code>arn:aws:swf:<i>region</i>:<i>account-id</i>:action/actions/AWS_EC2.InstanceId.Reboot/1.0</code></para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.WriteCWMetricAlarmCmdlet.MetricName">
            <summary>
            <para>
            <para>The name for the metric associated with the alarm. For each <code>PutMetricAlarm</code>
            operation, you must specify either <code>MetricName</code> or a <code>Metrics</code>
            array.</para><para>If you are creating an alarm based on a math expression, you cannot specify this parameter,
            or any of the <code>Dimensions</code>, <code>Period</code>, <code>Namespace</code>,
            <code>Statistic</code>, or <code>ExtendedStatistic</code> parameters. Instead, you
            specify all this information in the <code>Metrics</code> array.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.WriteCWMetricAlarmCmdlet.Metric">
            <summary>
            <para>
            <para>An array of <code>MetricDataQuery</code> structures that enable you to create an alarm
            based on the result of a metric math expression. For each <code>PutMetricAlarm</code>
            operation, you must specify either <code>MetricName</code> or a <code>Metrics</code>
            array.</para><para>Each item in the <code>Metrics</code> array either retrieves a metric or performs
            a math expression.</para><para>One item in the <code>Metrics</code> array is the expression that the alarm watches.
            You designate this expression by setting <code>ReturnValue</code> to true for this
            object in the array. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_MetricDataQuery.html">MetricDataQuery</a>.</para><para>If you use the <code>Metrics</code> parameter, you cannot include the <code>MetricName</code>,
            <code>Dimensions</code>, <code>Period</code>, <code>Namespace</code>, <code>Statistic</code>,
            or <code>ExtendedStatistic</code> parameters of <code>PutMetricAlarm</code> in the
            same operation. Instead, you retrieve the metrics you are using in your math expression
            as part of the <code>Metrics</code> array.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.WriteCWMetricAlarmCmdlet.Namespace">
            <summary>
            <para>
            <para>The namespace for the metric associated specified in <code>MetricName</code>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.WriteCWMetricAlarmCmdlet.OKAction">
            <summary>
            <para>
            <para>The actions to execute when this alarm transitions to an <code>OK</code> state from
            any other state. Each action is specified as an Amazon Resource Name (ARN).</para><para>Valid Values: <code>arn:aws:automate:<i>region</i>:ec2:stop</code> | <code>arn:aws:automate:<i>region</i>:ec2:terminate</code>
            | <code>arn:aws:automate:<i>region</i>:ec2:recover</code> | <code>arn:aws:automate:<i>region</i>:ec2:reboot</code>
            | <code>arn:aws:sns:<i>region</i>:<i>account-id</i>:<i>sns-topic-name</i></code>
            | <code>arn:aws:autoscaling:<i>region</i>:<i>account-id</i>:scalingPolicy:<i>policy-id</i>:autoScalingGroupName/<i>group-friendly-name</i>:policyName/<i>policy-friendly-name</i></code></para><para>Valid Values (for use with IAM roles): <code>arn:aws:swf:<i>region</i>:<i>account-id</i>:action/actions/AWS_EC2.InstanceId.Stop/1.0</code>
            | <code>arn:aws:swf:<i>region</i>:<i>account-id</i>:action/actions/AWS_EC2.InstanceId.Terminate/1.0</code>
            | <code>arn:aws:swf:<i>region</i>:<i>account-id</i>:action/actions/AWS_EC2.InstanceId.Reboot/1.0</code></para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.WriteCWMetricAlarmCmdlet.Period">
            <summary>
            <para>
            <para>The length, in seconds, used each time the metric specified in <code>MetricName</code>
            is evaluated. Valid values are 10, 30, and any multiple of 60.</para><para><code>Period</code> is required for alarms based on static thresholds. If you are
            creating an alarm based on a metric math expression, you specify the period for each
            metric within the objects in the <code>Metrics</code> array.</para><para>Be sure to specify 10 or 30 only for metrics that are stored by a <code>PutMetricData</code>
            call with a <code>StorageResolution</code> of 1. If you specify a period of 10 or
            30 for a metric that does not have sub-minute resolution, the alarm still attempts
            to gather data at the period rate that you specify. In this case, it does not receive
            data for the attempts that do not correspond to a one-minute data resolution, and
            the alarm may often lapse into INSUFFICENT_DATA status. Specifying 10 or 30 also sets
            this alarm as a high-resolution alarm, which has a higher charge than other alarms.
            For more information about pricing, see <a href="https://aws.amazon.com/cloudwatch/pricing/">Amazon
            CloudWatch Pricing</a>.</para><para>An alarm's total current evaluation period can be no longer than one day, so <code>Period</code>
            multiplied by <code>EvaluationPeriods</code> cannot be more than 86,400 seconds.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.WriteCWMetricAlarmCmdlet.Statistic">
            <summary>
            <para>
            <para>The statistic for the metric specified in <code>MetricName</code>, other than percentile.
            For percentile statistics, use <code>ExtendedStatistic</code>. When you call <code>PutMetricAlarm</code>
            and specify a <code>MetricName</code>, you must specify either <code>Statistic</code>
            or <code>ExtendedStatistic,</code> but not both.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.WriteCWMetricAlarmCmdlet.Tag">
            <summary>
            <para>
            <para>A list of key-value pairs to associate with the alarm. You can associate as many as
            50 tags with an alarm.</para><para>Tags can help you organize and categorize your resources. You can also use them to
            scope user permissions, by granting a user permission to access or change only resources
            with certain tag values.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.WriteCWMetricAlarmCmdlet.Threshold">
            <summary>
            <para>
            <para>The value against which the specified statistic is compared.</para><para>This parameter is required for alarms based on static thresholds, but should not be
            used for alarms based on anomaly detection models.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.WriteCWMetricAlarmCmdlet.ThresholdMetricId">
            <summary>
            <para>
            <para>If this is an alarm based on an anomaly detection model, make this value match the
            ID of the <code>ANOMALY_DETECTION_BAND</code> function.</para><para>For an example of how to use this parameter, see the <b>Anomaly Detection Model Alarm</b>
            example on this page.</para><para>If your alarm uses this parameter, it cannot have Auto Scaling actions.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.WriteCWMetricAlarmCmdlet.TreatMissingData">
            <summary>
            <para>
            <para> Sets how this alarm is to handle missing data points. If <code>TreatMissingData</code>
            is omitted, the default behavior of <code>missing</code> is used. For more information,
            see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html#alarms-and-missing-data">Configuring
            How CloudWatch Alarms Treats Missing Data</a>.</para><para>Valid Values: <code>breaching | notBreaching | ignore | missing</code></para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.WriteCWMetricAlarmCmdlet.Unit">
            <summary>
            <para>
            <para>The unit of measure for the statistic. For example, the units for the Amazon EC2 NetworkIn
            metric are Bytes because NetworkIn tracks the number of bytes that an instance receives
            on all network interfaces. You can also specify a unit when you create a custom metric.
            Units help provide conceptual meaning to your data. Metric data points that specify
            a unit of measure, such as Percent, are aggregated separately.</para><para>If you don't specify <code>Unit</code>, CloudWatch retrieves all unit types that have
            been published for the metric and attempts to evaluate the alarm. Usually metrics
            are published with only one unit, so the alarm will work as intended.</para><para>However, if the metric is published with multiple types of units and you don't specify
            a unit, the alarm's behavior is not defined and will behave un-predictably.</para><para>We recommend omitting <code>Unit</code> so that you don't inadvertently specify an
            incorrect unit that is not published for this metric. Doing so causes the alarm to
            be stuck in the <code>INSUFFICIENT DATA</code> state.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.WriteCWMetricAlarmCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The cmdlet doesn't have a return value by default.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.CloudWatch.Model.PutMetricAlarmResponse).
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.WriteCWMetricAlarmCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the AlarmName parameter.
            The -PassThru parameter is deprecated, use -Select '^AlarmName' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.WriteCWMetricAlarmCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CW.WriteCWMetricDataCmdlet">
            <summary>
            Publishes metric data points to Amazon CloudWatch. CloudWatch associates the data
            points with the specified metric. If the specified metric does not exist, CloudWatch
            creates the metric. When CloudWatch creates a metric, it can take up to fifteen minutes
            for the metric to appear in calls to <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_ListMetrics.html">ListMetrics</a>.
            
             
            <para>
            You can publish either individual data points in the <code>Value</code> field, or
            arrays of values and the number of times each value occurred during the period by
            using the <code>Values</code> and <code>Counts</code> fields in the <code>MetricDatum</code>
            structure. Using the <code>Values</code> and <code>Counts</code> method enables you
            to publish up to 150 values per metric with one <code>PutMetricData</code> request,
            and supports retrieving percentile statistics on this data.
            </para><para>
            Each <code>PutMetricData</code> request is limited to 40 KB in size for HTTP POST
            requests. You can send a payload compressed by gzip. Each request is also limited
            to no more than 20 different metrics.
            </para><para>
            Although the <code>Value</code> parameter accepts numbers of type <code>Double</code>,
            CloudWatch rejects values that are either too small or too large. Values must be in
            the range of -2^360 to 2^360. In addition, special values (for example, NaN, +Infinity,
            -Infinity) are not supported.
            </para><para>
            You can use up to 10 dimensions per metric to further clarify what data the metric
            collects. Each dimension consists of a Name and Value pair. For more information about
            specifying dimensions, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/publishingMetrics.html">Publishing
            Metrics</a> in the <i>Amazon CloudWatch User Guide</i>.
            </para><para>
            Data points with time stamps from 24 hours ago or longer can take at least 48 hours
            to become available for <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricData.html">GetMetricData</a>
            or <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricStatistics.html">GetMetricStatistics</a>
            from the time they are submitted. Data points with time stamps between 3 and 24 hours
            ago can take as much as 2 hours to become available for for <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricData.html">GetMetricData</a>
            or <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricStatistics.html">GetMetricStatistics</a>.
            </para><para>
            CloudWatch needs raw data points to calculate percentile statistics. If you publish
            data using a statistic set instead, you can only retrieve percentile statistics for
            this data if one of the following conditions is true:
            </para><ul><li><para>
            The <code>SampleCount</code> value of the statistic set is 1 and <code>Min</code>,
            <code>Max</code>, and <code>Sum</code> are all equal.
            </para></li><li><para>
            The <code>Min</code> and <code>Max</code> are equal, and <code>Sum</code> is equal
            to <code>Min</code> multiplied by <code>SampleCount</code>.
            </para></li></ul>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.WriteCWMetricDataCmdlet.MetricData">
            <summary>
            <para>
            <para>The data for the metric. The array can include no more than 20 metrics per call.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.WriteCWMetricDataCmdlet.Namespace">
            <summary>
            <para>
            <para>The namespace for the metric data.</para><para>To avoid conflicts with AWS service namespaces, you should not specify a namespace
            that begins with <code>AWS/</code></para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.WriteCWMetricDataCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The cmdlet doesn't have a return value by default.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.CloudWatch.Model.PutMetricDataResponse).
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.WriteCWMetricDataCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the Namespace parameter.
            The -PassThru parameter is deprecated, use -Select '^Namespace' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CW.WriteCWMetricDataCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
    </members>
</doc>
