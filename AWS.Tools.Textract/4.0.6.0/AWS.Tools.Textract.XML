<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AWS.Tools.Textract</name>
    </assembly>
    <members>
        <member name="T:Amazon.PowerShell.Cmdlets.TXT.FindTXTDocumentTextCmdlet">
            <summary>
            Detects text in the input document. Amazon Textract can detect lines of text and the
            words that make up a line of text. The input document must be an image in JPEG or
            PNG format. <code>DetectDocumentText</code> returns the detected text in an array
            of <a>Block</a> objects. 
            
             
            <para>
            Each document page has as an associated <code>Block</code> of type PAGE. Each PAGE
            <code>Block</code> object is the parent of LINE <code>Block</code> objects that represent
            the lines of detected text on a page. A LINE <code>Block</code> object is a parent
            for each word that makes up the line. Words are represented by <code>Block</code>
            objects of type WORD.
            </para><para><code>DetectDocumentText</code> is a synchronous operation. To analyze documents
            asynchronously, use <a>StartDocumentTextDetection</a>.
            </para><para>
            For more information, see <a href="https://docs.aws.amazon.com/textract/latest/dg/how-it-works-detecting.html">Document
            Text Detection</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.TXT.FindTXTDocumentTextCmdlet.S3Object_Bucket">
            <summary>
            <para>
            <para>The name of the S3 bucket.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.TXT.FindTXTDocumentTextCmdlet.Document_Byte">
            <summary>
            <para>
            <para>A blob of base64-encoded document bytes. The maximum size of a document that's provided
            in a blob of bytes is 5 MB. The document bytes must be in PNG or JPEG format.</para><para>If you're using an AWS SDK to call Amazon Textract, you might not need to base64-encode
            image bytes passed using the <code>Bytes</code> field. </para>
            </para>
            <para>The cmdlet will automatically convert the supplied parameter of type string, string[], System.IO.FileInfo or System.IO.Stream to byte[] before supplying it to the service.</para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.TXT.FindTXTDocumentTextCmdlet.S3Object_Name">
            <summary>
            <para>
            <para>The file name of the input document. Synchronous operations can use image files that
            are in JPEG or PNG format. Asynchronous operations also support PDF format files.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.TXT.FindTXTDocumentTextCmdlet.S3Object_Version">
            <summary>
            <para>
            <para>If the bucket has versioning enabled, you can specify the object version. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.TXT.FindTXTDocumentTextCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'Blocks'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Textract.Model.DetectDocumentTextResponse).
            Specifying the name of a property of type Amazon.Textract.Model.DetectDocumentTextResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.TXT.GetTXTDocumentAnalysisCmdlet">
            <summary>
            Gets the results for an Amazon Textract asynchronous operation that analyzes text
            in a document.
            
             
            <para>
            You start asynchronous text analysis by calling <a>StartDocumentAnalysis</a>, which
            returns a job identifier (<code>JobId</code>). When the text analysis operation finishes,
            Amazon Textract publishes a completion status to the Amazon Simple Notification Service
            (Amazon SNS) topic that's registered in the initial call to <code>StartDocumentAnalysis</code>.
            To get the results of the text-detection operation, first check that the status value
            published to the Amazon SNS topic is <code>SUCCEEDED</code>. If so, call <code>GetDocumentAnalysis</code>,
            and pass the job identifier (<code>JobId</code>) from the initial call to <code>StartDocumentAnalysis</code>.
            </para><para><code>GetDocumentAnalysis</code> returns an array of <a>Block</a> objects. The following
            types of information are returned: 
            </para><ul><li><para>
            Form data (key-value pairs). The related information is returned in two <a>Block</a>
            objects, each of type <code>KEY_VALUE_SET</code>: a KEY <code>Block</code> object
            and a VALUE <code>Block</code> object. For example, <i>Name: Ana Silva Carolina</i>
            contains a key and value. <i>Name:</i> is the key. <i>Ana Silva Carolina</i> is the
            value.
            </para></li><li><para>
            Table and table cell data. A TABLE <code>Block</code> object contains information
            about a detected table. A CELL <code>Block</code> object is returned for each cell
            in a table.
            </para></li><li><para>
            Lines and words of text. A LINE <code>Block</code> object contains one or more WORD
            <code>Block</code> objects. All lines and words that are detected in the document
            are returned (including text that doesn't have a relationship with the value of the
            <code>StartDocumentAnalysis</code><code>FeatureTypes</code> input parameter). 
            </para></li></ul><para>
            Selection elements such as check boxes and option buttons (radio buttons) can be detected
            in form data and in tables. A SELECTION_ELEMENT <code>Block</code> object contains
            information about a selection element, including the selection status.
            </para><para>
            Use the <code>MaxResults</code> parameter to limit the number of blocks that are returned.
            If there are more results than specified in <code>MaxResults</code>, the value of
            <code>NextToken</code> in the operation response contains a pagination token for getting
            the next set of results. To get the next page of results, call <code>GetDocumentAnalysis</code>,
            and populate the <code>NextToken</code> request parameter with the token value that's
            returned from the previous call to <code>GetDocumentAnalysis</code>.
            </para><para>
            For more information, see <a href="https://docs.aws.amazon.com/textract/latest/dg/how-it-works-analyzing.html">Document
            Text Analysis</a>.
            </para><br/><br/>In the AWS.Tools.Textract module, this cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.TXT.GetTXTDocumentAnalysisCmdlet.JobId">
            <summary>
            <para>
            <para>A unique identifier for the text-detection job. The <code>JobId</code> is returned
            from <code>StartDocumentAnalysis</code>. A <code>JobId</code> value is only valid
            for 7 days.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.TXT.GetTXTDocumentAnalysisCmdlet.MaxResult">
            <summary>
            <para>
            <para>The maximum number of results to return per paginated call. The largest value that
            you can specify is 1,000. If you specify a value greater than 1,000, a maximum of
            1,000 results is returned. The default value is 1,000.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.TXT.GetTXTDocumentAnalysisCmdlet.NextToken">
            <summary>
            <para>
            <para>If the previous response was incomplete (because there are more blocks to retrieve),
            Amazon Textract returns a pagination token in the response. You can use this pagination
            token to retrieve the next set of blocks.</para>
            </para>
            <para>
            <br/><b>Note:</b> In the AWS.Tools.Textract module, this parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.TXT.GetTXTDocumentAnalysisCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Textract.Model.GetDocumentAnalysisResponse).
            Specifying the name of a property of type Amazon.Textract.Model.GetDocumentAnalysisResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.TXT.GetTXTDocumentAnalysisCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the JobId parameter.
            The -PassThru parameter is deprecated, use -Select '^JobId' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.TXT.GetTXTDocumentAnalysisCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.TXT.GetTXTDocumentTextDetectionCmdlet">
            <summary>
            Gets the results for an Amazon Textract asynchronous operation that detects text in
            a document. Amazon Textract can detect lines of text and the words that make up a
            line of text.
            
             
            <para>
            You start asynchronous text detection by calling <a>StartDocumentTextDetection</a>,
            which returns a job identifier (<code>JobId</code>). When the text detection operation
            finishes, Amazon Textract publishes a completion status to the Amazon Simple Notification
            Service (Amazon SNS) topic that's registered in the initial call to <code>StartDocumentTextDetection</code>.
            To get the results of the text-detection operation, first check that the status value
            published to the Amazon SNS topic is <code>SUCCEEDED</code>. If so, call <code>GetDocumentTextDetection</code>,
            and pass the job identifier (<code>JobId</code>) from the initial call to <code>StartDocumentTextDetection</code>.
            </para><para><code>GetDocumentTextDetection</code> returns an array of <a>Block</a> objects. 
            </para><para>
            Each document page has as an associated <code>Block</code> of type PAGE. Each PAGE
            <code>Block</code> object is the parent of LINE <code>Block</code> objects that represent
            the lines of detected text on a page. A LINE <code>Block</code> object is a parent
            for each word that makes up the line. Words are represented by <code>Block</code>
            objects of type WORD.
            </para><para>
            Use the MaxResults parameter to limit the number of blocks that are returned. If there
            are more results than specified in <code>MaxResults</code>, the value of <code>NextToken</code>
            in the operation response contains a pagination token for getting the next set of
            results. To get the next page of results, call <code>GetDocumentTextDetection</code>,
            and populate the <code>NextToken</code> request parameter with the token value that's
            returned from the previous call to <code>GetDocumentTextDetection</code>.
            </para><para>
            For more information, see <a href="https://docs.aws.amazon.com/textract/latest/dg/how-it-works-detecting.html">Document
            Text Detection</a>.
            </para><br/><br/>In the AWS.Tools.Textract module, this cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.TXT.GetTXTDocumentTextDetectionCmdlet.JobId">
            <summary>
            <para>
            <para>A unique identifier for the text detection job. The <code>JobId</code> is returned
            from <code>StartDocumentTextDetection</code>. A <code>JobId</code> value is only valid
            for 7 days.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.TXT.GetTXTDocumentTextDetectionCmdlet.MaxResult">
            <summary>
            <para>
            <para>The maximum number of results to return per paginated call. The largest value you
            can specify is 1,000. If you specify a value greater than 1,000, a maximum of 1,000
            results is returned. The default value is 1,000.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.TXT.GetTXTDocumentTextDetectionCmdlet.NextToken">
            <summary>
            <para>
            <para>If the previous response was incomplete (because there are more blocks to retrieve),
            Amazon Textract returns a pagination token in the response. You can use this pagination
            token to retrieve the next set of blocks.</para>
            </para>
            <para>
            <br/><b>Note:</b> In the AWS.Tools.Textract module, this parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.TXT.GetTXTDocumentTextDetectionCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Textract.Model.GetDocumentTextDetectionResponse).
            Specifying the name of a property of type Amazon.Textract.Model.GetDocumentTextDetectionResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.TXT.GetTXTDocumentTextDetectionCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the JobId parameter.
            The -PassThru parameter is deprecated, use -Select '^JobId' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.TXT.GetTXTDocumentTextDetectionCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.TXT.InvokeTXTDocumentAnalysisCmdlet">
            <summary>
            Analyzes an input document for relationships between detected items. 
            
             
            <para>
            The types of information returned are as follows: 
            </para><ul><li><para>
            Form data (key-value pairs). The related information is returned in two <a>Block</a>
            objects, each of type <code>KEY_VALUE_SET</code>: a KEY <code>Block</code> object
            and a VALUE <code>Block</code> object. For example, <i>Name: Ana Silva Carolina</i>
            contains a key and value. <i>Name:</i> is the key. <i>Ana Silva Carolina</i> is the
            value.
            </para></li><li><para>
            Table and table cell data. A TABLE <code>Block</code> object contains information
            about a detected table. A CELL <code>Block</code> object is returned for each cell
            in a table.
            </para></li><li><para>
            Lines and words of text. A LINE <code>Block</code> object contains one or more WORD
            <code>Block</code> objects. All lines and words that are detected in the document
            are returned (including text that doesn't have a relationship with the value of <code>FeatureTypes</code>).
            
            </para></li></ul><para>
            Selection elements such as check boxes and option buttons (radio buttons) can be detected
            in form data and in tables. A SELECTION_ELEMENT <code>Block</code> object contains
            information about a selection element, including the selection status.
            </para><para>
            You can choose which type of analysis to perform by specifying the <code>FeatureTypes</code>
            list. 
            </para><para>
            The output is returned in a list of <code>Block</code> objects.
            </para><para><code>AnalyzeDocument</code> is a synchronous operation. To analyze documents asynchronously,
            use <a>StartDocumentAnalysis</a>.
            </para><para>
            For more information, see <a href="https://docs.aws.amazon.com/textract/latest/dg/how-it-works-analyzing.html">Document
            Text Analysis</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.TXT.InvokeTXTDocumentAnalysisCmdlet.S3Object_Bucket">
            <summary>
            <para>
            <para>The name of the S3 bucket.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.TXT.InvokeTXTDocumentAnalysisCmdlet.Document_Byte">
            <summary>
            <para>
            <para>A blob of base64-encoded document bytes. The maximum size of a document that's provided
            in a blob of bytes is 5 MB. The document bytes must be in PNG or JPEG format.</para><para>If you're using an AWS SDK to call Amazon Textract, you might not need to base64-encode
            image bytes passed using the <code>Bytes</code> field. </para>
            </para>
            <para>The cmdlet will automatically convert the supplied parameter of type string, string[], System.IO.FileInfo or System.IO.Stream to byte[] before supplying it to the service.</para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.TXT.InvokeTXTDocumentAnalysisCmdlet.DataAttributes_ContentClassifier">
            <summary>
            <para>
            <para>Sets whether the input image is free of personally identifiable information or adult
            content.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.TXT.InvokeTXTDocumentAnalysisCmdlet.FeatureType">
            <summary>
            <para>
            <para>A list of the types of analysis to perform. Add TABLES to the list to return information
            about the tables that are detected in the input document. Add FORMS to return detected
            form data. To perform both types of analysis, add TABLES and FORMS to <code>FeatureTypes</code>.
            All lines and words detected in the document are included in the response (including
            text that isn't related to the value of <code>FeatureTypes</code>). </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.TXT.InvokeTXTDocumentAnalysisCmdlet.HumanLoopConfig_FlowDefinitionArn">
            <summary>
            <para>
            <para>The Amazon Resource Name (ARN) of the flow definition.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.TXT.InvokeTXTDocumentAnalysisCmdlet.HumanLoopConfig_HumanLoopName">
            <summary>
            <para>
            <para>The name of the human workflow used for this image. This should be kept unique within
            a region.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.TXT.InvokeTXTDocumentAnalysisCmdlet.S3Object_Name">
            <summary>
            <para>
            <para>The file name of the input document. Synchronous operations can use image files that
            are in JPEG or PNG format. Asynchronous operations also support PDF format files.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.TXT.InvokeTXTDocumentAnalysisCmdlet.S3Object_Version">
            <summary>
            <para>
            <para>If the bucket has versioning enabled, you can specify the object version. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.TXT.InvokeTXTDocumentAnalysisCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'Blocks'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Textract.Model.AnalyzeDocumentResponse).
            Specifying the name of a property of type Amazon.Textract.Model.AnalyzeDocumentResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.TXT.InvokeTXTDocumentAnalysisCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.TXT.StartTXTDocumentAnalysisCmdlet">
            <summary>
            Starts the asynchronous analysis of an input document for relationships between detected
            items such as key-value pairs, tables, and selection elements.
            
             
            <para><code>StartDocumentAnalysis</code> can analyze text in documents that are in JPEG,
            PNG, and PDF format. The documents are stored in an Amazon S3 bucket. Use <a>DocumentLocation</a>
            to specify the bucket name and file name of the document. 
            </para><para><code>StartDocumentAnalysis</code> returns a job identifier (<code>JobId</code>)
            that you use to get the results of the operation. When text analysis is finished,
            Amazon Textract publishes a completion status to the Amazon Simple Notification Service
            (Amazon SNS) topic that you specify in <code>NotificationChannel</code>. To get the
            results of the text analysis operation, first check that the status value published
            to the Amazon SNS topic is <code>SUCCEEDED</code>. If so, call <a>GetDocumentAnalysis</a>,
            and pass the job identifier (<code>JobId</code>) from the initial call to <code>StartDocumentAnalysis</code>.
            </para><para>
            For more information, see <a href="https://docs.aws.amazon.com/textract/latest/dg/how-it-works-analyzing.html">Document
            Text Analysis</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.TXT.StartTXTDocumentAnalysisCmdlet.S3Object_Bucket">
            <summary>
            <para>
            <para>The name of the S3 bucket.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.TXT.StartTXTDocumentAnalysisCmdlet.ClientRequestToken">
            <summary>
            <para>
            <para>The idempotent token that you use to identify the start request. If you use the same
            token with multiple <code>StartDocumentAnalysis</code> requests, the same <code>JobId</code>
            is returned. Use <code>ClientRequestToken</code> to prevent the same job from being
            accidentally started more than once. For more information, see <a href="https://docs.aws.amazon.com/textract/latest/dg/api-async.html">Calling
            Amazon Textract Asynchronous Operations</a>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.TXT.StartTXTDocumentAnalysisCmdlet.FeatureType">
            <summary>
            <para>
            <para>A list of the types of analysis to perform. Add TABLES to the list to return information
            about the tables that are detected in the input document. Add FORMS to return detected
            form data. To perform both types of analysis, add TABLES and FORMS to <code>FeatureTypes</code>.
            All lines and words detected in the document are included in the response (including
            text that isn't related to the value of <code>FeatureTypes</code>). </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.TXT.StartTXTDocumentAnalysisCmdlet.JobTag">
            <summary>
            <para>
            <para>An identifier that you specify that's included in the completion notification published
            to the Amazon SNS topic. For example, you can use <code>JobTag</code> to identify
            the type of document that the completion notification corresponds to (such as a tax
            form or a receipt).</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.TXT.StartTXTDocumentAnalysisCmdlet.S3Object_Name">
            <summary>
            <para>
            <para>The file name of the input document. Synchronous operations can use image files that
            are in JPEG or PNG format. Asynchronous operations also support PDF format files.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.TXT.StartTXTDocumentAnalysisCmdlet.NotificationChannel_RoleArn">
            <summary>
            <para>
            <para>The Amazon Resource Name (ARN) of an IAM role that gives Amazon Textract publishing
            permissions to the Amazon SNS topic. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.TXT.StartTXTDocumentAnalysisCmdlet.NotificationChannel_SNSTopicArn">
            <summary>
            <para>
            <para>The Amazon SNS topic that Amazon Textract posts the completion status to.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.TXT.StartTXTDocumentAnalysisCmdlet.S3Object_Version">
            <summary>
            <para>
            <para>If the bucket has versioning enabled, you can specify the object version. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.TXT.StartTXTDocumentAnalysisCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'JobId'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Textract.Model.StartDocumentAnalysisResponse).
            Specifying the name of a property of type Amazon.Textract.Model.StartDocumentAnalysisResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.TXT.StartTXTDocumentAnalysisCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the FeatureType parameter.
            The -PassThru parameter is deprecated, use -Select '^FeatureType' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.TXT.StartTXTDocumentAnalysisCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.TXT.StartTXTDocumentTextDetectionCmdlet">
            <summary>
            Starts the asynchronous detection of text in a document. Amazon Textract can detect
            lines of text and the words that make up a line of text.
            
             
            <para><code>StartDocumentTextDetection</code> can analyze text in documents that are in
            JPEG, PNG, and PDF format. The documents are stored in an Amazon S3 bucket. Use <a>DocumentLocation</a>
            to specify the bucket name and file name of the document. 
            </para><para><code>StartTextDetection</code> returns a job identifier (<code>JobId</code>) that
            you use to get the results of the operation. When text detection is finished, Amazon
            Textract publishes a completion status to the Amazon Simple Notification Service (Amazon
            SNS) topic that you specify in <code>NotificationChannel</code>. To get the results
            of the text detection operation, first check that the status value published to the
            Amazon SNS topic is <code>SUCCEEDED</code>. If so, call <a>GetDocumentTextDetection</a>,
            and pass the job identifier (<code>JobId</code>) from the initial call to <code>StartDocumentTextDetection</code>.
            </para><para>
            For more information, see <a href="https://docs.aws.amazon.com/textract/latest/dg/how-it-works-detecting.html">Document
            Text Detection</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.TXT.StartTXTDocumentTextDetectionCmdlet.S3Object_Bucket">
            <summary>
            <para>
            <para>The name of the S3 bucket.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.TXT.StartTXTDocumentTextDetectionCmdlet.ClientRequestToken">
            <summary>
            <para>
            <para>The idempotent token that's used to identify the start request. If you use the same
            token with multiple <code>StartDocumentTextDetection</code> requests, the same <code>JobId</code>
            is returned. Use <code>ClientRequestToken</code> to prevent the same job from being
            accidentally started more than once. For more information, see <a href="https://docs.aws.amazon.com/textract/latest/dg/api-async.html">Calling
            Amazon Textract Asynchronous Operations</a>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.TXT.StartTXTDocumentTextDetectionCmdlet.JobTag">
            <summary>
            <para>
            <para>An identifier that you specify that's included in the completion notification published
            to the Amazon SNS topic. For example, you can use <code>JobTag</code> to identify
            the type of document that the completion notification corresponds to (such as a tax
            form or a receipt).</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.TXT.StartTXTDocumentTextDetectionCmdlet.S3Object_Name">
            <summary>
            <para>
            <para>The file name of the input document. Synchronous operations can use image files that
            are in JPEG or PNG format. Asynchronous operations also support PDF format files.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.TXT.StartTXTDocumentTextDetectionCmdlet.NotificationChannel_RoleArn">
            <summary>
            <para>
            <para>The Amazon Resource Name (ARN) of an IAM role that gives Amazon Textract publishing
            permissions to the Amazon SNS topic. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.TXT.StartTXTDocumentTextDetectionCmdlet.NotificationChannel_SNSTopicArn">
            <summary>
            <para>
            <para>The Amazon SNS topic that Amazon Textract posts the completion status to.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.TXT.StartTXTDocumentTextDetectionCmdlet.S3Object_Version">
            <summary>
            <para>
            <para>If the bucket has versioning enabled, you can specify the object version. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.TXT.StartTXTDocumentTextDetectionCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'JobId'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Textract.Model.StartDocumentTextDetectionResponse).
            Specifying the name of a property of type Amazon.Textract.Model.StartDocumentTextDetectionResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.TXT.StartTXTDocumentTextDetectionCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
    </members>
</doc>
