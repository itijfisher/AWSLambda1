<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AWS.Tools.CostExplorer</name>
    </assembly>
    <members>
        <member name="T:Amazon.PowerShell.Cmdlets.CE.GetCECostAndUsageCmdlet">
            <summary>
            Retrieves cost and usage metrics for your account. You can specify which cost and
            usage-related metric, such as <code>BlendedCosts</code> or <code>UsageQuantity</code>,
            that you want the request to return. You can also filter and group your data by various
            dimensions, such as <code>SERVICE</code> or <code>AZ</code>, in a specific time range.
            For a complete list of valid dimensions, see the <a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_GetDimensionValues.html">GetDimensionValues</a>
            operation. Master accounts in an organization in AWS Organizations have access to
            all member accounts.<br/><br/>In the AWS.Tools.CostExplorer module, this cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCECostAndUsageCmdlet.Filter">
            <summary>
            <para>
            <para>Filters AWS costs by different dimensions. For example, you can specify <code>SERVICE</code>
            and <code>LINKED_ACCOUNT</code> and get the costs that are associated with that account's
            usage of that service. You can nest <code>Expression</code> objects to define any
            combination of dimension filters. For more information, see <a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_Expression.html">Expression</a>.
            </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCECostAndUsageCmdlet.Granularity">
            <summary>
            <para>
            <para>Sets the AWS cost granularity to <code>MONTHLY</code> or <code>DAILY</code>, or <code>HOURLY</code>.
            If <code>Granularity</code> isn't set, the response object doesn't include the <code>Granularity</code>,
            either <code>MONTHLY</code> or <code>DAILY</code>, or <code>HOURLY</code>. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCECostAndUsageCmdlet.GroupBy">
            <summary>
            <para>
            <para>You can group AWS costs using up to two different groups, either dimensions, tag keys,
            or both.</para><para>When you group by tag key, you get all tag values, including empty strings.</para><para>Valid values are <code>AZ</code>, <code>INSTANCE_TYPE</code>, <code>LEGAL_ENTITY_NAME</code>,
            <code>LINKED_ACCOUNT</code>, <code>OPERATION</code>, <code>PLATFORM</code>, <code>PURCHASE_TYPE</code>,
            <code>SERVICE</code>, <code>TAGS</code>, <code>TENANCY</code>, <code>RECORD_TYPE</code>,
            and <code>USAGE_TYPE</code>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCECostAndUsageCmdlet.Metric">
            <summary>
            <para>
            <para>Which metrics are returned in the query. For more information about blended and unblended
            rates, see <a href="http://aws.amazon.com/premiumsupport/knowledge-center/blended-rates-intro/">Why
            does the "blended" annotation appear on some line items in my bill?</a>. </para><para>Valid values are <code>AmortizedCost</code>, <code>BlendedCost</code>, <code>NetAmortizedCost</code>,
            <code>NetUnblendedCost</code>, <code>NormalizedUsageAmount</code>, <code>UnblendedCost</code>,
            and <code>UsageQuantity</code>. </para><note><para>If you return the <code>UsageQuantity</code> metric, the service aggregates all usage
            numbers without taking into account the units. For example, if you aggregate <code>usageQuantity</code>
            across all of Amazon EC2, the results aren't meaningful because Amazon EC2 compute
            hours and data transfer are measured in different units (for example, hours vs. GB).
            To get more meaningful <code>UsageQuantity</code> metrics, filter by <code>UsageType</code>
            or <code>UsageTypeGroups</code>. </para></note><para><code>Metrics</code> is required for <code>GetCostAndUsage</code> requests.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCECostAndUsageCmdlet.TimePeriod">
            <summary>
            <para>
            <para>Sets the start and end dates for retrieving AWS costs. The start date is inclusive,
            but the end date is exclusive. For example, if <code>start</code> is <code>2017-01-01</code>
            and <code>end</code> is <code>2017-05-01</code>, then the cost and usage data is retrieved
            from <code>2017-01-01</code> up to and including <code>2017-04-30</code> but not including
            <code>2017-05-01</code>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCECostAndUsageCmdlet.NextPageToken">
            <summary>
            <para>
            <para>The token to retrieve the next set of results. AWS provides the token when the response
            from a previous call has more results than the maximum page size.</para>
            </para>
            <para>
            <br/><b>Note:</b> In the AWS.Tools.CostExplorer module, this parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextPageToken $null' for the first call and '-NextPageToken $AWSHistory.LastServiceResponse.NextPageToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCECostAndUsageCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.CostExplorer.Model.GetCostAndUsageResponse).
            Specifying the name of a property of type Amazon.CostExplorer.Model.GetCostAndUsageResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCECostAndUsageCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the TimePeriod parameter.
            The -PassThru parameter is deprecated, use -Select '^TimePeriod' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCECostAndUsageCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextPageToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CE.GetCECostAndUsageWithResourceCmdlet">
            <summary>
            Retrieves cost and usage metrics with resources for your account. You can specify
            which cost and usage-related metric, such as <code>BlendedCosts</code> or <code>UsageQuantity</code>,
            that you want the request to return. You can also filter and group your data by various
            dimensions, such as <code>SERVICE</code> or <code>AZ</code>, in a specific time range.
            For a complete list of valid dimensions, see the <a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_GetDimensionValues.html">GetDimensionValues</a>
            operation. Master accounts in an organization in AWS Organizations have access to
            all member accounts. This API is currently available for the Amazon Elastic Compute
            Cloud â€“ Compute service only.
            
             <note><para>
            This is an opt-in only feature. You can enable this feature from the Cost Explorer
            Settings page. For information on how to access the Settings page, see <a href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/ce-access.html">Controlling
            Access for Cost Explorer</a> in the <i>AWS Billing and Cost Management User Guide</i>.
            </para></note><br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCECostAndUsageWithResourceCmdlet.Filter">
            <summary>
            <para>
            <para>Filters Amazon Web Services costs by different dimensions. For example, you can specify
            <code>SERVICE</code> and <code>LINKED_ACCOUNT</code> and get the costs that are associated
            with that account's usage of that service. You can nest <code>Expression</code> objects
            to define any combination of dimension filters. For more information, see <a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_Expression.html">Expression</a>.
            </para><para>The <code>GetCostAndUsageWithResources</code> operation requires that you either group
            by or filter by a <code>ResourceId</code>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCECostAndUsageWithResourceCmdlet.Granularity">
            <summary>
            <para>
            <para>Sets the AWS cost granularity to <code>MONTHLY</code>, <code>DAILY</code>, or <code>HOURLY</code>.
            If <code>Granularity</code> isn't set, the response object doesn't include the <code>Granularity</code>,
            <code>MONTHLY</code>, <code>DAILY</code>, or <code>HOURLY</code>. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCECostAndUsageWithResourceCmdlet.GroupBy">
            <summary>
            <para>
            <para>You can group Amazon Web Services costs using up to two different groups: either dimensions,
            tag keys, or both.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCECostAndUsageWithResourceCmdlet.Metric">
            <summary>
            <para>
            <para>Which metrics are returned in the query. For more information about blended and unblended
            rates, see <a href="http://aws.amazon.com/premiumsupport/knowledge-center/blended-rates-intro/">Why
            does the "blended" annotation appear on some line items in my bill?</a>. </para><para>Valid values are <code>AmortizedCost</code>, <code>BlendedCost</code>, <code>NetAmortizedCost</code>,
            <code>NetUnblendedCost</code>, <code>NormalizedUsageAmount</code>, <code>UnblendedCost</code>,
            and <code>UsageQuantity</code>. </para><note><para>If you return the <code>UsageQuantity</code> metric, the service aggregates all usage
            numbers without taking the units into account. For example, if you aggregate <code>usageQuantity</code>
            across all of Amazon EC2, the results aren't meaningful because Amazon EC2 compute
            hours and data transfer are measured in different units (for example, hours vs. GB).
            To get more meaningful <code>UsageQuantity</code> metrics, filter by <code>UsageType</code>
            or <code>UsageTypeGroups</code>. </para></note><para><code>Metrics</code> is required for <code>GetCostAndUsageWithResources</code> requests.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCECostAndUsageWithResourceCmdlet.TimePeriod">
            <summary>
            <para>
            <para>Sets the start and end dates for retrieving Amazon Web Services costs. The range must
            be within the last 14 days (the start date cannot be earlier than 14 days ago). The
            start date is inclusive, but the end date is exclusive. For example, if <code>start</code>
            is <code>2017-01-01</code> and <code>end</code> is <code>2017-05-01</code>, then the
            cost and usage data is retrieved from <code>2017-01-01</code> up to and including
            <code>2017-04-30</code> but not including <code>2017-05-01</code>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCECostAndUsageWithResourceCmdlet.NextPageToken">
            <summary>
            <para>
            <para>The token to retrieve the next set of results. AWS provides the token when the response
            from a previous call has more results than the maximum page size.</para>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextPageToken $null' for the first call and '-NextPageToken $AWSHistory.LastServiceResponse.NextPageToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCECostAndUsageWithResourceCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.CostExplorer.Model.GetCostAndUsageWithResourcesResponse).
            Specifying the name of a property of type Amazon.CostExplorer.Model.GetCostAndUsageWithResourcesResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCECostAndUsageWithResourceCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the TimePeriod parameter.
            The -PassThru parameter is deprecated, use -Select '^TimePeriod' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCECostAndUsageWithResourceCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextPageToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CE.GetCECostCategoryDefinitionCmdlet">
            <summary>
            Returns the name, ARN, rules, definition, and effective dates of a Cost Category that's
            defined in the account.
            
             
            <para>
            You have the option to use <code>EffectiveOn</code> to return a Cost Category that
            is active on a specific date. If there is no <code>EffectiveOn</code> specified, youâ€™ll
            see a Cost Category that is effective on the current date. If Cost Category is still
            effective, <code>EffectiveEnd</code> is omitted in the response. 
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCECostCategoryDefinitionCmdlet.CostCategoryArn">
            <summary>
            <para>
            <para> The unique identifier for your Cost Category. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCECostCategoryDefinitionCmdlet.EffectiveOn">
            <summary>
            <para>
            <para> The date when the Cost Category was effective. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCECostCategoryDefinitionCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'CostCategory'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.CostExplorer.Model.DescribeCostCategoryDefinitionResponse).
            Specifying the name of a property of type Amazon.CostExplorer.Model.DescribeCostCategoryDefinitionResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCECostCategoryDefinitionCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the CostCategoryArn parameter.
            The -PassThru parameter is deprecated, use -Select '^CostCategoryArn' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CE.GetCECostCategoryDefinitionListCmdlet">
            <summary>
            Returns the name, ARN, <code>NumberOfRules</code> and effective dates of all Cost
            Categories defined in the account. You have the option to use <code>EffectiveOn</code>
            to return a list of Cost Categories that were active on a specific date. If there
            is no <code>EffectiveOn</code> specified, youâ€™ll see Cost Categories that are effective
            on the current date. If Cost Category is still effective, <code>EffectiveEnd</code>
            is omitted in the response. <code>ListCostCategoryDefinitions</code> supports pagination.
            The request can have a <code>MaxResults</code> range up to 100.<br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCECostCategoryDefinitionListCmdlet.EffectiveOn">
            <summary>
            <para>
            <para> The date when the Cost Category was effective. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCECostCategoryDefinitionListCmdlet.MaxResult">
            <summary>
            <para>
            <para> The number of entries a paginated response contains. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCECostCategoryDefinitionListCmdlet.NextToken">
            <summary>
            <para>
            <para> The token to retrieve the next set of results. Amazon Web Services provides the token
            when the response from a previous call has more results than the maximum page size.
            </para>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCECostCategoryDefinitionListCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'CostCategoryReferences'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.CostExplorer.Model.ListCostCategoryDefinitionsResponse).
            Specifying the name of a property of type Amazon.CostExplorer.Model.ListCostCategoryDefinitionsResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCECostCategoryDefinitionListCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CE.GetCECostForecastCmdlet">
            <summary>
            Retrieves a forecast for how much Amazon Web Services predicts that you will spend
            over the forecast time period that you select, based on your past costs.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCECostForecastCmdlet.Filter">
            <summary>
            <para>
            <para>The filters that you want to use to filter your forecast. Cost Explorer API supports
            all of the Cost Explorer filters.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCECostForecastCmdlet.Granularity">
            <summary>
            <para>
            <para>How granular you want the forecast to be. You can get 3 months of <code>DAILY</code>
            forecasts or 12 months of <code>MONTHLY</code> forecasts.</para><para>The <code>GetCostForecast</code> operation supports only <code>DAILY</code> and <code>MONTHLY</code>
            granularities.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCECostForecastCmdlet.Metric">
            <summary>
            <para>
            <para>Which metric Cost Explorer uses to create your forecast. For more information about
            blended and unblended rates, see <a href="http://aws.amazon.com/premiumsupport/knowledge-center/blended-rates-intro/">Why
            does the "blended" annotation appear on some line items in my bill?</a>. </para><para>Valid values for a <code>GetCostForecast</code> call are the following:</para><ul><li><para>AMORTIZED_COST</para></li><li><para>BLENDED_COST</para></li><li><para>NET_AMORTIZED_COST</para></li><li><para>NET_UNBLENDED_COST</para></li><li><para>UNBLENDED_COST</para></li></ul>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCECostForecastCmdlet.PredictionIntervalLevel">
            <summary>
            <para>
            <para>Cost Explorer always returns the mean forecast as a single point. You can request
            a prediction interval around the mean by specifying a confidence level. The higher
            the confidence level, the more confident Cost Explorer is about the actual value falling
            in the prediction interval. Higher confidence levels result in wider prediction intervals.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCECostForecastCmdlet.TimePeriod">
            <summary>
            <para>
            <para>The period of time that you want the forecast to cover.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCECostForecastCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.CostExplorer.Model.GetCostForecastResponse).
            Specifying the name of a property of type Amazon.CostExplorer.Model.GetCostForecastResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCECostForecastCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the TimePeriod parameter.
            The -PassThru parameter is deprecated, use -Select '^TimePeriod' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CE.GetCEDimensionValueCmdlet">
            <summary>
            Retrieves all available filter values for a specified filter over a period of time.
            You can search the dimension values for an arbitrary string.<br/><br/>In the AWS.Tools.CostExplorer module, this cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCEDimensionValueCmdlet.Context">
            <summary>
            <para>
            <para>The context for the call to <code>GetDimensionValues</code>. This can be <code>RESERVATIONS</code>
            or <code>COST_AND_USAGE</code>. The default value is <code>COST_AND_USAGE</code>.
            If the context is set to <code>RESERVATIONS</code>, the resulting dimension values
            can be used in the <code>GetReservationUtilization</code> operation. If the context
            is set to <code>COST_AND_USAGE</code>, the resulting dimension values can be used
            in the <code>GetCostAndUsage</code> operation.</para><para>If you set the context to <code>COST_AND_USAGE</code>, you can use the following dimensions
            for searching:</para><ul><li><para>AZ - The Availability Zone. An example is <code>us-east-1a</code>.</para></li><li><para>DATABASE_ENGINE - The Amazon Relational Database Service database. Examples are Aurora
            or MySQL.</para></li><li><para>INSTANCE_TYPE - The type of Amazon EC2 instance. An example is <code>m4.xlarge</code>.</para></li><li><para>LEGAL_ENTITY_NAME - The name of the organization that sells you AWS services, such
            as Amazon Web Services.</para></li><li><para>LINKED_ACCOUNT - The description in the attribute map that includes the full name
            of the member account. The value field contains the AWS ID of the member account.</para></li><li><para>OPERATING_SYSTEM - The operating system. Examples are Windows or Linux.</para></li><li><para>OPERATION - The action performed. Examples include <code>RunInstance</code> and <code>CreateBucket</code>.</para></li><li><para>PLATFORM - The Amazon EC2 operating system. Examples are Windows or Linux.</para></li><li><para>PURCHASE_TYPE - The reservation type of the purchase to which this usage is related.
            Examples include On-Demand Instances and Standard Reserved Instances.</para></li><li><para>SERVICE - The AWS service such as Amazon DynamoDB.</para></li><li><para>USAGE_TYPE - The type of usage. An example is DataTransfer-In-Bytes. The response
            for the <code>GetDimensionValues</code> operation includes a unit attribute. Examples
            include GB and Hrs.</para></li><li><para>USAGE_TYPE_GROUP - The grouping of common usage types. An example is Amazon EC2: CloudWatch
            â€“ Alarms. The response for this operation includes a unit attribute.</para></li><li><para>RECORD_TYPE - The different types of charges such as RI fees, usage costs, tax refunds,
            and credits.</para></li><li><para>RESOURCE_ID - The unique identifier of the resource. ResourceId is an opt-in feature
            only available for last 14 days for EC2-Compute Service.</para></li></ul><para>If you set the context to <code>RESERVATIONS</code>, you can use the following dimensions
            for searching:</para><ul><li><para>AZ - The Availability Zone. An example is <code>us-east-1a</code>.</para></li><li><para>CACHE_ENGINE - The Amazon ElastiCache operating system. Examples are Windows or Linux.</para></li><li><para>DEPLOYMENT_OPTION - The scope of Amazon Relational Database Service deployments. Valid
            values are <code>SingleAZ</code> and <code>MultiAZ</code>.</para></li><li><para>INSTANCE_TYPE - The type of Amazon EC2 instance. An example is <code>m4.xlarge</code>.</para></li><li><para>LINKED_ACCOUNT - The description in the attribute map that includes the full name
            of the member account. The value field contains the AWS ID of the member account.</para></li><li><para>PLATFORM - The Amazon EC2 operating system. Examples are Windows or Linux.</para></li><li><para>REGION - The AWS Region.</para></li><li><para>SCOPE (Utilization only) - The scope of a Reserved Instance (RI). Values are regional
            or a single Availability Zone.</para></li><li><para>TAG (Coverage only) - The tags that are associated with a Reserved Instance (RI).</para></li><li><para>TENANCY - The tenancy of a resource. Examples are shared or dedicated.</para></li></ul><para>If you set the context to <code>SAVINGS_PLANS</code>, you can use the following dimensions
            for searching:</para><ul><li><para>SAVINGS_PLANS_TYPE - Type of Savings Plans (EC2 Instance or Compute)</para></li><li><para>PAYMENT_OPTION - Payment option for the given Savings Plans (for example, All Upfront)</para></li><li><para>REGION - The AWS Region.</para></li><li><para>INSTANCE_TYPE_FAMILY - The family of instances (For example, <code>m5</code>)</para></li><li><para>LINKED_ACCOUNT - The description in the attribute map that includes the full name
            of the member account. The value field contains the AWS ID of the member account.</para></li><li><para>SAVINGS_PLAN_ARN - The unique identifier for your Savings Plan</para></li></ul>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCEDimensionValueCmdlet.Dimension">
            <summary>
            <para>
            <para>The name of the dimension. Each <code>Dimension</code> is available for a different
            <code>Context</code>. For more information, see <code>Context</code>. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCEDimensionValueCmdlet.SearchString">
            <summary>
            <para>
            <para>The value that you want to search the filter values for.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCEDimensionValueCmdlet.TimePeriod">
            <summary>
            <para>
            <para>The start and end dates for retrieving the dimension values. The start date is inclusive,
            but the end date is exclusive. For example, if <code>start</code> is <code>2017-01-01</code>
            and <code>end</code> is <code>2017-05-01</code>, then the cost and usage data is retrieved
            from <code>2017-01-01</code> up to and including <code>2017-04-30</code> but not including
            <code>2017-05-01</code>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCEDimensionValueCmdlet.NextPageToken">
            <summary>
            <para>
            <para>The token to retrieve the next set of results. AWS provides the token when the response
            from a previous call has more results than the maximum page size.</para>
            </para>
            <para>
            <br/><b>Note:</b> In the AWS.Tools.CostExplorer module, this parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextPageToken $null' for the first call and '-NextPageToken $AWSHistory.LastServiceResponse.NextPageToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCEDimensionValueCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.CostExplorer.Model.GetDimensionValuesResponse).
            Specifying the name of a property of type Amazon.CostExplorer.Model.GetDimensionValuesResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCEDimensionValueCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the TimePeriod parameter.
            The -PassThru parameter is deprecated, use -Select '^TimePeriod' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCEDimensionValueCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextPageToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CE.GetCEReservationCoverageCmdlet">
            <summary>
            Retrieves the reservation coverage for your account. This enables you to see how much
            of your Amazon Elastic Compute Cloud, Amazon ElastiCache, Amazon Relational Database
            Service, or Amazon Redshift usage is covered by a reservation. An organization's master
            account can see the coverage of the associated member accounts. This supports dimensions,
            Cost Categories, and nested expressions. For any time period, you can filter data
            about reservation usage by the following dimensions:
            
             <ul><li><para>
            AZ
            </para></li><li><para>
            CACHE_ENGINE
            </para></li><li><para>
            DATABASE_ENGINE
            </para></li><li><para>
            DEPLOYMENT_OPTION
            </para></li><li><para>
            INSTANCE_TYPE
            </para></li><li><para>
            LINKED_ACCOUNT
            </para></li><li><para>
            OPERATING_SYSTEM
            </para></li><li><para>
            PLATFORM
            </para></li><li><para>
            REGION
            </para></li><li><para>
            SERVICE
            </para></li><li><para>
            TAG
            </para></li><li><para>
            TENANCY
            </para></li></ul><para>
            To determine valid values for a dimension, use the <code>GetDimensionValues</code>
            operation. 
            </para><br/><br/>In the AWS.Tools.CostExplorer module, this cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCEReservationCoverageCmdlet.Filter">
            <summary>
            <para>
            <para>Filters utilization data by dimensions. You can filter by the following dimensions:</para><ul><li><para>AZ</para></li><li><para>CACHE_ENGINE</para></li><li><para>DATABASE_ENGINE</para></li><li><para>DEPLOYMENT_OPTION</para></li><li><para>INSTANCE_TYPE</para></li><li><para>LINKED_ACCOUNT</para></li><li><para>OPERATING_SYSTEM</para></li><li><para>PLATFORM</para></li><li><para>REGION</para></li><li><para>SERVICE</para></li><li><para>TAG</para></li><li><para>TENANCY</para></li></ul><para><code>GetReservationCoverage</code> uses the same <a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_Expression.html">Expression</a>
            object as the other operations, but only <code>AND</code> is supported among each
            dimension. You can nest only one level deep. If there are multiple values for a dimension,
            they are OR'd together.</para><para>If you don't provide a <code>SERVICE</code> filter, Cost Explorer defaults to EC2.</para><para>Cost category is also supported.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCEReservationCoverageCmdlet.Granularity">
            <summary>
            <para>
            <para>The granularity of the AWS cost data for the reservation. Valid values are <code>MONTHLY</code>
            and <code>DAILY</code>.</para><para>If <code>GroupBy</code> is set, <code>Granularity</code> can't be set. If <code>Granularity</code>
            isn't set, the response object doesn't include <code>Granularity</code>, either <code>MONTHLY</code>
            or <code>DAILY</code>.</para><para>The <code>GetReservationCoverage</code> operation supports only <code>DAILY</code>
            and <code>MONTHLY</code> granularities.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCEReservationCoverageCmdlet.GroupBy">
            <summary>
            <para>
            <para>You can group the data by the following attributes:</para><ul><li><para>AZ</para></li><li><para>CACHE_ENGINE</para></li><li><para>DATABASE_ENGINE</para></li><li><para>DEPLOYMENT_OPTION</para></li><li><para>INSTANCE_TYPE</para></li><li><para>LINKED_ACCOUNT</para></li><li><para>OPERATING_SYSTEM</para></li><li><para>PLATFORM</para></li><li><para>REGION</para></li><li><para>TENANCY</para></li></ul>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCEReservationCoverageCmdlet.Metric">
            <summary>
            <para>
            <para>The measurement that you want your reservation coverage reported in.</para><para>Valid values are <code>Hour</code>, <code>Unit</code>, and <code>Cost</code>. You
            can use multiple values in a request.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCEReservationCoverageCmdlet.TimePeriod">
            <summary>
            <para>
            <para>The start and end dates of the period that you want to retrieve data about reservation
            coverage for. You can retrieve data for a maximum of 13 months: the last 12 months
            and the current month. The start date is inclusive, but the end date is exclusive.
            For example, if <code>start</code> is <code>2017-01-01</code> and <code>end</code>
            is <code>2017-05-01</code>, then the cost and usage data is retrieved from <code>2017-01-01</code>
            up to and including <code>2017-04-30</code> but not including <code>2017-05-01</code>.
            </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCEReservationCoverageCmdlet.NextPageToken">
            <summary>
            <para>
            <para>The token to retrieve the next set of results. AWS provides the token when the response
            from a previous call has more results than the maximum page size.</para>
            </para>
            <para>
            <br/><b>Note:</b> In the AWS.Tools.CostExplorer module, this parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextPageToken $null' for the first call and '-NextPageToken $AWSHistory.LastServiceResponse.NextPageToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCEReservationCoverageCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.CostExplorer.Model.GetReservationCoverageResponse).
            Specifying the name of a property of type Amazon.CostExplorer.Model.GetReservationCoverageResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCEReservationCoverageCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextPageToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CE.GetCEReservationPurchaseRecommendationCmdlet">
            <summary>
            Gets recommendations for which reservations to purchase. These recommendations could
            help you reduce your costs. Reservations provide a discounted hourly rate (up to 75%)
            compared to On-Demand pricing.
            
             
            <para>
            AWS generates your recommendations by identifying your On-Demand usage during a specific
            time period and collecting your usage into categories that are eligible for a reservation.
            After AWS has these categories, it simulates every combination of reservations in
            each category of usage to identify the best number of each type of RI to purchase
            to maximize your estimated savings. 
            </para><para>
            For example, AWS automatically aggregates your Amazon EC2 Linux, shared tenancy, and
            c4 family usage in the US West (Oregon) Region and recommends that you buy size-flexible
            regional reservations to apply to the c4 family usage. AWS recommends the smallest
            size instance in an instance family. This makes it easier to purchase a size-flexible
            RI. AWS also shows the equal number of normalized units so that you can purchase any
            instance size that you want. For this example, your RI recommendation would be for
            <code>c4.large</code> because that is the smallest size instance in the c4 instance
            family.
            </para><br/><br/>In the AWS.Tools.CostExplorer module, this cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCEReservationPurchaseRecommendationCmdlet.AccountId">
            <summary>
            <para>
            <para>The account ID that is associated with the recommendation. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCEReservationPurchaseRecommendationCmdlet.AccountScope">
            <summary>
            <para>
            <para>The account scope that you want your recommendations for. Amazon Web Services calculates
            recommendations including the payer account and linked accounts if the value is set
            to <code>PAYER</code>. If the value is <code>LINKED</code>, recommendations are calculated
            for individual linked accounts only.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCEReservationPurchaseRecommendationCmdlet.LookbackPeriodInDay">
            <summary>
            <para>
            <para>The number of previous days that you want AWS to consider when it calculates your
            recommendations.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCEReservationPurchaseRecommendationCmdlet.EC2Specification_OfferingClass">
            <summary>
            <para>
            <para>Whether you want a recommendation for standard or convertible reservations.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCEReservationPurchaseRecommendationCmdlet.PaymentOption">
            <summary>
            <para>
            <para>The reservation purchase option that you want recommendations for.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCEReservationPurchaseRecommendationCmdlet.Service">
            <summary>
            <para>
            <para>The specific service that you want recommendations for.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCEReservationPurchaseRecommendationCmdlet.TermInYear">
            <summary>
            <para>
            <para>The reservation term that you want recommendations for.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCEReservationPurchaseRecommendationCmdlet.NextPageToken">
            <summary>
            <para>
            <para>The pagination token that indicates the next set of results that you want to retrieve.</para>
            </para>
            <para>
            <br/><b>Note:</b> In the AWS.Tools.CostExplorer module, this parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextPageToken $null' for the first call and '-NextPageToken $AWSHistory.LastServiceResponse.NextPageToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCEReservationPurchaseRecommendationCmdlet.PageSize">
            <summary>
            <para>
            <para>The number of recommendations that you want returned in a single response object.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCEReservationPurchaseRecommendationCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.CostExplorer.Model.GetReservationPurchaseRecommendationResponse).
            Specifying the name of a property of type Amazon.CostExplorer.Model.GetReservationPurchaseRecommendationResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCEReservationPurchaseRecommendationCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the Service parameter.
            The -PassThru parameter is deprecated, use -Select '^Service' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCEReservationPurchaseRecommendationCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextPageToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CE.GetCEReservationUtilizationCmdlet">
            <summary>
            Retrieves the reservation utilization for your account. Master accounts in an organization
            have access to member accounts. You can filter data by dimensions in a time period.
            You can use <code>GetDimensionValues</code> to determine the possible dimension values.
            Currently, you can group only by <code>SUBSCRIPTION_ID</code>.<br/><br/>In the AWS.Tools.CostExplorer module, this cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCEReservationUtilizationCmdlet.Filter">
            <summary>
            <para>
            <para>Filters utilization data by dimensions. You can filter by the following dimensions:</para><ul><li><para>AZ</para></li><li><para>CACHE_ENGINE</para></li><li><para>DEPLOYMENT_OPTION</para></li><li><para>INSTANCE_TYPE</para></li><li><para>LINKED_ACCOUNT</para></li><li><para>OPERATING_SYSTEM</para></li><li><para>PLATFORM</para></li><li><para>REGION</para></li><li><para>SERVICE</para></li><li><para>SCOPE</para></li><li><para>TENANCY</para></li></ul><para><code>GetReservationUtilization</code> uses the same <a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_Expression.html">Expression</a>
            object as the other operations, but only <code>AND</code> is supported among each
            dimension, and nesting is supported up to only one level deep. If there are multiple
            values for a dimension, they are OR'd together.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCEReservationUtilizationCmdlet.Granularity">
            <summary>
            <para>
            <para>If <code>GroupBy</code> is set, <code>Granularity</code> can't be set. If <code>Granularity</code>
            isn't set, the response object doesn't include <code>Granularity</code>, either <code>MONTHLY</code>
            or <code>DAILY</code>. If both <code>GroupBy</code> and <code>Granularity</code> aren't
            set, <code>GetReservationUtilization</code> defaults to <code>DAILY</code>.</para><para>The <code>GetReservationUtilization</code> operation supports only <code>DAILY</code>
            and <code>MONTHLY</code> granularities.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCEReservationUtilizationCmdlet.GroupBy">
            <summary>
            <para>
            <para>Groups only by <code>SUBSCRIPTION_ID</code>. Metadata is included.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCEReservationUtilizationCmdlet.TimePeriod">
            <summary>
            <para>
            <para>Sets the start and end dates for retrieving RI utilization. The start date is inclusive,
            but the end date is exclusive. For example, if <code>start</code> is <code>2017-01-01</code>
            and <code>end</code> is <code>2017-05-01</code>, then the cost and usage data is retrieved
            from <code>2017-01-01</code> up to and including <code>2017-04-30</code> but not including
            <code>2017-05-01</code>. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCEReservationUtilizationCmdlet.NextPageToken">
            <summary>
            <para>
            <para>The token to retrieve the next set of results. AWS provides the token when the response
            from a previous call has more results than the maximum page size.</para>
            </para>
            <para>
            <br/><b>Note:</b> In the AWS.Tools.CostExplorer module, this parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextPageToken $null' for the first call and '-NextPageToken $AWSHistory.LastServiceResponse.NextPageToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCEReservationUtilizationCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.CostExplorer.Model.GetReservationUtilizationResponse).
            Specifying the name of a property of type Amazon.CostExplorer.Model.GetReservationUtilizationResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCEReservationUtilizationCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the TimePeriod parameter.
            The -PassThru parameter is deprecated, use -Select '^TimePeriod' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCEReservationUtilizationCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextPageToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CE.GetCERightsizingRecommendationCmdlet">
            <summary>
            Creates recommendations that helps you save cost by identifying idle and underutilized
            Amazon EC2 instances.
            
             
            <para>
            Recommendations are generated to either downsize or terminate instances, along with
            providing savings detail and metrics. For details on calculation and function, see
            <a href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/ce-what-is.html">Optimizing
            Your Cost with Rightsizing Recommendations</a>.
            </para><br/><br/>In the AWS.Tools.CostExplorer module, this cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCERightsizingRecommendationCmdlet.Configuration_BenefitsConsidered">
            <summary>
            <para>
            <para> The option to consider RI or Savings Plans discount benefits in your savings calculation.
            The default value is <code>TRUE</code>. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCERightsizingRecommendationCmdlet.Filter">
            <summary>
            <para>
            The service has not provided documentation for this parameter; please refer to the service's API reference documentation for the latest available information.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCERightsizingRecommendationCmdlet.Configuration_RecommendationTarget">
            <summary>
            <para>
            <para> The option to see recommendations within the same instance family, or recommendations
            for instances across other families. The default value is <code>SAME_INSTANCE_FAMILY</code>.
            </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCERightsizingRecommendationCmdlet.Service">
            <summary>
            <para>
            <para>The specific service that you want recommendations for. The only valid value for <code>GetRightsizingRecommendation</code>
            is "<code>AmazonEC2</code>".</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCERightsizingRecommendationCmdlet.NextPageToken">
            <summary>
            <para>
            <para>The pagination token that indicates the next set of results that you want to retrieve.</para>
            </para>
            <para>
            <br/><b>Note:</b> In the AWS.Tools.CostExplorer module, this parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextPageToken $null' for the first call and '-NextPageToken $AWSHistory.LastServiceResponse.NextPageToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCERightsizingRecommendationCmdlet.PageSize">
            <summary>
            <para>
            <para>The number of recommendations that you want returned in a single response object.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCERightsizingRecommendationCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.CostExplorer.Model.GetRightsizingRecommendationResponse).
            Specifying the name of a property of type Amazon.CostExplorer.Model.GetRightsizingRecommendationResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCERightsizingRecommendationCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the Service parameter.
            The -PassThru parameter is deprecated, use -Select '^Service' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCERightsizingRecommendationCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextPageToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CE.GetCESavingsPlansCoverageCmdlet">
            <summary>
            Retrieves the Savings Plans covered for your account. This enables you to see how
            much of your cost is covered by a Savings Plan. An organizationâ€™s master account can
            see the coverage of the associated member accounts. This supports dimensions, Cost
            Categories, and nested expressions. For any time period, you can filter data for Savings
            Plans usage with the following dimensions:
            
             <ul><li><para><code>LINKED_ACCOUNT</code></para></li><li><para><code>REGION</code></para></li><li><para><code>SERVICE</code></para></li><li><para><code>INSTANCE_FAMILY</code></para></li></ul><para>
            To determine valid values for a dimension, use the <code>GetDimensionValues</code>
            operation.
            </para><br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCESavingsPlansCoverageCmdlet.Filter">
            <summary>
            <para>
            <para>Filters Savings Plans coverage data by dimensions. You can filter data for Savings
            Plans usage with the following dimensions:</para><ul><li><para><code>LINKED_ACCOUNT</code></para></li><li><para><code>REGION</code></para></li><li><para><code>SERVICE</code></para></li><li><para><code>INSTANCE_FAMILY</code></para></li></ul><para><code>GetSavingsPlansCoverage</code> uses the same <a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_Expression.html">Expression</a>
            object as the other operations, but only <code>AND</code> is supported among each
            dimension. If there are multiple values for a dimension, they are OR'd together.</para><para>Cost category is also supported.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCESavingsPlansCoverageCmdlet.Granularity">
            <summary>
            <para>
            <para>The granularity of the Amazon Web Services cost data for your Savings Plans. <code>Granularity</code>
            can't be set if <code>GroupBy</code> is set.</para><para>The <code>GetSavingsPlansCoverage</code> operation supports only <code>DAILY</code>
            and <code>MONTHLY</code> granularities.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCESavingsPlansCoverageCmdlet.GroupBy">
            <summary>
            <para>
            <para>You can group the data using the attributes <code>INSTANCE_FAMILY</code>, <code>REGION</code>,
            or <code>SERVICE</code>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCESavingsPlansCoverageCmdlet.Metric">
            <summary>
            <para>
            <para>The measurement that you want your Savings Plans coverage reported in. The only valid
            value is <code>SpendCoveredBySavingsPlans</code>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCESavingsPlansCoverageCmdlet.TimePeriod">
            <summary>
            <para>
            <para>The time period that you want the usage and costs for. The <code>Start</code> date
            must be within 13 months. The <code>End</code> date must be after the <code>Start</code>
            date, and before the current date. Future dates can't be used as an <code>End</code>
            date.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCESavingsPlansCoverageCmdlet.MaxResult">
            <summary>
            <para>
            <para>The number of items to be returned in a response. The default is <code>20</code>,
            with a minimum value of <code>1</code>.</para>
            </para>
            <para>
            <br/><b>Note:</b> In AWSPowerShell and AWSPowerShell.NetCore this parameter is used to limit the total number of items returned by the cmdlet.
            <br/>In AWS.Tools this parameter is simply passed to the service to specify how many items should be returned by each service call.
            <br/>Pipe the output of this cmdlet into Select-Object -First to terminate retrieving data pages early and control the number of items returned.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCESavingsPlansCoverageCmdlet.NextToken">
            <summary>
            <para>
            <para>The token to retrieve the next set of results. Amazon Web Services provides the token
            when the response from a previous call has more results than the maximum page size.</para>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCESavingsPlansCoverageCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'SavingsPlansCoverages'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.CostExplorer.Model.GetSavingsPlansCoverageResponse).
            Specifying the name of a property of type Amazon.CostExplorer.Model.GetSavingsPlansCoverageResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCESavingsPlansCoverageCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the TimePeriod parameter.
            The -PassThru parameter is deprecated, use -Select '^TimePeriod' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCESavingsPlansCoverageCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CE.GetCESavingsPlansPurchaseRecommendationCmdlet">
            <summary>
            Retrieves your request parameters, Savings Plan Recommendations Summary and Details.<br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCESavingsPlansPurchaseRecommendationCmdlet.AccountScope">
            <summary>
            <para>
            <para>The account scope that you want your recommendations for. Amazon Web Services calculates
            recommendations including the payer account and linked accounts if the value is set
            to <code>PAYER</code>. If the value is <code>LINKED</code>, recommendations are calculated
            for individual linked accounts only.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCESavingsPlansPurchaseRecommendationCmdlet.Filter">
            <summary>
            <para>
            <para>You can filter your recommendations by Account ID with the <code>LINKED_ACCOUNT</code>
            dimension. To filter your recommendations by Account ID, specify <code>Key</code>
            as <code>LINKED_ACCOUNT</code> and <code>Value</code> as the comma-separated Acount
            ID(s) for which you want to see Savings Plans purchase recommendations.</para><para>For GetSavingsPlansPurchaseRecommendation, the <code>Filter</code> does not include
            <code>CostCategories</code> or <code>Tags</code>. It only includes <code>Dimensions</code>.
            With <code>Dimensions</code>, <code>Key</code> must be <code>LINKED_ACCOUNT</code>
            and <code>Value</code> can be a single Account ID or multiple comma-separated Account
            IDs for which you want to see Savings Plans Purchase Recommendations. <code>AND</code>
            and <code>OR</code> operators are not supported.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCESavingsPlansPurchaseRecommendationCmdlet.LookbackPeriodInDay">
            <summary>
            <para>
            <para>The lookback period used to generate the recommendation.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCESavingsPlansPurchaseRecommendationCmdlet.PaymentOption">
            <summary>
            <para>
            <para>The payment option used to generate these recommendations.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCESavingsPlansPurchaseRecommendationCmdlet.SavingsPlansType">
            <summary>
            <para>
            <para>The Savings Plans recommendation type requested.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCESavingsPlansPurchaseRecommendationCmdlet.TermInYear">
            <summary>
            <para>
            <para>The savings plan recommendation term used to generated these recommendations.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCESavingsPlansPurchaseRecommendationCmdlet.NextPageToken">
            <summary>
            <para>
            <para>The token to retrieve the next set of results. Amazon Web Services provides the token
            when the response from a previous call has more results than the maximum page size.</para>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextPageToken $null' for the first call and '-NextPageToken $AWSHistory.LastServiceResponse.NextPageToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCESavingsPlansPurchaseRecommendationCmdlet.PageSize">
            <summary>
            <para>
            <para>The number of recommendations that you want returned in a single response object.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCESavingsPlansPurchaseRecommendationCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.CostExplorer.Model.GetSavingsPlansPurchaseRecommendationResponse).
            Specifying the name of a property of type Amazon.CostExplorer.Model.GetSavingsPlansPurchaseRecommendationResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCESavingsPlansPurchaseRecommendationCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the PaymentOption parameter.
            The -PassThru parameter is deprecated, use -Select '^PaymentOption' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCESavingsPlansPurchaseRecommendationCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextPageToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CE.GetCESavingsPlansUtilizationCmdlet">
            <summary>
            Retrieves the Savings Plans utilization for your account across date ranges with daily
            or monthly granularity. Master accounts in an organization have access to member accounts.
            You can use <code>GetDimensionValues</code> in <code>SAVINGS_PLANS</code> to determine
            the possible dimension values.
            
             <note><para>
            You cannot group by any dimension values for <code>GetSavingsPlansUtilization</code>.
            </para></note>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCESavingsPlansUtilizationCmdlet.Filter">
            <summary>
            <para>
            <para>Filters Savings Plans utilization coverage data for active Savings Plans dimensions.
            You can filter data with the following dimensions:</para><ul><li><para><code>LINKED_ACCOUNT</code></para></li><li><para><code>SAVINGS_PLAN_ARN</code></para></li><li><para><code>SAVINGS_PLANS_TYPE</code></para></li><li><para><code>REGION</code></para></li><li><para><code>PAYMENT_OPTION</code></para></li><li><para><code>INSTANCE_TYPE_FAMILY</code></para></li></ul><para><code>GetSavingsPlansUtilization</code> uses the same <a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_Expression.html">Expression</a>
            object as the other operations, but only <code>AND</code> is supported among each
            dimension.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCESavingsPlansUtilizationCmdlet.Granularity">
            <summary>
            <para>
            <para>The granularity of the Amazon Web Services utillization data for your Savings Plans.</para><para>The <code>GetSavingsPlansUtilization</code> operation supports only <code>DAILY</code>
            and <code>MONTHLY</code> granularities.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCESavingsPlansUtilizationCmdlet.TimePeriod">
            <summary>
            <para>
            <para>The time period that you want the usage and costs for. The <code>Start</code> date
            must be within 13 months. The <code>End</code> date must be after the <code>Start</code>
            date, and before the current date. Future dates can't be used as an <code>End</code>
            date.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCESavingsPlansUtilizationCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.CostExplorer.Model.GetSavingsPlansUtilizationResponse).
            Specifying the name of a property of type Amazon.CostExplorer.Model.GetSavingsPlansUtilizationResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCESavingsPlansUtilizationCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the TimePeriod parameter.
            The -PassThru parameter is deprecated, use -Select '^TimePeriod' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CE.GetCESavingsPlansUtilizationDetailCmdlet">
            <summary>
            Retrieves attribute data along with aggregate utilization and savings data for a given
            time period. This doesn't support granular or grouped data (daily/monthly) in response.
            You can't retrieve data by dates in a single response similar to <code>GetSavingsPlanUtilization</code>,
            but you have the option to make multiple calls to <code>GetSavingsPlanUtilizationDetails</code>
            by providing individual dates. You can use <code>GetDimensionValues</code> in <code>SAVINGS_PLANS</code>
            to determine the possible dimension values.
            
             <note><para><code>GetSavingsPlanUtilizationDetails</code> internally groups data by <code>SavingsPlansArn</code>.
            </para></note><br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCESavingsPlansUtilizationDetailCmdlet.Filter">
            <summary>
            <para>
            <para>Filters Savings Plans utilization coverage data for active Savings Plans dimensions.
            You can filter data with the following dimensions:</para><ul><li><para><code>LINKED_ACCOUNT</code></para></li><li><para><code>SAVINGS_PLAN_ARN</code></para></li><li><para><code>REGION</code></para></li><li><para><code>PAYMENT_OPTION</code></para></li><li><para><code>INSTANCE_TYPE_FAMILY</code></para></li></ul><para><code>GetSavingsPlansUtilizationDetails</code> uses the same <a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_Expression.html">Expression</a>
            object as the other operations, but only <code>AND</code> is supported among each
            dimension.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCESavingsPlansUtilizationDetailCmdlet.TimePeriod">
            <summary>
            <para>
            <para>The time period that you want the usage and costs for. The <code>Start</code> date
            must be within 13 months. The <code>End</code> date must be after the <code>Start</code>
            date, and before the current date. Future dates can't be used as an <code>End</code>
            date.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCESavingsPlansUtilizationDetailCmdlet.MaxResult">
            <summary>
            <para>
            <para>The number of items to be returned in a response. The default is <code>20</code>,
            with a minimum value of <code>1</code>.</para>
            </para>
            <para>
            <br/><b>Note:</b> In AWSPowerShell and AWSPowerShell.NetCore this parameter is used to limit the total number of items returned by the cmdlet.
            <br/>In AWS.Tools this parameter is simply passed to the service to specify how many items should be returned by each service call.
            <br/>Pipe the output of this cmdlet into Select-Object -First to terminate retrieving data pages early and control the number of items returned.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCESavingsPlansUtilizationDetailCmdlet.NextToken">
            <summary>
            <para>
            <para>The token to retrieve the next set of results. Amazon Web Services provides the token
            when the response from a previous call has more results than the maximum page size.</para>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCESavingsPlansUtilizationDetailCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'SavingsPlansUtilizationDetails'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.CostExplorer.Model.GetSavingsPlansUtilizationDetailsResponse).
            Specifying the name of a property of type Amazon.CostExplorer.Model.GetSavingsPlansUtilizationDetailsResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCESavingsPlansUtilizationDetailCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CE.GetCETagCmdlet">
            <summary>
            Queries for available tag keys and tag values for a specified period. You can search
            the tag values for an arbitrary string.<br/><br/>In the AWS.Tools.CostExplorer module, this cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCETagCmdlet.SearchString">
            <summary>
            <para>
            <para>The value that you want to search for.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCETagCmdlet.TagKey">
            <summary>
            <para>
            <para>The key of the tag that you want to return values for.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCETagCmdlet.TimePeriod">
            <summary>
            <para>
            <para>The start and end dates for retrieving the dimension values. The start date is inclusive,
            but the end date is exclusive. For example, if <code>start</code> is <code>2017-01-01</code>
            and <code>end</code> is <code>2017-05-01</code>, then the cost and usage data is retrieved
            from <code>2017-01-01</code> up to and including <code>2017-04-30</code> but not including
            <code>2017-05-01</code>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCETagCmdlet.NextPageToken">
            <summary>
            <para>
            <para>The token to retrieve the next set of results. AWS provides the token when the response
            from a previous call has more results than the maximum page size.</para>
            </para>
            <para>
            <br/><b>Note:</b> In the AWS.Tools.CostExplorer module, this parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextPageToken $null' for the first call and '-NextPageToken $AWSHistory.LastServiceResponse.NextPageToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCETagCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.CostExplorer.Model.GetTagsResponse).
            Specifying the name of a property of type Amazon.CostExplorer.Model.GetTagsResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCETagCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the TimePeriod parameter.
            The -PassThru parameter is deprecated, use -Select '^TimePeriod' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCETagCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextPageToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CE.GetCEUsageForecastCmdlet">
            <summary>
            Retrieves a forecast for how much Amazon Web Services predicts that you will use over
            the forecast time period that you select, based on your past usage.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCEUsageForecastCmdlet.Filter">
            <summary>
            <para>
            <para>The filters that you want to use to filter your forecast. Cost Explorer API supports
            all of the Cost Explorer filters.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCEUsageForecastCmdlet.Granularity">
            <summary>
            <para>
            <para>How granular you want the forecast to be. You can get 3 months of <code>DAILY</code>
            forecasts or 12 months of <code>MONTHLY</code> forecasts.</para><para>The <code>GetUsageForecast</code> operation supports only <code>DAILY</code> and <code>MONTHLY</code>
            granularities.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCEUsageForecastCmdlet.Metric">
            <summary>
            <para>
            <para>Which metric Cost Explorer uses to create your forecast.</para><para>Valid values for a <code>GetUsageForecast</code> call are the following:</para><ul><li><para>USAGE_QUANTITY</para></li><li><para>NORMALIZED_USAGE_AMOUNT</para></li></ul>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCEUsageForecastCmdlet.PredictionIntervalLevel">
            <summary>
            <para>
            <para>Cost Explorer always returns the mean forecast as a single point. You can request
            a prediction interval around the mean by specifying a confidence level. The higher
            the confidence level, the more confident Cost Explorer is about the actual value falling
            in the prediction interval. Higher confidence levels result in wider prediction intervals.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCEUsageForecastCmdlet.TimePeriod">
            <summary>
            <para>
            <para>The start and end dates of the period that you want to retrieve usage forecast for.
            The start date is inclusive, but the end date is exclusive. For example, if <code>start</code>
            is <code>2017-01-01</code> and <code>end</code> is <code>2017-05-01</code>, then the
            cost and usage data is retrieved from <code>2017-01-01</code> up to and including
            <code>2017-04-30</code> but not including <code>2017-05-01</code>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCEUsageForecastCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.CostExplorer.Model.GetUsageForecastResponse).
            Specifying the name of a property of type Amazon.CostExplorer.Model.GetUsageForecastResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.GetCEUsageForecastCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the Metric parameter.
            The -PassThru parameter is deprecated, use -Select '^Metric' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CE.NewCECostCategoryDefinitionCmdlet">
            <summary>
            Creates a new Cost Category with the requested name and rules.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.NewCECostCategoryDefinitionCmdlet.Name">
            <summary>
            <para>
            The service has not provided documentation for this parameter; please refer to the service's API reference documentation for the latest available information.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.NewCECostCategoryDefinitionCmdlet.Rule">
            <summary>
            <para>
            <para>The Cost Category rules used to categorize costs. For more information, see <a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_CostCategoryRule.html">CostCategoryRule</a>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.NewCECostCategoryDefinitionCmdlet.RuleVersion">
            <summary>
            <para>
            The service has not provided documentation for this parameter; please refer to the service's API reference documentation for the latest available information.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.NewCECostCategoryDefinitionCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.CostExplorer.Model.CreateCostCategoryDefinitionResponse).
            Specifying the name of a property of type Amazon.CostExplorer.Model.CreateCostCategoryDefinitionResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.NewCECostCategoryDefinitionCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the Name parameter.
            The -PassThru parameter is deprecated, use -Select '^Name' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.NewCECostCategoryDefinitionCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CE.RemoveCECostCategoryDefinitionCmdlet">
            <summary>
            Deletes a Cost Category. Expenses from this month going forward will no longer be
            categorized with this Cost Category.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.RemoveCECostCategoryDefinitionCmdlet.CostCategoryArn">
            <summary>
            <para>
            <para> The unique identifier for your Cost Category. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.RemoveCECostCategoryDefinitionCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.CostExplorer.Model.DeleteCostCategoryDefinitionResponse).
            Specifying the name of a property of type Amazon.CostExplorer.Model.DeleteCostCategoryDefinitionResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.RemoveCECostCategoryDefinitionCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the CostCategoryArn parameter.
            The -PassThru parameter is deprecated, use -Select '^CostCategoryArn' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.RemoveCECostCategoryDefinitionCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CE.UpdateCECostCategoryDefinitionCmdlet">
            <summary>
            Updates an existing Cost Category. Changes made to the Cost Category rules will be
            used to categorize the current monthâ€™s expenses and future expenses. This wonâ€™t change
            categorization for the previous months.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.UpdateCECostCategoryDefinitionCmdlet.CostCategoryArn">
            <summary>
            <para>
            <para>The unique identifier for your Cost Category.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.UpdateCECostCategoryDefinitionCmdlet.Rule">
            <summary>
            <para>
            <para>The <code>Expression</code> object used to categorize costs. For more information,
            see <a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_CostCategoryRule.html">CostCategoryRule
            </a>. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.UpdateCECostCategoryDefinitionCmdlet.RuleVersion">
            <summary>
            <para>
            The service has not provided documentation for this parameter; please refer to the service's API reference documentation for the latest available information.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.UpdateCECostCategoryDefinitionCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.CostExplorer.Model.UpdateCostCategoryDefinitionResponse).
            Specifying the name of a property of type Amazon.CostExplorer.Model.UpdateCostCategoryDefinitionResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.UpdateCECostCategoryDefinitionCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the CostCategoryArn parameter.
            The -PassThru parameter is deprecated, use -Select '^CostCategoryArn' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CE.UpdateCECostCategoryDefinitionCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
    </members>
</doc>
