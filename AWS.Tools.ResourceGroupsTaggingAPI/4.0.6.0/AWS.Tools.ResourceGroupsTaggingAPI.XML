<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AWS.Tools.ResourceGroupsTaggingAPI</name>
    </assembly>
    <members>
        <member name="T:Amazon.PowerShell.Cmdlets.RGT.AddRGTResourceTagCmdlet">
            <summary>
            Applies one or more tags to the specified resources. Note the following:
            
             <ul><li><para>
            Not all resources can have tags. For a list of services that support tagging, see
            <a href="http://docs.aws.amazon.com/resourcegroupstagging/latest/APIReference/Welcome.html">this
            list</a>.
            </para></li><li><para>
            Each resource can have up to 50 tags. For other limits, see <a href="http://docs.aws.amazon.com/general/latest/gr/aws_tagging.html#tag-conventions">Tag
            Naming and Usage Conventions</a> in the <i>AWS General Reference.</i></para></li><li><para>
            You can only tag resources that are located in the specified Region for the AWS account.
            </para></li><li><para>
            To add tags to a resource, you need the necessary permissions for the service that
            the resource belongs to as well as permissions for adding tags. For more information,
            see <a href="http://docs.aws.amazon.com/resourcegroupstagging/latest/APIReference/Welcome.html">this
            list</a>.
            </para></li></ul>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.RGT.AddRGTResourceTagCmdlet.ResourceARNList">
            <summary>
            <para>
            <para>A list of ARNs. An ARN (Amazon Resource Name) uniquely identifies a resource. For
            more information, see <a href="http://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon
            Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.RGT.AddRGTResourceTagCmdlet.Tag">
            <summary>
            <para>
            <para>The tags that you want to add to the specified resources. A tag consists of a key
            and a value that you define.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.RGT.AddRGTResourceTagCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'FailedResourcesMap'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ResourceGroupsTaggingAPI.Model.TagResourcesResponse).
            Specifying the name of a property of type Amazon.ResourceGroupsTaggingAPI.Model.TagResourcesResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.RGT.AddRGTResourceTagCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the ResourceARNList parameter.
            The -PassThru parameter is deprecated, use -Select '^ResourceARNList' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.RGT.AddRGTResourceTagCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.RGT.GetRGTComplianceSummaryCmdlet">
            <summary>
            Returns a table that shows counts of resources that are noncompliant with their tag
            policies.
            
             
            <para>
            For more information on tag policies, see <a href="http://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_tag-policies.html">Tag
            Policies</a> in the <i>AWS Organizations User Guide.</i></para><para>
            You can call this operation only from the organization's master account and from the
            us-east-1 Region.
            </para><br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.RGT.GetRGTComplianceSummaryCmdlet.GroupBy">
            <summary>
            <para>
            <para>A list of attributes to group the counts of noncompliant resources by. If supplied,
            the counts are sorted by those attributes.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.RGT.GetRGTComplianceSummaryCmdlet.RegionFilter">
            <summary>
            <para>
            <para>A list of Regions to limit the output by. If you use this parameter, the count of
            returned noncompliant resources includes only resources in the specified Regions.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.RGT.GetRGTComplianceSummaryCmdlet.ResourceTypeFilter">
            <summary>
            <para>
            <para>The constraints on the resources that you want returned. The format of each resource
            type is <code>service[:resourceType]</code>. For example, specifying a resource type
            of <code>ec2</code> returns all Amazon EC2 resources (which includes EC2 instances).
            Specifying a resource type of <code>ec2:instance</code> returns only EC2 instances.
            </para><para>The string for each service name and resource type is the same as that embedded in
            a resource's Amazon Resource Name (ARN). Consult the <i>AWS General Reference</i>
            for the following:</para><ul><li><para>For a list of service name strings, see <a href="http://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">AWS
            Service Namespaces</a>.</para></li><li><para>For resource type strings, see <a href="http://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arns-syntax">Example
            ARNs</a>.</para></li><li><para>For more information about ARNs, see <a href="http://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon
            Resource Names (ARNs) and AWS Service Namespaces</a>.</para></li></ul><para>You can specify multiple resource types by using an array. The array can include up
            to 100 items. Note that the length constraint requirement applies to each resource
            type filter. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.RGT.GetRGTComplianceSummaryCmdlet.TagKeyFilter">
            <summary>
            <para>
            <para>A list of tag keys to limit the output by. If you use this parameter, the count of
            returned noncompliant resources includes only resources that have the specified tag
            keys.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.RGT.GetRGTComplianceSummaryCmdlet.TargetIdFilter">
            <summary>
            <para>
            <para>The target identifiers (usually, specific account IDs) to limit the output by. If
            you use this parameter, the count of returned noncompliant resources includes only
            resources with the specified target IDs.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.RGT.GetRGTComplianceSummaryCmdlet.MaxResult">
            <summary>
            <para>
            <para>A limit that restricts the number of results that are returned per page.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.RGT.GetRGTComplianceSummaryCmdlet.PaginationToken">
            <summary>
            <para>
            <para>A string that indicates that additional data is available. Leave this value empty
            for your initial request. If the response includes a <code>PaginationToken</code>,
            use that string for this value to request an additional page of data.</para>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-PaginationToken $null' for the first call and '-PaginationToken $AWSHistory.LastServiceResponse.PaginationToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.RGT.GetRGTComplianceSummaryCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'SummaryList'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ResourceGroupsTaggingAPI.Model.GetComplianceSummaryResponse).
            Specifying the name of a property of type Amazon.ResourceGroupsTaggingAPI.Model.GetComplianceSummaryResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.RGT.GetRGTComplianceSummaryCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of PaginationToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.RGT.GetRGTReportCreationCmdlet">
            <summary>
            Describes the status of the <code>StartReportCreation</code> operation. 
            
             
            <para>
            You can call this operation only from the organization's master account and from the
            us-east-1 Region.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.RGT.GetRGTReportCreationCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ResourceGroupsTaggingAPI.Model.DescribeReportCreationResponse).
            Specifying the name of a property of type Amazon.ResourceGroupsTaggingAPI.Model.DescribeReportCreationResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.RGT.GetRGTResourceCmdlet">
            <summary>
            Returns all the tagged or previously tagged resources that are located in the specified
            Region for the AWS account.
            
             
            <para>
            Depending on what information you want returned, you can also specify the following:
            </para><ul><li><para><i>Filters</i> that specify what tags and resource types you want returned. The response
            includes all tags that are associated with the requested resources.
            </para></li><li><para>
            Information about compliance with the account's effective tag policy. For more information
            on tag policies, see <a href="http://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_tag-policies.html">Tag
            Policies</a> in the <i>AWS Organizations User Guide.</i></para></li></ul><note><para>
            You can check the <code>PaginationToken</code> response parameter to determine if
            a query is complete. Queries occasionally return fewer results on a page than allowed.
            The <code>PaginationToken</code> response parameter value is <code>null</code><i>only</i>
            when there are no more results to display. 
            </para></note><br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.RGT.GetRGTResourceCmdlet.ExcludeCompliantResource">
            <summary>
            <para>
            <para>Specifies whether to exclude resources that are compliant with the tag policy. Set
            this to <code>true</code> if you are interested in retrieving information on noncompliant
            resources only.</para><para>You can use this parameter only if the <code>IncludeComplianceDetails</code> parameter
            is also set to <code>true</code>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.RGT.GetRGTResourceCmdlet.IncludeComplianceDetail">
            <summary>
            <para>
            <para>Specifies whether to include details regarding the compliance with the effective tag
            policy. Set this to <code>true</code> to determine whether resources are compliant
            with the tag policy and to get details.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.RGT.GetRGTResourceCmdlet.ResourcesPerPage">
            <summary>
            <para>
            <para>A limit that restricts the number of resources returned by GetResources in paginated
            output. You can set ResourcesPerPage to a minimum of 1 item and the maximum of 100
            items. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.RGT.GetRGTResourceCmdlet.ResourceTypeFilter">
            <summary>
            <para>
            <para>The constraints on the resources that you want returned. The format of each resource
            type is <code>service[:resourceType]</code>. For example, specifying a resource type
            of <code>ec2</code> returns all Amazon EC2 resources (which includes EC2 instances).
            Specifying a resource type of <code>ec2:instance</code> returns only EC2 instances.
            </para><para>The string for each service name and resource type is the same as that embedded in
            a resource's Amazon Resource Name (ARN). Consult the <i>AWS General Reference</i>
            for the following:</para><ul><li><para>For a list of service name strings, see <a href="http://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">AWS
            Service Namespaces</a>.</para></li><li><para>For resource type strings, see <a href="http://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arns-syntax">Example
            ARNs</a>.</para></li><li><para>For more information about ARNs, see <a href="http://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon
            Resource Names (ARNs) and AWS Service Namespaces</a>.</para></li></ul><para>You can specify multiple resource types by using an array. The array can include up
            to 100 items. Note that the length constraint requirement applies to each resource
            type filter. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.RGT.GetRGTResourceCmdlet.TagFilter">
            <summary>
            <para>
            <para>A list of TagFilters (keys and values). Each TagFilter specified must contain a key
            with values as optional. A request can include up to 50 keys, and each key can include
            up to 20 values. </para><para>Note the following when deciding how to use TagFilters:</para><ul><li><para>If you <i>do</i> specify a TagFilter, the response returns only those resources that
            are currently associated with the specified tag. </para></li><li><para>If you <i>don't</i> specify a TagFilter, the response includes all resources that
            were ever associated with tags. Resources that currently don't have associated tags
            are shown with an empty tag set, like this: <code>"Tags": []</code>.</para></li><li><para>If you specify more than one filter in a single request, the response returns only
            those resources that satisfy all specified filters.</para></li><li><para>If you specify a filter that contains more than one value for a key, the response
            returns resources that match any of the specified values for that key.</para></li><li><para>If you don't specify any values for a key, the response returns resources that are
            tagged with that key irrespective of the value.</para><para>For example, for filters: filter1 = {key1, {value1}}, filter2 = {key2, {value2,value3,value4}}
            , filter3 = {key3}:</para><ul><li><para>GetResources( {filter1} ) returns resources tagged with key1=value1</para></li><li><para>GetResources( {filter2} ) returns resources tagged with key2=value2 or key2=value3
            or key2=value4</para></li><li><para>GetResources( {filter3} ) returns resources tagged with any tag containing key3 as
            its tag key, irrespective of its value</para></li><li><para>GetResources( {filter1,filter2,filter3} ) returns resources tagged with ( key1=value1)
            and ( key2=value2 or key2=value3 or key2=value4) and (key3, irrespective of the value)</para></li></ul></li></ul>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.RGT.GetRGTResourceCmdlet.TagsPerPage">
            <summary>
            <para>
            <para>AWS recommends using <code>ResourcesPerPage</code> instead of this parameter.</para><para>A limit that restricts the number of tags (key and value pairs) returned by GetResources
            in paginated output. A resource with no tags is counted as having one tag (one key
            and value pair).</para><para><code>GetResources</code> does not split a resource and its associated tags across
            pages. If the specified <code>TagsPerPage</code> would cause such a break, a <code>PaginationToken</code>
            is returned in place of the affected resource and its tags. Use that token in another
            request to get the remaining data. For example, if you specify a <code>TagsPerPage</code>
            of <code>100</code> and the account has 22 resources with 10 tags each (meaning that
            each resource has 10 key and value pairs), the output will consist of three pages.
            The first page displays the first 10 resources, each with its 10 tags. The second
            page displays the next 10 resources, each with its 10 tags. The third page displays
            the remaining 2 resources, each with its 10 tags.</para><para>You can set <code>TagsPerPage</code> to a minimum of 100 items and the maximum of
            500 items.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.RGT.GetRGTResourceCmdlet.PaginationToken">
            <summary>
            <para>
            <para>A string that indicates that additional data is available. Leave this value empty
            for your initial request. If the response includes a <code>PaginationToken</code>,
            use that string for this value to request an additional page of data.</para>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-PaginationToken $null' for the first call and '-PaginationToken $AWSHistory.LastServiceResponse.PaginationToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.RGT.GetRGTResourceCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'ResourceTagMappingList'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ResourceGroupsTaggingAPI.Model.GetResourcesResponse).
            Specifying the name of a property of type Amazon.ResourceGroupsTaggingAPI.Model.GetResourcesResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.RGT.GetRGTResourceCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the ResourceTypeFilter parameter.
            The -PassThru parameter is deprecated, use -Select '^ResourceTypeFilter' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.RGT.GetRGTResourceCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of PaginationToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.RGT.GetRGTTagKeyCmdlet">
            <summary>
            Returns all tag keys in the specified Region for the AWS account.<br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.RGT.GetRGTTagKeyCmdlet.PaginationToken">
            <summary>
            <para>
            <para>A string that indicates that additional data is available. Leave this value empty
            for your initial request. If the response includes a <code>PaginationToken</code>,
            use that string for this value to request an additional page of data.</para>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-PaginationToken $null' for the first call and '-PaginationToken $AWSHistory.LastServiceResponse.PaginationToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.RGT.GetRGTTagKeyCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'TagKeys'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ResourceGroupsTaggingAPI.Model.GetTagKeysResponse).
            Specifying the name of a property of type Amazon.ResourceGroupsTaggingAPI.Model.GetTagKeysResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.RGT.GetRGTTagKeyCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of PaginationToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.RGT.GetRGTTagValueCmdlet">
            <summary>
            Returns all tag values for the specified key in the specified Region for the AWS account.<br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.RGT.GetRGTTagValueCmdlet.Key">
            <summary>
            <para>
            <para>The key for which you want to list all existing values in the specified Region for
            the AWS account.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.RGT.GetRGTTagValueCmdlet.PaginationToken">
            <summary>
            <para>
            <para>A string that indicates that additional data is available. Leave this value empty
            for your initial request. If the response includes a <code>PaginationToken</code>,
            use that string for this value to request an additional page of data.</para>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-PaginationToken $null' for the first call and '-PaginationToken $AWSHistory.LastServiceResponse.PaginationToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.RGT.GetRGTTagValueCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'TagValues'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ResourceGroupsTaggingAPI.Model.GetTagValuesResponse).
            Specifying the name of a property of type Amazon.ResourceGroupsTaggingAPI.Model.GetTagValuesResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.RGT.GetRGTTagValueCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the Key parameter.
            The -PassThru parameter is deprecated, use -Select '^Key' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.RGT.GetRGTTagValueCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of PaginationToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.RGT.RemoveRGTResourceTagCmdlet">
            <summary>
            Removes the specified tags from the specified resources. When you specify a tag key,
            the action removes both that key and its associated value. The operation succeeds
            even if you attempt to remove tags from a resource that were already removed. Note
            the following:
            
             <ul><li><para>
            To remove tags from a resource, you need the necessary permissions for the service
            that the resource belongs to as well as permissions for removing tags. For more information,
            see <a href="http://docs.aws.amazon.com/resourcegroupstagging/latest/APIReference/Welcome.html">this
            list</a>.
            </para></li><li><para>
            You can only tag resources that are located in the specified Region for the AWS account.
            </para></li></ul>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.RGT.RemoveRGTResourceTagCmdlet.ResourceARNList">
            <summary>
            <para>
            <para>A list of ARNs. An ARN (Amazon Resource Name) uniquely identifies a resource. For
            more information, see <a href="http://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon
            Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.RGT.RemoveRGTResourceTagCmdlet.TagKey">
            <summary>
            <para>
            <para>A list of the tag keys that you want to remove from the specified resources.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.RGT.RemoveRGTResourceTagCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'FailedResourcesMap'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ResourceGroupsTaggingAPI.Model.UntagResourcesResponse).
            Specifying the name of a property of type Amazon.ResourceGroupsTaggingAPI.Model.UntagResourcesResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.RGT.RemoveRGTResourceTagCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the ResourceARNList parameter.
            The -PassThru parameter is deprecated, use -Select '^ResourceARNList' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.RGT.RemoveRGTResourceTagCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.RGT.StartRGTReportCreationCmdlet">
            <summary>
            Generates a report that lists all tagged resources in accounts across your organization
            and tells whether each resource is compliant with the effective tag policy. Compliance
            data is refreshed daily. 
            
             
            <para>
            The generated report is saved to the following location:
            </para><para><code>s3://example-bucket/AwsTagPolicies/o-exampleorgid/YYYY-MM-ddTHH:mm:ssZ/report.csv</code></para><para>
            You can call this operation only from the organization's master account and from the
            us-east-1 Region.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.RGT.StartRGTReportCreationCmdlet.S3Bucket">
            <summary>
            <para>
            <para>The name of the Amazon S3 bucket where the report will be stored; for example:</para><para><code>awsexamplebucket</code></para><para>For more information on S3 bucket requirements, including an example bucket policy,
            see the example S3 bucket policy on this page.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.RGT.StartRGTReportCreationCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The cmdlet doesn't have a return value by default.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ResourceGroupsTaggingAPI.Model.StartReportCreationResponse).
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.RGT.StartRGTReportCreationCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the S3Bucket parameter.
            The -PassThru parameter is deprecated, use -Select '^S3Bucket' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.RGT.StartRGTReportCreationCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
    </members>
</doc>
