<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AWS.Tools.Rekognition</name>
    </assembly>
    <members>
        <member name="T:Amazon.PowerShell.Cmdlets.REK.AddREKDetectedFacesToCollectionCmdlet">
            <summary>
            Detects faces in the input image and adds them to the specified collection. 
            
             
            <para>
            Amazon Rekognition doesn't save the actual faces that are detected. Instead, the underlying
            detection algorithm first detects the faces in the input image. For each face, the
            algorithm extracts facial features into a feature vector, and stores it in the backend
            database. Amazon Rekognition uses feature vectors when it performs face match and
            search operations using the <a>SearchFaces</a> and <a>SearchFacesByImage</a> operations.
            </para><para>
            For more information, see Adding Faces to a Collection in the Amazon Rekognition Developer
            Guide.
            </para><para>
            To get the number of faces in a collection, call <a>DescribeCollection</a>. 
            </para><para>
            If you're using version 1.0 of the face detection model, <code>IndexFaces</code> indexes
            the 15 largest faces in the input image. Later versions of the face detection model
            index the 100 largest faces in the input image. 
            </para><para>
            If you're using version 4 or later of the face model, image orientation information
            is not returned in the <code>OrientationCorrection</code> field. 
            </para><para>
            To determine which version of the model you're using, call <a>DescribeCollection</a>
            and supply the collection ID. You can also get the model version from the value of
            <code>FaceModelVersion</code> in the response from <code>IndexFaces</code></para><para>
            For more information, see Model Versioning in the Amazon Rekognition Developer Guide.
            </para><para>
            If you provide the optional <code>ExternalImageID</code> for the input image you provided,
            Amazon Rekognition associates this ID with all faces that it detects. When you call
            the <a>ListFaces</a> operation, the response returns the external ID. You can use
            this external image ID to create a client-side index to associate the faces with each
            image. You can then use the index to find all faces in an image.
            </para><para>
            You can specify the maximum number of faces to index with the <code>MaxFaces</code>
            input parameter. This is useful when you want to index the largest faces in an image
            and don't want to index smaller faces, such as those belonging to people standing
            in the background.
            </para><para>
            The <code>QualityFilter</code> input parameter allows you to filter out detected faces
            that don’t meet a required quality bar. The quality bar is based on a variety of common
            use cases. By default, <code>IndexFaces</code> chooses the quality bar that's used
            to filter faces. You can also explicitly choose the quality bar. Use <code>QualityFilter</code>,
            to set the quality bar by specifying <code>LOW</code>, <code>MEDIUM</code>, or <code>HIGH</code>.
            If you do not want to filter detected faces, specify <code>NONE</code>. 
            </para><note><para>
            To use quality filtering, you need a collection associated with version 3 of the face
            model or higher. To get the version of the face model associated with a collection,
            call <a>DescribeCollection</a>. 
            </para></note><para>
            Information about faces detected in an image, but not indexed, is returned in an array
            of <a>UnindexedFace</a> objects, <code>UnindexedFaces</code>. Faces aren't indexed
            for reasons such as:
            </para><ul><li><para>
            The number of faces detected exceeds the value of the <code>MaxFaces</code> request
            parameter.
            </para></li><li><para>
            The face is too small compared to the image dimensions.
            </para></li><li><para>
            The face is too blurry.
            </para></li><li><para>
            The image is too dark.
            </para></li><li><para>
            The face has an extreme pose.
            </para></li><li><para>
            The face doesn’t have enough detail to be suitable for face search.
            </para></li></ul><para>
            In response, the <code>IndexFaces</code> operation returns an array of metadata for
            all detected faces, <code>FaceRecords</code>. This includes: 
            </para><ul><li><para>
            The bounding box, <code>BoundingBox</code>, of the detected face. 
            </para></li><li><para>
            A confidence value, <code>Confidence</code>, which indicates the confidence that the
            bounding box contains a face.
            </para></li><li><para>
            A face ID, <code>FaceId</code>, assigned by the service for each face that's detected
            and stored.
            </para></li><li><para>
            An image ID, <code>ImageId</code>, assigned by the service for the input image.
            </para></li></ul><para>
            If you request all facial attributes (by using the <code>detectionAttributes</code>
            parameter), Amazon Rekognition returns detailed facial attributes, such as facial
            landmarks (for example, location of eye and mouth) and other facial attributes. If
            you provide the same image, specify the same collection, and use the same external
            ID in the <code>IndexFaces</code> operation, Amazon Rekognition doesn't save duplicate
            face metadata.
            </para><para>
            The input image is passed either as base64-encoded image bytes, or as a reference
            to an image in an Amazon S3 bucket. If you use the AWS CLI to call Amazon Rekognition
            operations, passing image bytes isn't supported. The image must be formatted as a
            PNG or JPEG file. 
            </para><para>
            This operation requires permissions to perform the <code>rekognition:IndexFaces</code>
            action.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.AddREKDetectedFacesToCollectionCmdlet.ImageBucket">
            <summary>
            <para>
            <para>Name of the S3 bucket.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.AddREKDetectedFacesToCollectionCmdlet.ImageContent">
            <summary>
            <para>
            <para>Blob of image bytes up to 5 MBs.</para>
            </para>
            <para>The cmdlet will automatically convert the supplied parameter of type string, string[], System.IO.FileInfo or System.IO.Stream to byte[] before supplying it to the service.</para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.AddREKDetectedFacesToCollectionCmdlet.CollectionId">
            <summary>
            <para>
            <para>The ID of an existing collection to which you want to add the faces that are detected
            in the input images.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.AddREKDetectedFacesToCollectionCmdlet.DetectionAttribute">
            <summary>
            <para>
            <para>An array of facial attributes that you want to be returned. This can be the default
            list of attributes or all attributes. If you don't specify a value for <code>Attributes</code>
            or if you specify <code>["DEFAULT"]</code>, the API returns the following subset of
            facial attributes: <code>BoundingBox</code>, <code>Confidence</code>, <code>Pose</code>,
            <code>Quality</code>, and <code>Landmarks</code>. If you provide <code>["ALL"]</code>,
            all facial attributes are returned, but the operation takes longer to complete.</para><para>If you provide both, <code>["ALL", "DEFAULT"]</code>, the service uses a logical AND
            operator to determine which attributes to return (in this case, all attributes). </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.AddREKDetectedFacesToCollectionCmdlet.ExternalImageId">
            <summary>
            <para>
            <para>The ID you want to assign to all the faces detected in the image.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.AddREKDetectedFacesToCollectionCmdlet.MaxFace">
            <summary>
            <para>
            <para>The maximum number of faces to index. The value of <code>MaxFaces</code> must be greater
            than or equal to 1. <code>IndexFaces</code> returns no more than 100 detected faces
            in an image, even if you specify a larger value for <code>MaxFaces</code>.</para><para>If <code>IndexFaces</code> detects more faces than the value of <code>MaxFaces</code>,
            the faces with the lowest quality are filtered out first. If there are still more
            faces than the value of <code>MaxFaces</code>, the faces with the smallest bounding
            boxes are filtered out (up to the number that's needed to satisfy the value of <code>MaxFaces</code>).
            Information about the unindexed faces is available in the <code>UnindexedFaces</code>
            array. </para><para>The faces that are returned by <code>IndexFaces</code> are sorted by the largest face
            bounding box size to the smallest size, in descending order.</para><para><code>MaxFaces</code> can be used with a collection associated with any version of
            the face model.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.AddREKDetectedFacesToCollectionCmdlet.ImageName">
            <summary>
            <para>
            <para>S3 object key name.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.AddREKDetectedFacesToCollectionCmdlet.QualityFilter">
            <summary>
            <para>
            <para>A filter that specifies a quality bar for how much filtering is done to identify faces.
            Filtered faces aren't indexed. If you specify <code>AUTO</code>, Amazon Rekognition
            chooses the quality bar. If you specify <code>LOW</code>, <code>MEDIUM</code>, or
            <code>HIGH</code>, filtering removes all faces that don’t meet the chosen quality
            bar. The default value is <code>AUTO</code>. The quality bar is based on a variety
            of common use cases. Low-quality detections can occur for a number of reasons. Some
            examples are an object that's misidentified as a face, a face that's too blurry, or
            a face with a pose that's too extreme to use. If you specify <code>NONE</code>, no
            filtering is performed. </para><para>To use quality filtering, the collection you are using must be associated with version
            3 of the face model or higher.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.AddREKDetectedFacesToCollectionCmdlet.ImageVersion">
            <summary>
            <para>
            <para>If the bucket is versioning enabled, you can specify the object version. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.AddREKDetectedFacesToCollectionCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Rekognition.Model.IndexFacesResponse).
            Specifying the name of a property of type Amazon.Rekognition.Model.IndexFacesResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.AddREKDetectedFacesToCollectionCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the CollectionId parameter.
            The -PassThru parameter is deprecated, use -Select '^CollectionId' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.AddREKDetectedFacesToCollectionCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.REK.CompareREKFaceCmdlet">
            <summary>
            Compares a face in the <i>source</i> input image with each of the 100 largest faces
            detected in the <i>target</i> input image. 
            
             <note><para>
             If the source image contains multiple faces, the service detects the largest face
            and compares it with each face detected in the target image. 
            </para></note><para>
            You pass the input and target images either as base64-encoded image bytes or as references
            to images in an Amazon S3 bucket. If you use the AWS CLI to call Amazon Rekognition
            operations, passing image bytes isn't supported. The image must be formatted as a
            PNG or JPEG file. 
            </para><para>
            In response, the operation returns an array of face matches ordered by similarity
            score in descending order. For each face match, the response provides a bounding box
            of the face, facial landmarks, pose details (pitch, role, and yaw), quality (brightness
            and sharpness), and confidence value (indicating the level of confidence that the
            bounding box contains a face). The response also provides a similarity score, which
            indicates how closely the faces match. 
            </para><note><para>
            By default, only faces with a similarity score of greater than or equal to 80% are
            returned in the response. You can change this value by specifying the <code>SimilarityThreshold</code>
            parameter.
            </para></note><para><code>CompareFaces</code> also returns an array of faces that don't match the source
            image. For each face, it returns a bounding box, confidence value, landmarks, pose
            details, and quality. The response also returns information about the face in the
            source image, including the bounding box of the face and confidence value.
            </para><para>
            The <code>QualityFilter</code> input parameter allows you to filter out detected faces
            that don’t meet a required quality bar. The quality bar is based on a variety of common
            use cases. Use <code>QualityFilter</code> to set the quality bar by specifying <code>LOW</code>,
            <code>MEDIUM</code>, or <code>HIGH</code>. If you do not want to filter detected faces,
            specify <code>NONE</code>. The default value is <code>NONE</code>. 
            </para><note><para>
            To use quality filtering, you need a collection associated with version 3 of the face
            model or higher. To get the version of the face model associated with a collection,
            call <a>DescribeCollection</a>. 
            </para></note><para>
            If the image doesn't contain Exif metadata, <code>CompareFaces</code> returns orientation
            information for the source and target images. Use these values to display the images
            with the correct image orientation.
            </para><para>
            If no faces are detected in the source or target images, <code>CompareFaces</code>
            returns an <code>InvalidParameterException</code> error. 
            </para><note><para>
             This is a stateless API operation. That is, data returned by this operation doesn't
            persist.
            </para></note><para>
            For an example, see Comparing Faces in Images in the Amazon Rekognition Developer
            Guide.
            </para><para>
            This operation requires permissions to perform the <code>rekognition:CompareFaces</code>
            action.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.CompareREKFaceCmdlet.SourceImageBucket">
            <summary>
            <para>
            <para>Name of the S3 bucket.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.CompareREKFaceCmdlet.TargetImageBucket">
            <summary>
            <para>
            <para>Name of the S3 bucket.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.CompareREKFaceCmdlet.SourceImageContent">
            <summary>
            <para>
            <para>Blob of image bytes up to 5 MBs.</para>
            </para>
            <para>The cmdlet will automatically convert the supplied parameter of type string, string[], System.IO.FileInfo or System.IO.Stream to byte[] before supplying it to the service.</para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.CompareREKFaceCmdlet.TargetImageContent">
            <summary>
            <para>
            <para>Blob of image bytes up to 5 MBs.</para>
            </para>
            <para>The cmdlet will automatically convert the supplied parameter of type string, string[], System.IO.FileInfo or System.IO.Stream to byte[] before supplying it to the service.</para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.CompareREKFaceCmdlet.SourceImageName">
            <summary>
            <para>
            <para>S3 object key name.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.CompareREKFaceCmdlet.TargetImageName">
            <summary>
            <para>
            <para>S3 object key name.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.CompareREKFaceCmdlet.QualityFilter">
            <summary>
            <para>
            <para>A filter that specifies a quality bar for how much filtering is done to identify faces.
            Filtered faces aren't compared. If you specify <code>AUTO</code>, Amazon Rekognition
            chooses the quality bar. If you specify <code>LOW</code>, <code>MEDIUM</code>, or
            <code>HIGH</code>, filtering removes all faces that don’t meet the chosen quality
            bar. The quality bar is based on a variety of common use cases. Low-quality detections
            can occur for a number of reasons. Some examples are an object that's misidentified
            as a face, a face that's too blurry, or a face with a pose that's too extreme to use.
            If you specify <code>NONE</code>, no filtering is performed. The default value is
            <code>NONE</code>. </para><para>To use quality filtering, the collection you are using must be associated with version
            3 of the face model or higher.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.CompareREKFaceCmdlet.SimilarityThreshold">
            <summary>
            <para>
            <para>The minimum level of confidence in the face matches that a match must meet to be included
            in the <code>FaceMatches</code> array.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.CompareREKFaceCmdlet.SourceImageVersion">
            <summary>
            <para>
            <para>If the bucket is versioning enabled, you can specify the object version. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.CompareREKFaceCmdlet.TargetImageVersion">
            <summary>
            <para>
            <para>If the bucket is versioning enabled, you can specify the object version. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.CompareREKFaceCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Rekognition.Model.CompareFacesResponse).
            Specifying the name of a property of type Amazon.Rekognition.Model.CompareFacesResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.CompareREKFaceCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.REK.FindREKCelebrityCmdlet">
            <summary>
            Returns an array of celebrities recognized in the input image. For more information,
            see Recognizing Celebrities in the Amazon Rekognition Developer Guide. 
            
             
            <para><code>RecognizeCelebrities</code> returns the 100 largest faces in the image. It
            lists recognized celebrities in the <code>CelebrityFaces</code> array and unrecognized
            faces in the <code>UnrecognizedFaces</code> array. <code>RecognizeCelebrities</code>
            doesn't return celebrities whose faces aren't among the largest 100 faces in the image.
            </para><para>
            For each celebrity recognized, <code>RecognizeCelebrities</code> returns a <code>Celebrity</code>
            object. The <code>Celebrity</code> object contains the celebrity name, ID, URL links
            to additional information, match confidence, and a <code>ComparedFace</code> object
            that you can use to locate the celebrity's face on the image.
            </para><para>
            Amazon Rekognition doesn't retain information about which images a celebrity has been
            recognized in. Your application must store this information and use the <code>Celebrity</code>
            ID property as a unique identifier for the celebrity. If you don't store the celebrity
            name or additional information URLs returned by <code>RecognizeCelebrities</code>,
            you will need the ID to identify the celebrity in a call to the <a>GetCelebrityInfo</a>
            operation.
            </para><para>
            You pass the input image either as base64-encoded image bytes or as a reference to
            an image in an Amazon S3 bucket. If you use the AWS CLI to call Amazon Rekognition
            operations, passing image bytes is not supported. The image must be either a PNG or
            JPEG formatted file. 
            </para><para>
            For an example, see Recognizing Celebrities in an Image in the Amazon Rekognition
            Developer Guide.
            </para><para>
            This operation requires permissions to perform the <code>rekognition:RecognizeCelebrities</code>
            operation.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.FindREKCelebrityCmdlet.ImageBucket">
            <summary>
            <para>
            <para>Name of the S3 bucket.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.FindREKCelebrityCmdlet.ImageContent">
            <summary>
            <para>
            <para>Blob of image bytes up to 5 MBs.</para>
            </para>
            <para>The cmdlet will automatically convert the supplied parameter of type string, string[], System.IO.FileInfo or System.IO.Stream to byte[] before supplying it to the service.</para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.FindREKCelebrityCmdlet.ImageName">
            <summary>
            <para>
            <para>S3 object key name.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.FindREKCelebrityCmdlet.ImageVersion">
            <summary>
            <para>
            <para>If the bucket is versioning enabled, you can specify the object version. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.FindREKCelebrityCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Rekognition.Model.RecognizeCelebritiesResponse).
            Specifying the name of a property of type Amazon.Rekognition.Model.RecognizeCelebritiesResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.REK.FindREKCustomLabelCmdlet">
            <summary>
            Detects custom labels in a supplied image by using an Amazon Rekognition Custom Labels
            model. 
            
             
            <para>
            You specify which version of a model version to use by using the <code>ProjectVersionArn</code>
            input parameter. 
            </para><para>
            You pass the input image as base64-encoded image bytes or as a reference to an image
            in an Amazon S3 bucket. If you use the AWS CLI to call Amazon Rekognition operations,
            passing image bytes is not supported. The image must be either a PNG or JPEG formatted
            file. 
            </para><para>
             For each object that the model version detects on an image, the API returns a (<code>CustomLabel</code>)
            object in an array (<code>CustomLabels</code>). Each <code>CustomLabel</code> object
            provides the label name (<code>Name</code>), the level of confidence that the image
            contains the object (<code>Confidence</code>), and object location information, if
            it exists, for the label on the image (<code>Geometry</code>). 
            </para><para>
            During training model calculates a threshold value that determines if a prediction
            for a label is true. By default, <code>DetectCustomLabels</code> doesn't return labels
            whose confidence value is below the model's calculated threshold value. To filter
            labels that are returned, specify a value for <code>MinConfidence</code> that is higher
            than the model's calculated threshold. You can get the model's calculated threshold
            from the model's training results shown in the Amazon Rekognition Custom Labels console.
            To get all labels, regardless of confidence, specify a <code>MinConfidence</code>
            value of 0. 
            </para><para>
            You can also add the <code>MaxResults</code> parameter to limit the number of labels
            returned. 
            </para><para>
            This is a stateless API operation. That is, the operation does not persist any data.
            </para><para>
            This operation requires permissions to perform the <code>rekognition:DetectCustomLabels</code>
            action. 
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.FindREKCustomLabelCmdlet.S3Object_Bucket">
            <summary>
            <para>
            <para>Name of the S3 bucket.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.FindREKCustomLabelCmdlet.Image_Byte">
            <summary>
            <para>
            <para>Blob of image bytes up to 5 MBs.</para>
            </para>
            <para>The cmdlet will automatically convert the supplied parameter of type string, string[], System.IO.FileInfo or System.IO.Stream to byte[] before supplying it to the service.</para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.FindREKCustomLabelCmdlet.MinConfidence">
            <summary>
            <para>
            <para>Specifies the minimum confidence level for the labels to return. Amazon Rekognition
            doesn't return any labels with a confidence lower than this specified value. If you
            specify a value of 0, all labels are return, regardless of the default thresholds
            that the model version applies.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.FindREKCustomLabelCmdlet.S3Object_Name">
            <summary>
            <para>
            <para>S3 object key name.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.FindREKCustomLabelCmdlet.ProjectVersionArn">
            <summary>
            <para>
            <para>The ARN of the model version that you want to use.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.FindREKCustomLabelCmdlet.S3Object_Version">
            <summary>
            <para>
            <para>If the bucket is versioning enabled, you can specify the object version. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.FindREKCustomLabelCmdlet.MaxResult">
            <summary>
            <para>
            <para>Maximum number of results you want the service to return in the response. The service
            returns the specified number of highest confidence labels ranked from highest confidence
            to lowest.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.FindREKCustomLabelCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'CustomLabels'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Rekognition.Model.DetectCustomLabelsResponse).
            Specifying the name of a property of type Amazon.Rekognition.Model.DetectCustomLabelsResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.FindREKCustomLabelCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the ProjectVersionArn parameter.
            The -PassThru parameter is deprecated, use -Select '^ProjectVersionArn' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.REK.FindREKFaceCmdlet">
            <summary>
            Detects faces within an image that is provided as input.
            
             
            <para><code>DetectFaces</code> detects the 100 largest faces in the image. For each face
            detected, the operation returns face details. These details include a bounding box
            of the face, a confidence value (that the bounding box contains a face), and a fixed
            set of attributes such as facial landmarks (for example, coordinates of eye and mouth),
            presence of beard, sunglasses, and so on. 
            </para><para>
            The face-detection algorithm is most effective on frontal faces. For non-frontal or
            obscured faces, the algorithm might not detect the faces or might detect faces with
            lower confidence. 
            </para><para>
            You pass the input image either as base64-encoded image bytes or as a reference to
            an image in an Amazon S3 bucket. If you use the AWS CLI to call Amazon Rekognition
            operations, passing image bytes is not supported. The image must be either a PNG or
            JPEG formatted file. 
            </para><note><para>
            This is a stateless API operation. That is, the operation does not persist any data.
            </para></note><para>
            This operation requires permissions to perform the <code>rekognition:DetectFaces</code>
            action. 
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.FindREKFaceCmdlet.Attribute">
            <summary>
            <para>
            <para>An array of facial attributes you want to be returned. This can be the default list
            of attributes or all attributes. If you don't specify a value for <code>Attributes</code>
            or if you specify <code>["DEFAULT"]</code>, the API returns the following subset of
            facial attributes: <code>BoundingBox</code>, <code>Confidence</code>, <code>Pose</code>,
            <code>Quality</code>, and <code>Landmarks</code>. If you provide <code>["ALL"]</code>,
            all facial attributes are returned, but the operation takes longer to complete.</para><para>If you provide both, <code>["ALL", "DEFAULT"]</code>, the service uses a logical AND
            operator to determine which attributes to return (in this case, all attributes). </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.FindREKFaceCmdlet.ImageBucket">
            <summary>
            <para>
            <para>Name of the S3 bucket.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.FindREKFaceCmdlet.ImageContent">
            <summary>
            <para>
            <para>Blob of image bytes up to 5 MBs.</para>
            </para>
            <para>The cmdlet will automatically convert the supplied parameter of type string, string[], System.IO.FileInfo or System.IO.Stream to byte[] before supplying it to the service.</para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.FindREKFaceCmdlet.ImageName">
            <summary>
            <para>
            <para>S3 object key name.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.FindREKFaceCmdlet.ImageVersion">
            <summary>
            <para>
            <para>If the bucket is versioning enabled, you can specify the object version. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.FindREKFaceCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Rekognition.Model.DetectFacesResponse).
            Specifying the name of a property of type Amazon.Rekognition.Model.DetectFacesResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.REK.FindREKLabelCmdlet">
            <summary>
            Detects instances of real-world entities within an image (JPEG or PNG) provided as
            input. This includes objects like flower, tree, and table; events like wedding, graduation,
            and birthday party; and concepts like landscape, evening, and nature. 
            
             
            <para>
            For an example, see Analyzing Images Stored in an Amazon S3 Bucket in the Amazon Rekognition
            Developer Guide.
            </para><note><para><code>DetectLabels</code> does not support the detection of activities. However,
            activity detection is supported for label detection in videos. For more information,
            see StartLabelDetection in the Amazon Rekognition Developer Guide.
            </para></note><para>
            You pass the input image as base64-encoded image bytes or as a reference to an image
            in an Amazon S3 bucket. If you use the AWS CLI to call Amazon Rekognition operations,
            passing image bytes is not supported. The image must be either a PNG or JPEG formatted
            file. 
            </para><para>
             For each object, scene, and concept the API returns one or more labels. Each label
            provides the object name, and the level of confidence that the image contains the
            object. For example, suppose the input image has a lighthouse, the sea, and a rock.
            The response includes all three labels, one for each object. 
            </para><para><code>{Name: lighthouse, Confidence: 98.4629}</code></para><para><code>{Name: rock,Confidence: 79.2097}</code></para><para><code> {Name: sea,Confidence: 75.061}</code></para><para>
            In the preceding example, the operation returns one label for each of the three objects.
            The operation can also return multiple labels for the same object in the image. For
            example, if the input image shows a flower (for example, a tulip), the operation might
            return the following three labels. 
            </para><para><code>{Name: flower,Confidence: 99.0562}</code></para><para><code>{Name: plant,Confidence: 99.0562}</code></para><para><code>{Name: tulip,Confidence: 99.0562}</code></para><para>
            In this example, the detection algorithm more precisely identifies the flower as a
            tulip.
            </para><para>
            In response, the API returns an array of labels. In addition, the response also includes
            the orientation correction. Optionally, you can specify <code>MinConfidence</code>
            to control the confidence threshold for the labels returned. The default is 55%. You
            can also add the <code>MaxLabels</code> parameter to limit the number of labels returned.
            
            </para><note><para>
            If the object detected is a person, the operation doesn't provide the same facial
            details that the <a>DetectFaces</a> operation provides.
            </para></note><para><code>DetectLabels</code> returns bounding boxes for instances of common object labels
            in an array of <a>Instance</a> objects. An <code>Instance</code> object contains a
            <a>BoundingBox</a> object, for the location of the label on the image. It also includes
            the confidence by which the bounding box was detected.
            </para><para><code>DetectLabels</code> also returns a hierarchical taxonomy of detected labels.
            For example, a detected car might be assigned the label <i>car</i>. The label <i>car</i>
            has two parent labels: <i>Vehicle</i> (its parent) and <i>Transportation</i> (its
            grandparent). The response returns the entire list of ancestors for a label. Each
            ancestor is a unique label in the response. In the previous example, <i>Car</i>, <i>Vehicle</i>,
            and <i>Transportation</i> are returned as unique labels in the response. 
            </para><para>
            This is a stateless API operation. That is, the operation does not persist any data.
            </para><para>
            This operation requires permissions to perform the <code>rekognition:DetectLabels</code>
            action. 
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.FindREKLabelCmdlet.ImageBucket">
            <summary>
            <para>
            <para>Name of the S3 bucket.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.FindREKLabelCmdlet.ImageContent">
            <summary>
            <para>
            <para>Blob of image bytes up to 5 MBs.</para>
            </para>
            <para>The cmdlet will automatically convert the supplied parameter of type string, string[], System.IO.FileInfo or System.IO.Stream to byte[] before supplying it to the service.</para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.FindREKLabelCmdlet.MaxLabel">
            <summary>
            <para>
            <para>Maximum number of labels you want the service to return in the response. The service
            returns the specified number of highest confidence labels. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.FindREKLabelCmdlet.MinConfidence">
            <summary>
            <para>
            <para>Specifies the minimum confidence level for the labels to return. Amazon Rekognition
            doesn't return any labels with confidence lower than this specified value.</para><para>If <code>MinConfidence</code> is not specified, the operation returns labels with
            a confidence values greater than or equal to 55 percent.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.FindREKLabelCmdlet.ImageName">
            <summary>
            <para>
            <para>S3 object key name.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.FindREKLabelCmdlet.ImageVersion">
            <summary>
            <para>
            <para>If the bucket is versioning enabled, you can specify the object version. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.FindREKLabelCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Rekognition.Model.DetectLabelsResponse).
            Specifying the name of a property of type Amazon.Rekognition.Model.DetectLabelsResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.REK.FindREKModerationLabelCmdlet">
            <summary>
            Detects unsafe content in a specified JPEG or PNG format image. Use <code>DetectModerationLabels</code>
            to moderate images depending on your requirements. For example, you might want to
            filter images that contain nudity, but not images containing suggestive content.
            
             
            <para>
            To filter images, use the labels returned by <code>DetectModerationLabels</code> to
            determine which types of content are appropriate.
            </para><para>
            For information about moderation labels, see Detecting Unsafe Content in the Amazon
            Rekognition Developer Guide.
            </para><para>
            You pass the input image either as base64-encoded image bytes or as a reference to
            an image in an Amazon S3 bucket. If you use the AWS CLI to call Amazon Rekognition
            operations, passing image bytes is not supported. The image must be either a PNG or
            JPEG formatted file. 
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.FindREKModerationLabelCmdlet.S3Object_Bucket">
            <summary>
            <para>
            <para>Name of the S3 bucket.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.FindREKModerationLabelCmdlet.Image_Byte">
            <summary>
            <para>
            <para>Blob of image bytes up to 5 MBs.</para>
            </para>
            <para>The cmdlet will automatically convert the supplied parameter of type string, string[], System.IO.FileInfo or System.IO.Stream to byte[] before supplying it to the service.</para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.FindREKModerationLabelCmdlet.DataAttributes_ContentClassifier">
            <summary>
            <para>
            <para>Sets whether the input image is free of personally identifiable information.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.FindREKModerationLabelCmdlet.HumanLoopConfig_FlowDefinitionArn">
            <summary>
            <para>
            <para>The Amazon Resource Name (ARN) of the flow definition.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.FindREKModerationLabelCmdlet.HumanLoopConfig_HumanLoopName">
            <summary>
            <para>
            <para>The name of the human review used for this image. This should be kept unique within
            a region.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.FindREKModerationLabelCmdlet.MinConfidence">
            <summary>
            <para>
            <para>Specifies the minimum confidence level for the labels to return. Amazon Rekognition
            doesn't return any labels with a confidence level lower than this specified value.</para><para>If you don't specify <code>MinConfidence</code>, the operation returns labels with
            confidence values greater than or equal to 50 percent.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.FindREKModerationLabelCmdlet.S3Object_Name">
            <summary>
            <para>
            <para>S3 object key name.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.FindREKModerationLabelCmdlet.S3Object_Version">
            <summary>
            <para>
            <para>If the bucket is versioning enabled, you can specify the object version. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.FindREKModerationLabelCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Rekognition.Model.DetectModerationLabelsResponse).
            Specifying the name of a property of type Amazon.Rekognition.Model.DetectModerationLabelsResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.REK.FindREKTextCmdlet">
            <summary>
            Detects text in the input image and converts it into machine-readable text.
            
             
            <para>
            Pass the input image as base64-encoded image bytes or as a reference to an image in
            an Amazon S3 bucket. If you use the AWS CLI to call Amazon Rekognition operations,
            you must pass it as a reference to an image in an Amazon S3 bucket. For the AWS CLI,
            passing image bytes is not supported. The image must be either a .png or .jpeg formatted
            file. 
            </para><para>
            The <code>DetectText</code> operation returns text in an array of <a>TextDetection</a>
            elements, <code>TextDetections</code>. Each <code>TextDetection</code> element provides
            information about a single word or line of text that was detected in the image. 
            </para><para>
            A word is one or more ISO basic latin script characters that are not separated by
            spaces. <code>DetectText</code> can detect up to 50 words in an image.
            </para><para>
            A line is a string of equally spaced words. A line isn't necessarily a complete sentence.
            For example, a driver's license number is detected as a line. A line ends when there
            is no aligned text after it. Also, a line ends when there is a large gap between words,
            relative to the length of the words. This means, depending on the gap between words,
            Amazon Rekognition may detect multiple lines in text aligned in the same direction.
            Periods don't represent the end of a line. If a sentence spans multiple lines, the
            <code>DetectText</code> operation returns multiple lines.
            </para><para>
            To determine whether a <code>TextDetection</code> element is a line of text or a word,
            use the <code>TextDetection</code> object <code>Type</code> field. 
            </para><para>
            To be detected, text must be within +/- 90 degrees orientation of the horizontal axis.
            </para><para>
            For more information, see DetectText in the Amazon Rekognition Developer Guide.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.FindREKTextCmdlet.ImageBucket">
            <summary>
            <para>
            <para>Name of the S3 bucket.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.FindREKTextCmdlet.ImageContent">
            <summary>
            <para>
            <para>Blob of image bytes up to 5 MBs.</para>
            </para>
            <para>The cmdlet will automatically convert the supplied parameter of type string, string[], System.IO.FileInfo or System.IO.Stream to byte[] before supplying it to the service.</para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.FindREKTextCmdlet.WordFilter_MinBoundingBoxHeight">
            <summary>
            <para>
            <para>Sets the minimum height of the word bounding box. Words with bounding box heights
            lesser than this value will be excluded from the result. Value is relative to the
            video frame height.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.FindREKTextCmdlet.WordFilter_MinBoundingBoxWidth">
            <summary>
            <para>
            <para>Sets the minimum width of the word bounding box. Words with bounding boxes widths
            lesser than this value will be excluded from the result. Value is relative to the
            video frame width.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.FindREKTextCmdlet.WordFilter_MinConfidence">
            <summary>
            <para>
            <para>Sets confidence of word detection. Words with detection confidence below this will
            be excluded from the result. Values should be between 0.5 and 1 as Text in Video will
            not return any result below 0.5.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.FindREKTextCmdlet.ImageName">
            <summary>
            <para>
            <para>S3 object key name.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.FindREKTextCmdlet.Filters_RegionsOfInterest">
            <summary>
            <para>
            <para> A Filter focusing on a certain area of the image. Uses a <code>BoundingBox</code>
            object to set the region of the image.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.FindREKTextCmdlet.ImageVersion">
            <summary>
            <para>
            <para>If the bucket is versioning enabled, you can specify the object version. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.FindREKTextCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'TextDetections'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Rekognition.Model.DetectTextResponse).
            Specifying the name of a property of type Amazon.Rekognition.Model.DetectTextResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.REK.GetREKCelebrityInfoCmdlet">
            <summary>
            Gets the name and additional information about a celebrity based on his or her Amazon
            Rekognition ID. The additional information is returned as an array of URLs. If there
            is no additional information about the celebrity, this list is empty.
            
             
            <para>
            For more information, see Recognizing Celebrities in an Image in the Amazon Rekognition
            Developer Guide.
            </para><para>
            This operation requires permissions to perform the <code>rekognition:GetCelebrityInfo</code>
            action. 
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.GetREKCelebrityInfoCmdlet.Id">
            <summary>
            <para>
            <para>The ID for the celebrity. You get the celebrity ID from a call to the <a>RecognizeCelebrities</a>
            operation, which recognizes celebrities in an image. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.GetREKCelebrityInfoCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Rekognition.Model.GetCelebrityInfoResponse).
            Specifying the name of a property of type Amazon.Rekognition.Model.GetCelebrityInfoResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.GetREKCelebrityInfoCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the Id parameter.
            The -PassThru parameter is deprecated, use -Select '^Id' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.REK.GetREKCelebrityRecognitionCmdlet">
            <summary>
            Gets the celebrity recognition results for a Amazon Rekognition Video analysis started
            by <a>StartCelebrityRecognition</a>.
            
             
            <para>
            Celebrity recognition in a video is an asynchronous operation. Analysis is started
            by a call to <a>StartCelebrityRecognition</a> which returns a job identifier (<code>JobId</code>).
            When the celebrity recognition operation finishes, Amazon Rekognition Video publishes
            a completion status to the Amazon Simple Notification Service topic registered in
            the initial call to <code>StartCelebrityRecognition</code>. To get the results of
            the celebrity recognition analysis, first check that the status value published to
            the Amazon SNS topic is <code>SUCCEEDED</code>. If so, call <code>GetCelebrityDetection</code>
            and pass the job identifier (<code>JobId</code>) from the initial call to <code>StartCelebrityDetection</code>.
            
            </para><para>
            For more information, see Working With Stored Videos in the Amazon Rekognition Developer
            Guide.
            </para><para><code>GetCelebrityRecognition</code> returns detected celebrities and the time(s)
            they are detected in an array (<code>Celebrities</code>) of <a>CelebrityRecognition</a>
            objects. Each <code>CelebrityRecognition</code> contains information about the celebrity
            in a <a>CelebrityDetail</a> object and the time, <code>Timestamp</code>, the celebrity
            was detected. 
            </para><note><para><code>GetCelebrityRecognition</code> only returns the default facial attributes (<code>BoundingBox</code>,
            <code>Confidence</code>, <code>Landmarks</code>, <code>Pose</code>, and <code>Quality</code>).
            The other facial attributes listed in the <code>Face</code> object of the following
            response syntax are not returned. For more information, see FaceDetail in the Amazon
            Rekognition Developer Guide. 
            </para></note><para>
            By default, the <code>Celebrities</code> array is sorted by time (milliseconds from
            the start of the video). You can also sort the array by celebrity by specifying the
            value <code>ID</code> in the <code>SortBy</code> input parameter.
            </para><para>
            The <code>CelebrityDetail</code> object includes the celebrity identifer and additional
            information urls. If you don't store the additional information urls, you can get
            them later by calling <a>GetCelebrityInfo</a> with the celebrity identifer.
            </para><para>
            No information is returned for faces not recognized as celebrities.
            </para><para>
            Use MaxResults parameter to limit the number of labels returned. If there are more
            results than specified in <code>MaxResults</code>, the value of <code>NextToken</code>
            in the operation response contains a pagination token for getting the next set of
            results. To get the next page of results, call <code>GetCelebrityDetection</code>
            and populate the <code>NextToken</code> request parameter with the token value returned
            from the previous call to <code>GetCelebrityRecognition</code>.
            </para><br/><br/>In the AWS.Tools.Rekognition module, this cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.GetREKCelebrityRecognitionCmdlet.JobId">
            <summary>
            <para>
            <para>Job identifier for the required celebrity recognition analysis. You can get the job
            identifer from a call to <code>StartCelebrityRecognition</code>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.GetREKCelebrityRecognitionCmdlet.SortBy">
            <summary>
            <para>
            <para>Sort to use for celebrities returned in <code>Celebrities</code> field. Specify <code>ID</code>
            to sort by the celebrity identifier, specify <code>TIMESTAMP</code> to sort by the
            time the celebrity was recognized.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.GetREKCelebrityRecognitionCmdlet.MaxResult">
            <summary>
            <para>
            <para>Maximum number of results to return per paginated call. The largest value you can
            specify is 1000. If you specify a value greater than 1000, a maximum of 1000 results
            is returned. The default value is 1000.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.GetREKCelebrityRecognitionCmdlet.NextToken">
            <summary>
            <para>
            <para>If the previous response was incomplete (because there is more recognized celebrities
            to retrieve), Amazon Rekognition Video returns a pagination token in the response.
            You can use this pagination token to retrieve the next set of celebrities. </para>
            </para>
            <para>
            <br/><b>Note:</b> In the AWS.Tools.Rekognition module, this parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.GetREKCelebrityRecognitionCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Rekognition.Model.GetCelebrityRecognitionResponse).
            Specifying the name of a property of type Amazon.Rekognition.Model.GetCelebrityRecognitionResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.GetREKCelebrityRecognitionCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.REK.GetREKCollectionCmdlet">
            <summary>
            Describes the specified collection. You can use <code>DescribeCollection</code> to
            get information, such as the number of faces indexed into a collection and the version
            of the model used by the collection for face detection.
            
             
            <para>
            For more information, see Describing a Collection in the Amazon Rekognition Developer
            Guide.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.GetREKCollectionCmdlet.CollectionId">
            <summary>
            <para>
            <para>The ID of the collection to describe.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.GetREKCollectionCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Rekognition.Model.DescribeCollectionResponse).
            Specifying the name of a property of type Amazon.Rekognition.Model.DescribeCollectionResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.GetREKCollectionCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the CollectionId parameter.
            The -PassThru parameter is deprecated, use -Select '^CollectionId' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.REK.GetREKCollectionIdListCmdlet">
            <summary>
            Returns list of collection IDs in your account. If the result is truncated, the response
            also provides a <code>NextToken</code> that you can use in the subsequent request
            to fetch the next set of collection IDs.
            
             
            <para>
            For an example, see Listing Collections in the Amazon Rekognition Developer Guide.
            </para><para>
            This operation requires permissions to perform the <code>rekognition:ListCollections</code>
            action.
            </para><br/><br/>In the AWS.Tools.Rekognition module, this cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.GetREKCollectionIdListCmdlet.MaxResult">
            <summary>
            <para>
            <para>Maximum number of collection IDs to return. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.GetREKCollectionIdListCmdlet.NextToken">
            <summary>
            <para>
            <para>Pagination token from the previous response.</para>
            </para>
            <para>
            <br/><b>Note:</b> In the AWS.Tools.Rekognition module, this parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.GetREKCollectionIdListCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Rekognition.Model.ListCollectionsResponse).
            Specifying the name of a property of type Amazon.Rekognition.Model.ListCollectionsResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.GetREKCollectionIdListCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.REK.GetREKContentModerationCmdlet">
            <summary>
            Gets the unsafe content analysis results for a Amazon Rekognition Video analysis started
            by <a>StartContentModeration</a>.
            
             
            <para>
            Unsafe content analysis of a video is an asynchronous operation. You start analysis
            by calling <a>StartContentModeration</a> which returns a job identifier (<code>JobId</code>).
            When analysis finishes, Amazon Rekognition Video publishes a completion status to
            the Amazon Simple Notification Service topic registered in the initial call to <code>StartContentModeration</code>.
            To get the results of the unsafe content analysis, first check that the status value
            published to the Amazon SNS topic is <code>SUCCEEDED</code>. If so, call <code>GetContentModeration</code>
            and pass the job identifier (<code>JobId</code>) from the initial call to <code>StartContentModeration</code>.
            
            </para><para>
            For more information, see Working with Stored Videos in the Amazon Rekognition Devlopers
            Guide.
            </para><para><code>GetContentModeration</code> returns detected unsafe content labels, and the
            time they are detected, in an array, <code>ModerationLabels</code>, of <a>ContentModerationDetection</a>
            objects. 
            </para><para>
            By default, the moderated labels are returned sorted by time, in milliseconds from
            the start of the video. You can also sort them by moderated label by specifying <code>NAME</code>
            for the <code>SortBy</code> input parameter. 
            </para><para>
            Since video analysis can return a large number of results, use the <code>MaxResults</code>
            parameter to limit the number of labels returned in a single call to <code>GetContentModeration</code>.
            If there are more results than specified in <code>MaxResults</code>, the value of
            <code>NextToken</code> in the operation response contains a pagination token for getting
            the next set of results. To get the next page of results, call <code>GetContentModeration</code>
            and populate the <code>NextToken</code> request parameter with the value of <code>NextToken</code>
            returned from the previous call to <code>GetContentModeration</code>.
            </para><para>
            For more information, see Detecting Unsafe Content in the Amazon Rekognition Developer
            Guide.
            </para><br/><br/>In the AWS.Tools.Rekognition module, this cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.GetREKContentModerationCmdlet.JobId">
            <summary>
            <para>
            <para>The identifier for the unsafe content job. Use <code>JobId</code> to identify the
            job in a subsequent call to <code>GetContentModeration</code>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.GetREKContentModerationCmdlet.SortBy">
            <summary>
            <para>
            <para>Sort to use for elements in the <code>ModerationLabelDetections</code> array. Use
            <code>TIMESTAMP</code> to sort array elements by the time labels are detected. Use
            <code>NAME</code> to alphabetically group elements for a label together. Within each
            label group, the array element are sorted by detection confidence. The default sort
            is by <code>TIMESTAMP</code>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.GetREKContentModerationCmdlet.MaxResult">
            <summary>
            <para>
            <para>Maximum number of results to return per paginated call. The largest value you can
            specify is 1000. If you specify a value greater than 1000, a maximum of 1000 results
            is returned. The default value is 1000.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.GetREKContentModerationCmdlet.NextToken">
            <summary>
            <para>
            <para>If the previous response was incomplete (because there is more data to retrieve),
            Amazon Rekognition returns a pagination token in the response. You can use this pagination
            token to retrieve the next set of unsafe content labels.</para>
            </para>
            <para>
            <br/><b>Note:</b> In the AWS.Tools.Rekognition module, this parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.GetREKContentModerationCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Rekognition.Model.GetContentModerationResponse).
            Specifying the name of a property of type Amazon.Rekognition.Model.GetContentModerationResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.GetREKContentModerationCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.REK.GetREKFaceDetectionCmdlet">
            <summary>
            Gets face detection results for a Amazon Rekognition Video analysis started by <a>StartFaceDetection</a>.
            
             
            <para>
            Face detection with Amazon Rekognition Video is an asynchronous operation. You start
            face detection by calling <a>StartFaceDetection</a> which returns a job identifier
            (<code>JobId</code>). When the face detection operation finishes, Amazon Rekognition
            Video publishes a completion status to the Amazon Simple Notification Service topic
            registered in the initial call to <code>StartFaceDetection</code>. To get the results
            of the face detection operation, first check that the status value published to the
            Amazon SNS topic is <code>SUCCEEDED</code>. If so, call <a>GetFaceDetection</a> and
            pass the job identifier (<code>JobId</code>) from the initial call to <code>StartFaceDetection</code>.
            </para><para><code>GetFaceDetection</code> returns an array of detected faces (<code>Faces</code>)
            sorted by the time the faces were detected. 
            </para><para>
            Use MaxResults parameter to limit the number of labels returned. If there are more
            results than specified in <code>MaxResults</code>, the value of <code>NextToken</code>
            in the operation response contains a pagination token for getting the next set of
            results. To get the next page of results, call <code>GetFaceDetection</code> and populate
            the <code>NextToken</code> request parameter with the token value returned from the
            previous call to <code>GetFaceDetection</code>.
            </para><br/><br/>In the AWS.Tools.Rekognition module, this cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.GetREKFaceDetectionCmdlet.JobId">
            <summary>
            <para>
            <para>Unique identifier for the face detection job. The <code>JobId</code> is returned from
            <code>StartFaceDetection</code>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.GetREKFaceDetectionCmdlet.MaxResult">
            <summary>
            <para>
            <para>Maximum number of results to return per paginated call. The largest value you can
            specify is 1000. If you specify a value greater than 1000, a maximum of 1000 results
            is returned. The default value is 1000.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.GetREKFaceDetectionCmdlet.NextToken">
            <summary>
            <para>
            <para>If the previous response was incomplete (because there are more faces to retrieve),
            Amazon Rekognition Video returns a pagination token in the response. You can use this
            pagination token to retrieve the next set of faces.</para>
            </para>
            <para>
            <br/><b>Note:</b> In the AWS.Tools.Rekognition module, this parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.GetREKFaceDetectionCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Rekognition.Model.GetFaceDetectionResponse).
            Specifying the name of a property of type Amazon.Rekognition.Model.GetFaceDetectionResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.GetREKFaceDetectionCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the JobId parameter.
            The -PassThru parameter is deprecated, use -Select '^JobId' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.GetREKFaceDetectionCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.REK.GetREKFaceListCmdlet">
            <summary>
            Returns metadata for faces in the specified collection. This metadata includes information
            such as the bounding box coordinates, the confidence (that the bounding box contains
            a face), and face ID. For an example, see Listing Faces in a Collection in the Amazon
            Rekognition Developer Guide.
            
             
            <para>
            This operation requires permissions to perform the <code>rekognition:ListFaces</code>
            action.
            </para><br/><br/>In the AWS.Tools.Rekognition module, this cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.GetREKFaceListCmdlet.CollectionId">
            <summary>
            <para>
            <para>ID of the collection from which to list the faces.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.GetREKFaceListCmdlet.MaxResult">
            <summary>
            <para>
            <para>Maximum number of faces to return.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.GetREKFaceListCmdlet.NextToken">
            <summary>
            <para>
            <para>If the previous response was incomplete (because there is more data to retrieve),
            Amazon Rekognition returns a pagination token in the response. You can use this pagination
            token to retrieve the next set of faces.</para>
            </para>
            <para>
            <br/><b>Note:</b> In the AWS.Tools.Rekognition module, this parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.GetREKFaceListCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Rekognition.Model.ListFacesResponse).
            Specifying the name of a property of type Amazon.Rekognition.Model.ListFacesResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.GetREKFaceListCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the CollectionId parameter.
            The -PassThru parameter is deprecated, use -Select '^CollectionId' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.GetREKFaceListCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.REK.GetREKFaceSearchCmdlet">
            <summary>
            Gets the face search results for Amazon Rekognition Video face search started by <a>StartFaceSearch</a>.
            The search returns faces in a collection that match the faces of persons detected
            in a video. It also includes the time(s) that faces are matched in the video.
            
             
            <para>
            Face search in a video is an asynchronous operation. You start face search by calling
            to <a>StartFaceSearch</a> which returns a job identifier (<code>JobId</code>). When
            the search operation finishes, Amazon Rekognition Video publishes a completion status
            to the Amazon Simple Notification Service topic registered in the initial call to
            <code>StartFaceSearch</code>. To get the search results, first check that the status
            value published to the Amazon SNS topic is <code>SUCCEEDED</code>. If so, call <code>GetFaceSearch</code>
            and pass the job identifier (<code>JobId</code>) from the initial call to <code>StartFaceSearch</code>.
            </para><para>
            For more information, see Searching Faces in a Collection in the Amazon Rekognition
            Developer Guide.
            </para><para>
            The search results are retured in an array, <code>Persons</code>, of <a>PersonMatch</a>
            objects. Each<code>PersonMatch</code> element contains details about the matching
            faces in the input collection, person information (facial attributes, bounding boxes,
            and person identifer) for the matched person, and the time the person was matched
            in the video.
            </para><note><para><code>GetFaceSearch</code> only returns the default facial attributes (<code>BoundingBox</code>,
            <code>Confidence</code>, <code>Landmarks</code>, <code>Pose</code>, and <code>Quality</code>).
            The other facial attributes listed in the <code>Face</code> object of the following
            response syntax are not returned. For more information, see FaceDetail in the Amazon
            Rekognition Developer Guide. 
            </para></note><para>
            By default, the <code>Persons</code> array is sorted by the time, in milliseconds
            from the start of the video, persons are matched. You can also sort by persons by
            specifying <code>INDEX</code> for the <code>SORTBY</code> input parameter.
            </para><br/><br/>In the AWS.Tools.Rekognition module, this cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.GetREKFaceSearchCmdlet.JobId">
            <summary>
            <para>
            <para>The job identifer for the search request. You get the job identifier from an initial
            call to <code>StartFaceSearch</code>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.GetREKFaceSearchCmdlet.SortBy">
            <summary>
            <para>
            <para>Sort to use for grouping faces in the response. Use <code>TIMESTAMP</code> to group
            faces by the time that they are recognized. Use <code>INDEX</code> to sort by recognized
            faces. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.GetREKFaceSearchCmdlet.MaxResult">
            <summary>
            <para>
            <para>Maximum number of results to return per paginated call. The largest value you can
            specify is 1000. If you specify a value greater than 1000, a maximum of 1000 results
            is returned. The default value is 1000.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.GetREKFaceSearchCmdlet.NextToken">
            <summary>
            <para>
            <para>If the previous response was incomplete (because there is more search results to retrieve),
            Amazon Rekognition Video returns a pagination token in the response. You can use this
            pagination token to retrieve the next set of search results. </para>
            </para>
            <para>
            <br/><b>Note:</b> In the AWS.Tools.Rekognition module, this parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.GetREKFaceSearchCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Rekognition.Model.GetFaceSearchResponse).
            Specifying the name of a property of type Amazon.Rekognition.Model.GetFaceSearchResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.GetREKFaceSearchCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.REK.GetREKLabelDetectionCmdlet">
            <summary>
            Gets the label detection results of a Amazon Rekognition Video analysis started by
            <a>StartLabelDetection</a>. 
            
             
            <para>
            The label detection operation is started by a call to <a>StartLabelDetection</a> which
            returns a job identifier (<code>JobId</code>). When the label detection operation
            finishes, Amazon Rekognition publishes a completion status to the Amazon Simple Notification
            Service topic registered in the initial call to <code>StartlabelDetection</code>.
            To get the results of the label detection operation, first check that the status value
            published to the Amazon SNS topic is <code>SUCCEEDED</code>. If so, call <a>GetLabelDetection</a>
            and pass the job identifier (<code>JobId</code>) from the initial call to <code>StartLabelDetection</code>.
            </para><para><code>GetLabelDetection</code> returns an array of detected labels (<code>Labels</code>)
            sorted by the time the labels were detected. You can also sort by the label name by
            specifying <code>NAME</code> for the <code>SortBy</code> input parameter.
            </para><para>
            The labels returned include the label name, the percentage confidence in the accuracy
            of the detected label, and the time the label was detected in the video.
            </para><para>
            The returned labels also include bounding box information for common objects, a hierarchical
            taxonomy of detected labels, and the version of the label model used for detection.
            </para><para>
            Use MaxResults parameter to limit the number of labels returned. If there are more
            results than specified in <code>MaxResults</code>, the value of <code>NextToken</code>
            in the operation response contains a pagination token for getting the next set of
            results. To get the next page of results, call <code>GetlabelDetection</code> and
            populate the <code>NextToken</code> request parameter with the token value returned
            from the previous call to <code>GetLabelDetection</code>.
            </para><br/><br/>In the AWS.Tools.Rekognition module, this cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.GetREKLabelDetectionCmdlet.JobId">
            <summary>
            <para>
            <para>Job identifier for the label detection operation for which you want results returned.
            You get the job identifer from an initial call to <code>StartlabelDetection</code>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.GetREKLabelDetectionCmdlet.SortBy">
            <summary>
            <para>
            <para>Sort to use for elements in the <code>Labels</code> array. Use <code>TIMESTAMP</code>
            to sort array elements by the time labels are detected. Use <code>NAME</code> to alphabetically
            group elements for a label together. Within each label group, the array element are
            sorted by detection confidence. The default sort is by <code>TIMESTAMP</code>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.GetREKLabelDetectionCmdlet.MaxResult">
            <summary>
            <para>
            <para>Maximum number of results to return per paginated call. The largest value you can
            specify is 1000. If you specify a value greater than 1000, a maximum of 1000 results
            is returned. The default value is 1000.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.GetREKLabelDetectionCmdlet.NextToken">
            <summary>
            <para>
            <para>If the previous response was incomplete (because there are more labels to retrieve),
            Amazon Rekognition Video returns a pagination token in the response. You can use this
            pagination token to retrieve the next set of labels. </para>
            </para>
            <para>
            <br/><b>Note:</b> In the AWS.Tools.Rekognition module, this parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.GetREKLabelDetectionCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Rekognition.Model.GetLabelDetectionResponse).
            Specifying the name of a property of type Amazon.Rekognition.Model.GetLabelDetectionResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.GetREKLabelDetectionCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.REK.GetREKPersonTrackingCmdlet">
            <summary>
            Gets the path tracking results of a Amazon Rekognition Video analysis started by <a>StartPersonTracking</a>.
            
             
            <para>
            The person path tracking operation is started by a call to <code>StartPersonTracking</code>
            which returns a job identifier (<code>JobId</code>). When the operation finishes,
            Amazon Rekognition Video publishes a completion status to the Amazon Simple Notification
            Service topic registered in the initial call to <code>StartPersonTracking</code>.
            </para><para>
            To get the results of the person path tracking operation, first check that the status
            value published to the Amazon SNS topic is <code>SUCCEEDED</code>. If so, call <a>GetPersonTracking</a>
            and pass the job identifier (<code>JobId</code>) from the initial call to <code>StartPersonTracking</code>.
            </para><para><code>GetPersonTracking</code> returns an array, <code>Persons</code>, of tracked
            persons and the time(s) their paths were tracked in the video. 
            </para><note><para><code>GetPersonTracking</code> only returns the default facial attributes (<code>BoundingBox</code>,
            <code>Confidence</code>, <code>Landmarks</code>, <code>Pose</code>, and <code>Quality</code>).
            The other facial attributes listed in the <code>Face</code> object of the following
            response syntax are not returned. 
            </para><para>
            For more information, see FaceDetail in the Amazon Rekognition Developer Guide.
            </para></note><para>
            By default, the array is sorted by the time(s) a person's path is tracked in the video.
            You can sort by tracked persons by specifying <code>INDEX</code> for the <code>SortBy</code>
            input parameter.
            </para><para>
            Use the <code>MaxResults</code> parameter to limit the number of items returned. If
            there are more results than specified in <code>MaxResults</code>, the value of <code>NextToken</code>
            in the operation response contains a pagination token for getting the next set of
            results. To get the next page of results, call <code>GetPersonTracking</code> and
            populate the <code>NextToken</code> request parameter with the token value returned
            from the previous call to <code>GetPersonTracking</code>.
            </para><br/><br/>In the AWS.Tools.Rekognition module, this cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.GetREKPersonTrackingCmdlet.JobId">
            <summary>
            <para>
            <para>The identifier for a job that tracks persons in a video. You get the <code>JobId</code>
            from a call to <code>StartPersonTracking</code>. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.GetREKPersonTrackingCmdlet.SortBy">
            <summary>
            <para>
            <para>Sort to use for elements in the <code>Persons</code> array. Use <code>TIMESTAMP</code>
            to sort array elements by the time persons are detected. Use <code>INDEX</code> to
            sort by the tracked persons. If you sort by <code>INDEX</code>, the array elements
            for each person are sorted by detection confidence. The default sort is by <code>TIMESTAMP</code>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.GetREKPersonTrackingCmdlet.MaxResult">
            <summary>
            <para>
            <para>Maximum number of results to return per paginated call. The largest value you can
            specify is 1000. If you specify a value greater than 1000, a maximum of 1000 results
            is returned. The default value is 1000.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.GetREKPersonTrackingCmdlet.NextToken">
            <summary>
            <para>
            <para>If the previous response was incomplete (because there are more persons to retrieve),
            Amazon Rekognition Video returns a pagination token in the response. You can use this
            pagination token to retrieve the next set of persons. </para>
            </para>
            <para>
            <br/><b>Note:</b> In the AWS.Tools.Rekognition module, this parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.GetREKPersonTrackingCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Rekognition.Model.GetPersonTrackingResponse).
            Specifying the name of a property of type Amazon.Rekognition.Model.GetPersonTrackingResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.GetREKPersonTrackingCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.REK.GetREKProjectCmdlet">
            <summary>
            Lists and gets information about your Amazon Rekognition Custom Labels projects.
            
             
            <para>
            This operation requires permissions to perform the <code>rekognition:DescribeProjects</code>
            action.
            </para><br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.GetREKProjectCmdlet.MaxResult">
            <summary>
            <para>
            <para>The maximum number of results to return per paginated call. The largest value you
            can specify is 100. If you specify a value greater than 100, a ValidationException
            error occurs. The default value is 100. </para>
            </para>
            <para>
            <br/><b>Note:</b> In AWSPowerShell and AWSPowerShell.NetCore this parameter is used to limit the total number of items returned by the cmdlet.
            <br/>In AWS.Tools this parameter is simply passed to the service to specify how many items should be returned by each service call.
            <br/>Pipe the output of this cmdlet into Select-Object -First to terminate retrieving data pages early and control the number of items returned.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.GetREKProjectCmdlet.NextToken">
            <summary>
            <para>
            <para>If the previous response was incomplete (because there is more results to retrieve),
            Amazon Rekognition Custom Labels returns a pagination token in the response. You can
            use this pagination token to retrieve the next set of results. </para>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.GetREKProjectCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'ProjectDescriptions'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Rekognition.Model.DescribeProjectsResponse).
            Specifying the name of a property of type Amazon.Rekognition.Model.DescribeProjectsResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.GetREKProjectCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.REK.GetREKProjectVersionCmdlet">
            <summary>
            Lists and describes the models in an Amazon Rekognition Custom Labels project. You
            can specify up to 10 model versions in <code>ProjectVersionArns</code>. If you don't
            specify a value, descriptions for all models are returned.
            
             
            <para>
            This operation requires permissions to perform the <code>rekognition:DescribeProjectVersions</code>
            action.
            </para><br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.GetREKProjectVersionCmdlet.ProjectArn">
            <summary>
            <para>
            <para>The Amazon Resource Name (ARN) of the project that contains the models you want to
            describe.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.GetREKProjectVersionCmdlet.VersionName">
            <summary>
            <para>
            <para>A list of model version names that you want to describe. You can add up to 10 model
            version names to the list. If you don't specify a value, all model descriptions are
            returned.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.GetREKProjectVersionCmdlet.MaxResult">
            <summary>
            <para>
            <para>The maximum number of results to return per paginated call. The largest value you
            can specify is 100. If you specify a value greater than 100, a ValidationException
            error occurs. The default value is 100. </para>
            </para>
            <para>
            <br/><b>Note:</b> In AWSPowerShell and AWSPowerShell.NetCore this parameter is used to limit the total number of items returned by the cmdlet.
            <br/>In AWS.Tools this parameter is simply passed to the service to specify how many items should be returned by each service call.
            <br/>Pipe the output of this cmdlet into Select-Object -First to terminate retrieving data pages early and control the number of items returned.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.GetREKProjectVersionCmdlet.NextToken">
            <summary>
            <para>
            <para>If the previous response was incomplete (because there is more results to retrieve),
            Amazon Rekognition Custom Labels returns a pagination token in the response. You can
            use this pagination token to retrieve the next set of results. </para>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.GetREKProjectVersionCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'ProjectVersionDescriptions'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Rekognition.Model.DescribeProjectVersionsResponse).
            Specifying the name of a property of type Amazon.Rekognition.Model.DescribeProjectVersionsResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.GetREKProjectVersionCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the ProjectArn parameter.
            The -PassThru parameter is deprecated, use -Select '^ProjectArn' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.GetREKProjectVersionCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.REK.GetREKStreamProcessorCmdlet">
            <summary>
            Provides information about a stream processor created by <a>CreateStreamProcessor</a>.
            You can get information about the input and output streams, the input parameters for
            the face recognition being performed, and the current status of the stream processor.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.GetREKStreamProcessorCmdlet.Name">
            <summary>
            <para>
            <para>Name of the stream processor for which you want information.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.GetREKStreamProcessorCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Rekognition.Model.DescribeStreamProcessorResponse).
            Specifying the name of a property of type Amazon.Rekognition.Model.DescribeStreamProcessorResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.GetREKStreamProcessorCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the Name parameter.
            The -PassThru parameter is deprecated, use -Select '^Name' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.REK.GetREKStreamProcessorListCmdlet">
            <summary>
            Gets a list of stream processors that you have created with <a>CreateStreamProcessor</a>.<br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.GetREKStreamProcessorListCmdlet.MaxResult">
            <summary>
            <para>
            <para>Maximum number of stream processors you want Amazon Rekognition Video to return in
            the response. The default is 1000. </para>
            </para>
            <para>
            <br/><b>Note:</b> In AWSPowerShell and AWSPowerShell.NetCore this parameter is used to limit the total number of items returned by the cmdlet.
            <br/>In AWS.Tools this parameter is simply passed to the service to specify how many items should be returned by each service call.
            <br/>Pipe the output of this cmdlet into Select-Object -First to terminate retrieving data pages early and control the number of items returned.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.GetREKStreamProcessorListCmdlet.NextToken">
            <summary>
            <para>
            <para>If the previous response was incomplete (because there are more stream processors
            to retrieve), Amazon Rekognition Video returns a pagination token in the response.
            You can use this pagination token to retrieve the next set of stream processors. </para>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.GetREKStreamProcessorListCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'StreamProcessors'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Rekognition.Model.ListStreamProcessorsResponse).
            Specifying the name of a property of type Amazon.Rekognition.Model.ListStreamProcessorsResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.GetREKStreamProcessorListCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.REK.GetREKTextDetectionCmdlet">
            <summary>
            Gets the text detection results of a Amazon Rekognition Video analysis started by
            <a>StartTextDetection</a>.
            
             
            <para>
            Text detection with Amazon Rekognition Video is an asynchronous operation. You start
            text detection by calling <a>StartTextDetection</a> which returns a job identifier
            (<code>JobId</code>) When the text detection operation finishes, Amazon Rekognition
            publishes a completion status to the Amazon Simple Notification Service topic registered
            in the initial call to <code>StartTextDetection</code>. To get the results of the
            text detection operation, first check that the status value published to the Amazon
            SNS topic is <code>SUCCEEDED</code>. if so, call <code>GetTextDetection</code> and
            pass the job identifier (<code>JobId</code>) from the initial call of <code>StartLabelDetection</code>.
            </para><para><code>GetTextDetection</code> returns an array of detected text (<code>TextDetections</code>)
            sorted by the time the text was detected, up to 50 words per frame of video.
            </para><para>
            Each element of the array includes the detected text, the precentage confidence in
            the acuracy of the detected text, the time the text was detected, bounding box information
            for where the text was located, and unique identifiers for words and their lines.
            </para><para>
            Use MaxResults parameter to limit the number of text detections returned. If there
            are more results than specified in <code>MaxResults</code>, the value of <code>NextToken</code>
            in the operation response contains a pagination token for getting the next set of
            results. To get the next page of results, call <code>GetTextDetection</code> and populate
            the <code>NextToken</code> request parameter with the token value returned from the
            previous call to <code>GetTextDetection</code>.
            </para><br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.GetREKTextDetectionCmdlet.JobId">
            <summary>
            <para>
            <para>Job identifier for the label detection operation for which you want results returned.
            You get the job identifer from an initial call to <code>StartTextDetection</code>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.GetREKTextDetectionCmdlet.MaxResult">
            <summary>
            <para>
            <para>Maximum number of results to return per paginated call. The largest value you can
            specify is 1000.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.GetREKTextDetectionCmdlet.NextToken">
            <summary>
            <para>
            <para>If the previous response was incomplete (because there are more labels to retrieve),
            Amazon Rekognition Video returns a pagination token in the response. You can use this
            pagination token to retrieve the next set of text.</para>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.GetREKTextDetectionCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Rekognition.Model.GetTextDetectionResponse).
            Specifying the name of a property of type Amazon.Rekognition.Model.GetTextDetectionResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.GetREKTextDetectionCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the JobId parameter.
            The -PassThru parameter is deprecated, use -Select '^JobId' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.GetREKTextDetectionCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.REK.NewREKCollectionCmdlet">
            <summary>
            Creates a collection in an AWS Region. You can add faces to the collection using the
            <a>IndexFaces</a> operation. 
            
             
            <para>
            For example, you might create collections, one for each of your application users.
            A user can then index faces using the <code>IndexFaces</code> operation and persist
            results in a specific collection. Then, a user can search the collection for faces
            in the user-specific container. 
            </para><para>
            When you create a collection, it is associated with the latest version of the face
            model version.
            </para><note><para>
            Collection names are case-sensitive.
            </para></note><para>
            This operation requires permissions to perform the <code>rekognition:CreateCollection</code>
            action.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.NewREKCollectionCmdlet.CollectionId">
            <summary>
            <para>
            <para>ID for the collection that you are creating.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.NewREKCollectionCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Rekognition.Model.CreateCollectionResponse).
            Specifying the name of a property of type Amazon.Rekognition.Model.CreateCollectionResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.NewREKCollectionCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the CollectionId parameter.
            The -PassThru parameter is deprecated, use -Select '^CollectionId' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.NewREKCollectionCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.REK.NewREKProjectCmdlet">
            <summary>
            Creates a new Amazon Rekognition Custom Labels project. A project is a logical grouping
            of resources (images, Labels, models) and operations (training, evaluation and detection).
            
            
             
            <para>
            This operation requires permissions to perform the <code>rekognition:CreateProject</code>
            action.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.NewREKProjectCmdlet.ProjectName">
            <summary>
            <para>
            <para>The name of the project to create.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.NewREKProjectCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'ProjectArn'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Rekognition.Model.CreateProjectResponse).
            Specifying the name of a property of type Amazon.Rekognition.Model.CreateProjectResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.NewREKProjectCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the ProjectName parameter.
            The -PassThru parameter is deprecated, use -Select '^ProjectName' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.NewREKProjectCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.REK.NewREKProjectVersionCmdlet">
            <summary>
            Creates a new version of a model and begins training. Models are managed as part of
            an Amazon Rekognition Custom Labels project. You can specify one training dataset
            and one testing dataset. The response from <code>CreateProjectVersion</code> is an
            Amazon Resource Name (ARN) for the version of the model. 
            
             
            <para>
            Training takes a while to complete. You can get the current status by calling <a>DescribeProjectVersions</a>.
            </para><para>
            Once training has successfully completed, call <a>DescribeProjectVersions</a> to get
            the training results and evaluate the model. 
            </para><para>
            After evaluating the model, you start the model by calling <a>StartProjectVersion</a>.
            </para><para>
            This operation requires permissions to perform the <code>rekognition:CreateProjectVersion</code>
            action.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.NewREKProjectVersionCmdlet.TestingData_Asset">
            <summary>
            <para>
            <para>The assets used for testing.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.NewREKProjectVersionCmdlet.TrainingData_Asset">
            <summary>
            <para>
            <para>A Sagemaker GroundTruth manifest file that contains the training images (assets).</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.NewREKProjectVersionCmdlet.TestingData_AutoCreate">
            <summary>
            <para>
            <para>If specified, Amazon Rekognition Custom Labels creates a testing dataset with an 80/20
            split of the training dataset.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.NewREKProjectVersionCmdlet.ProjectArn">
            <summary>
            <para>
            <para>The ARN of the Amazon Rekognition Custom Labels project that manages the model that
            you want to train.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.NewREKProjectVersionCmdlet.OutputConfig_S3Bucket">
            <summary>
            <para>
            <para>The S3 bucket where training output is placed.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.NewREKProjectVersionCmdlet.OutputConfig_S3KeyPrefix">
            <summary>
            <para>
            <para>The prefix applied to the training output files. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.NewREKProjectVersionCmdlet.VersionName">
            <summary>
            <para>
            <para>A name for the version of the model. This value must be unique.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.NewREKProjectVersionCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'ProjectVersionArn'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Rekognition.Model.CreateProjectVersionResponse).
            Specifying the name of a property of type Amazon.Rekognition.Model.CreateProjectVersionResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.NewREKProjectVersionCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the VersionName parameter.
            The -PassThru parameter is deprecated, use -Select '^VersionName' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.NewREKProjectVersionCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.REK.NewREKStreamProcessorCmdlet">
            <summary>
            Creates an Amazon Rekognition stream processor that you can use to detect and recognize
            faces in a streaming video.
            
             
            <para>
            Amazon Rekognition Video is a consumer of live video from Amazon Kinesis Video Streams.
            Amazon Rekognition Video sends analysis results to Amazon Kinesis Data Streams.
            </para><para>
            You provide as input a Kinesis video stream (<code>Input</code>) and a Kinesis data
            stream (<code>Output</code>) stream. You also specify the face recognition criteria
            in <code>Settings</code>. For example, the collection containing faces that you want
            to recognize. Use <code>Name</code> to assign an identifier for the stream processor.
            You use <code>Name</code> to manage the stream processor. For example, you can start
            processing the source video by calling <a>StartStreamProcessor</a> with the <code>Name</code>
            field. 
            </para><para>
            After you have finished analyzing a streaming video, use <a>StopStreamProcessor</a>
            to stop processing. You can delete the stream processor by calling <a>DeleteStreamProcessor</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.NewREKStreamProcessorCmdlet.KinesisVideoStream_Arn">
            <summary>
            <para>
            <para>ARN of the Kinesis video stream stream that streams the source video.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.NewREKStreamProcessorCmdlet.KinesisDataStream_Arn">
            <summary>
            <para>
            <para>ARN of the output Amazon Kinesis Data Streams stream.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.NewREKStreamProcessorCmdlet.FaceSearch_CollectionId">
            <summary>
            <para>
            <para>The ID of a collection that contains faces that you want to search for.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.NewREKStreamProcessorCmdlet.FaceSearch_FaceMatchThreshold">
            <summary>
            <para>
            <para>Minimum face match confidence score that must be met to return a result for a recognized
            face. Default is 80. 0 is the lowest confidence. 100 is the highest confidence.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.NewREKStreamProcessorCmdlet.Name">
            <summary>
            <para>
            <para>An identifier you assign to the stream processor. You can use <code>Name</code> to
            manage the stream processor. For example, you can get the current status of the stream
            processor by calling <a>DescribeStreamProcessor</a>. <code>Name</code> is idempotent.
            </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.NewREKStreamProcessorCmdlet.RoleArn">
            <summary>
            <para>
            <para>ARN of the IAM role that allows access to the stream processor.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.NewREKStreamProcessorCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'StreamProcessorArn'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Rekognition.Model.CreateStreamProcessorResponse).
            Specifying the name of a property of type Amazon.Rekognition.Model.CreateStreamProcessorResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.NewREKStreamProcessorCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the Name parameter.
            The -PassThru parameter is deprecated, use -Select '^Name' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.NewREKStreamProcessorCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.REK.RemoveREKCollectionCmdlet">
            <summary>
            Deletes the specified collection. Note that this operation removes all faces in the
            collection. For an example, see <a>delete-collection-procedure</a>.
            
             
            <para>
            This operation requires permissions to perform the <code>rekognition:DeleteCollection</code>
            action.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.RemoveREKCollectionCmdlet.CollectionId">
            <summary>
            <para>
            <para>ID of the collection to delete.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.RemoveREKCollectionCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'StatusCode'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Rekognition.Model.DeleteCollectionResponse).
            Specifying the name of a property of type Amazon.Rekognition.Model.DeleteCollectionResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.RemoveREKCollectionCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the CollectionId parameter.
            The -PassThru parameter is deprecated, use -Select '^CollectionId' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.RemoveREKCollectionCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.REK.RemoveREKFaceCmdlet">
            <summary>
            Deletes faces from a collection. You specify a collection ID and an array of face
            IDs to remove from the collection.
            
             
            <para>
            This operation requires permissions to perform the <code>rekognition:DeleteFaces</code>
            action.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.RemoveREKFaceCmdlet.CollectionId">
            <summary>
            <para>
            <para>Collection from which to remove the specific faces.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.RemoveREKFaceCmdlet.FaceId">
            <summary>
            <para>
            <para>An array of face IDs to delete.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.RemoveREKFaceCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'DeletedFaces'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Rekognition.Model.DeleteFacesResponse).
            Specifying the name of a property of type Amazon.Rekognition.Model.DeleteFacesResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.RemoveREKFaceCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the FaceId parameter.
            The -PassThru parameter is deprecated, use -Select '^FaceId' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.RemoveREKFaceCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.REK.RemoveREKProjectCmdlet">
            <summary>
            Deletes an Amazon Rekognition Custom Labels project. To delete a project you must
            first delete all versions of the model associated with the project. To delete a version
            of a model, see <a>DeleteProjectVersion</a>.
            
             
            <para>
            This operation requires permissions to perform the <code>rekognition:DeleteProject</code>
            action. 
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.RemoveREKProjectCmdlet.ProjectArn">
            <summary>
            <para>
            <para>The Amazon Resource Name (ARN) of the project that you want to delete.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.RemoveREKProjectCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'Status'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Rekognition.Model.DeleteProjectResponse).
            Specifying the name of a property of type Amazon.Rekognition.Model.DeleteProjectResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.RemoveREKProjectCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the ProjectArn parameter.
            The -PassThru parameter is deprecated, use -Select '^ProjectArn' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.RemoveREKProjectCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.REK.RemoveREKProjectVersionCmdlet">
            <summary>
            Deletes a version of a model. 
            
             
            <para>
            You must first stop the model before you can delete it. To check if a model is running,
            use the <code>Status</code> field returned from <a>DescribeProjectVersions</a>. To
            stop a running model call <a>StopProjectVersion</a>. 
            </para><para>
            This operation requires permissions to perform the <code>rekognition:DeleteProjectVersion</code>
            action. 
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.RemoveREKProjectVersionCmdlet.ProjectVersionArn">
            <summary>
            <para>
            <para>The Amazon Resource Name (ARN) of the model version that you want to delete.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.RemoveREKProjectVersionCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'Status'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Rekognition.Model.DeleteProjectVersionResponse).
            Specifying the name of a property of type Amazon.Rekognition.Model.DeleteProjectVersionResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.RemoveREKProjectVersionCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the ProjectVersionArn parameter.
            The -PassThru parameter is deprecated, use -Select '^ProjectVersionArn' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.RemoveREKProjectVersionCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.REK.RemoveREKStreamProcessorCmdlet">
            <summary>
            Deletes the stream processor identified by <code>Name</code>. You assign the value
            for <code>Name</code> when you create the stream processor with <a>CreateStreamProcessor</a>.
            You might not be able to use the same name for a stream processor for a few seconds
            after calling <code>DeleteStreamProcessor</code>.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.RemoveREKStreamProcessorCmdlet.Name">
            <summary>
            <para>
            <para>The name of the stream processor you want to delete.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.RemoveREKStreamProcessorCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The cmdlet doesn't have a return value by default.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Rekognition.Model.DeleteStreamProcessorResponse).
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.RemoveREKStreamProcessorCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the Name parameter.
            The -PassThru parameter is deprecated, use -Select '^Name' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.RemoveREKStreamProcessorCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.REK.SearchREKFaceCmdlet">
            <summary>
            For a given input face ID, searches for matching faces in the collection the face
            belongs to. You get a face ID when you add a face to the collection using the <a>IndexFaces</a>
            operation. The operation compares the features of the input face with faces in the
            specified collection. 
            
             <note><para>
            You can also search faces without indexing faces by using the <code>SearchFacesByImage</code>
            operation.
            </para></note><para>
             The operation response returns an array of faces that match, ordered by similarity
            score with the highest similarity first. More specifically, it is an array of metadata
            for each face match that is found. Along with the metadata, the response also includes
            a <code>confidence</code> value for each face match, indicating the confidence that
            the specific face matches the input face. 
            </para><para>
            For an example, see Searching for a Face Using Its Face ID in the Amazon Rekognition
            Developer Guide.
            </para><para>
            This operation requires permissions to perform the <code>rekognition:SearchFaces</code>
            action.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.SearchREKFaceCmdlet.CollectionId">
            <summary>
            <para>
            <para>ID of the collection the face belongs to.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.SearchREKFaceCmdlet.FaceId">
            <summary>
            <para>
            <para>ID of a face to find matches for in the collection.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.SearchREKFaceCmdlet.FaceMatchThreshold">
            <summary>
            <para>
            <para>Optional value specifying the minimum confidence in the face match to return. For
            example, don't return any matches where confidence in matches is less than 70%. The
            default value is 80%. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.SearchREKFaceCmdlet.MaxFace">
            <summary>
            <para>
            <para>Maximum number of faces to return. The operation returns the maximum number of faces
            with the highest confidence in the match.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.SearchREKFaceCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Rekognition.Model.SearchFacesResponse).
            Specifying the name of a property of type Amazon.Rekognition.Model.SearchFacesResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.SearchREKFaceCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the CollectionId parameter.
            The -PassThru parameter is deprecated, use -Select '^CollectionId' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.SearchREKFaceCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.REK.SearchREKFacesByImageCmdlet">
            <summary>
            For a given input image, first detects the largest face in the image, and then searches
            the specified collection for matching faces. The operation compares the features of
            the input face with faces in the specified collection. 
            
             <note><para>
            To search for all faces in an input image, you might first call the <a>IndexFaces</a>
            operation, and then use the face IDs returned in subsequent calls to the <a>SearchFaces</a>
            operation. 
            </para><para>
             You can also call the <code>DetectFaces</code> operation and use the bounding boxes
            in the response to make face crops, which then you can pass in to the <code>SearchFacesByImage</code>
            operation. 
            </para></note><para>
            You pass the input image either as base64-encoded image bytes or as a reference to
            an image in an Amazon S3 bucket. If you use the AWS CLI to call Amazon Rekognition
            operations, passing image bytes is not supported. The image must be either a PNG or
            JPEG formatted file. 
            </para><para>
             The response returns an array of faces that match, ordered by similarity score with
            the highest similarity first. More specifically, it is an array of metadata for each
            face match found. Along with the metadata, the response also includes a <code>similarity</code>
            indicating how similar the face is to the input face. In the response, the operation
            also returns the bounding box (and a confidence level that the bounding box contains
            a face) of the face that Amazon Rekognition used for the input image. 
            </para><para>
            For an example, Searching for a Face Using an Image in the Amazon Rekognition Developer
            Guide.
            </para><para>
            The <code>QualityFilter</code> input parameter allows you to filter out detected faces
            that don’t meet a required quality bar. The quality bar is based on a variety of common
            use cases. Use <code>QualityFilter</code> to set the quality bar for filtering by
            specifying <code>LOW</code>, <code>MEDIUM</code>, or <code>HIGH</code>. If you do
            not want to filter detected faces, specify <code>NONE</code>. The default value is
            <code>NONE</code>.
            </para><note><para>
            To use quality filtering, you need a collection associated with version 3 of the face
            model or higher. To get the version of the face model associated with a collection,
            call <a>DescribeCollection</a>. 
            </para></note><para>
            This operation requires permissions to perform the <code>rekognition:SearchFacesByImage</code>
            action.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.SearchREKFacesByImageCmdlet.ImageBucket">
            <summary>
            <para>
            <para>Name of the S3 bucket.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.SearchREKFacesByImageCmdlet.ImageContent">
            <summary>
            <para>
            <para>Blob of image bytes up to 5 MBs.</para>
            </para>
            <para>The cmdlet will automatically convert the supplied parameter of type string, string[], System.IO.FileInfo or System.IO.Stream to byte[] before supplying it to the service.</para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.SearchREKFacesByImageCmdlet.CollectionId">
            <summary>
            <para>
            <para>ID of the collection to search.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.SearchREKFacesByImageCmdlet.FaceMatchThreshold">
            <summary>
            <para>
            <para>(Optional) Specifies the minimum confidence in the face match to return. For example,
            don't return any matches where confidence in matches is less than 70%. The default
            value is 80%.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.SearchREKFacesByImageCmdlet.MaxFace">
            <summary>
            <para>
            <para>Maximum number of faces to return. The operation returns the maximum number of faces
            with the highest confidence in the match.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.SearchREKFacesByImageCmdlet.ImageName">
            <summary>
            <para>
            <para>S3 object key name.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.SearchREKFacesByImageCmdlet.QualityFilter">
            <summary>
            <para>
            <para>A filter that specifies a quality bar for how much filtering is done to identify faces.
            Filtered faces aren't searched for in the collection. If you specify <code>AUTO</code>,
            Amazon Rekognition chooses the quality bar. If you specify <code>LOW</code>, <code>MEDIUM</code>,
            or <code>HIGH</code>, filtering removes all faces that don’t meet the chosen quality
            bar. The quality bar is based on a variety of common use cases. Low-quality detections
            can occur for a number of reasons. Some examples are an object that's misidentified
            as a face, a face that's too blurry, or a face with a pose that's too extreme to use.
            If you specify <code>NONE</code>, no filtering is performed. The default value is
            <code>NONE</code>. </para><para>To use quality filtering, the collection you are using must be associated with version
            3 of the face model or higher.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.SearchREKFacesByImageCmdlet.ImageVersion">
            <summary>
            <para>
            <para>If the bucket is versioning enabled, you can specify the object version. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.SearchREKFacesByImageCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Rekognition.Model.SearchFacesByImageResponse).
            Specifying the name of a property of type Amazon.Rekognition.Model.SearchFacesByImageResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.SearchREKFacesByImageCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the CollectionId parameter.
            The -PassThru parameter is deprecated, use -Select '^CollectionId' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.SearchREKFacesByImageCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.REK.StartREKCelebrityRecognitionCmdlet">
            <summary>
            Starts asynchronous recognition of celebrities in a stored video.
            
             
            <para>
            Amazon Rekognition Video can detect celebrities in a video must be stored in an Amazon
            S3 bucket. Use <a>Video</a> to specify the bucket name and the filename of the video.
            <code>StartCelebrityRecognition</code> returns a job identifier (<code>JobId</code>)
            which you use to get the results of the analysis. When celebrity recognition analysis
            is finished, Amazon Rekognition Video publishes a completion status to the Amazon
            Simple Notification Service topic that you specify in <code>NotificationChannel</code>.
            To get the results of the celebrity recognition analysis, first check that the status
            value published to the Amazon SNS topic is <code>SUCCEEDED</code>. If so, call <a>GetCelebrityRecognition</a>
            and pass the job identifier (<code>JobId</code>) from the initial call to <code>StartCelebrityRecognition</code>.
            
            </para><para>
            For more information, see Recognizing Celebrities in the Amazon Rekognition Developer
            Guide.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.StartREKCelebrityRecognitionCmdlet.ClientRequestToken">
            <summary>
            <para>
            <para>Idempotent token used to identify the start request. If you use the same token with
            multiple <code>StartCelebrityRecognition</code> requests, the same <code>JobId</code>
            is returned. Use <code>ClientRequestToken</code> to prevent the same job from being
            accidently started more than once. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.StartREKCelebrityRecognitionCmdlet.JobTag">
            <summary>
            <para>
            <para>An identifier you specify that's returned in the completion notification that's published
            to your Amazon Simple Notification Service topic. For example, you can use <code>JobTag</code>
            to group related jobs and identify them in the completion notification.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.StartREKCelebrityRecognitionCmdlet.NotificationChannel_RoleArn">
            <summary>
            <para>
            <para>The ARN of an IAM role that gives Amazon Rekognition publishing permissions to the
            Amazon SNS topic. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.StartREKCelebrityRecognitionCmdlet.NotificationChannel_SNSTopicArn">
            <summary>
            <para>
            <para>The Amazon SNS topic to which Amazon Rekognition to posts the completion status.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.StartREKCelebrityRecognitionCmdlet.Video">
            <summary>
            <para>
            <para>The video in which you want to recognize celebrities. The video must be stored in
            an Amazon S3 bucket.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.StartREKCelebrityRecognitionCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'JobId'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Rekognition.Model.StartCelebrityRecognitionResponse).
            Specifying the name of a property of type Amazon.Rekognition.Model.StartCelebrityRecognitionResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.StartREKCelebrityRecognitionCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.REK.StartREKContentModerationCmdlet">
            <summary>
            Starts asynchronous detection of unsafe content in a stored video.
            
             
            <para>
            Amazon Rekognition Video can moderate content in a video stored in an Amazon S3 bucket.
            Use <a>Video</a> to specify the bucket name and the filename of the video. <code>StartContentModeration</code>
            returns a job identifier (<code>JobId</code>) which you use to get the results of
            the analysis. When unsafe content analysis is finished, Amazon Rekognition Video publishes
            a completion status to the Amazon Simple Notification Service topic that you specify
            in <code>NotificationChannel</code>.
            </para><para>
            To get the results of the unsafe content analysis, first check that the status value
            published to the Amazon SNS topic is <code>SUCCEEDED</code>. If so, call <a>GetContentModeration</a>
            and pass the job identifier (<code>JobId</code>) from the initial call to <code>StartContentModeration</code>.
            
            </para><para>
            For more information, see Detecting Unsafe Content in the Amazon Rekognition Developer
            Guide.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.StartREKContentModerationCmdlet.ClientRequestToken">
            <summary>
            <para>
            <para>Idempotent token used to identify the start request. If you use the same token with
            multiple <code>StartContentModeration</code> requests, the same <code>JobId</code>
            is returned. Use <code>ClientRequestToken</code> to prevent the same job from being
            accidently started more than once. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.StartREKContentModerationCmdlet.JobTag">
            <summary>
            <para>
            <para>An identifier you specify that's returned in the completion notification that's published
            to your Amazon Simple Notification Service topic. For example, you can use <code>JobTag</code>
            to group related jobs and identify them in the completion notification.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.StartREKContentModerationCmdlet.MinConfidence">
            <summary>
            <para>
            <para>Specifies the minimum confidence that Amazon Rekognition must have in order to return
            a moderated content label. Confidence represents how certain Amazon Rekognition is
            that the moderated content is correctly identified. 0 is the lowest confidence. 100
            is the highest confidence. Amazon Rekognition doesn't return any moderated content
            labels with a confidence level lower than this specified value. If you don't specify
            <code>MinConfidence</code>, <code>GetContentModeration</code> returns labels with
            confidence values greater than or equal to 50 percent.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.StartREKContentModerationCmdlet.NotificationChannel_RoleArn">
            <summary>
            <para>
            <para>The ARN of an IAM role that gives Amazon Rekognition publishing permissions to the
            Amazon SNS topic. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.StartREKContentModerationCmdlet.NotificationChannel_SNSTopicArn">
            <summary>
            <para>
            <para>The Amazon SNS topic to which Amazon Rekognition to posts the completion status.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.StartREKContentModerationCmdlet.Video">
            <summary>
            <para>
            <para>The video in which you want to detect unsafe content. The video must be stored in
            an Amazon S3 bucket.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.StartREKContentModerationCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'JobId'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Rekognition.Model.StartContentModerationResponse).
            Specifying the name of a property of type Amazon.Rekognition.Model.StartContentModerationResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.StartREKContentModerationCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.REK.StartREKFaceDetectionCmdlet">
            <summary>
            Starts asynchronous detection of faces in a stored video.
            
             
            <para>
            Amazon Rekognition Video can detect faces in a video stored in an Amazon S3 bucket.
            Use <a>Video</a> to specify the bucket name and the filename of the video. <code>StartFaceDetection</code>
            returns a job identifier (<code>JobId</code>) that you use to get the results of the
            operation. When face detection is finished, Amazon Rekognition Video publishes a completion
            status to the Amazon Simple Notification Service topic that you specify in <code>NotificationChannel</code>.
            To get the results of the face detection operation, first check that the status value
            published to the Amazon SNS topic is <code>SUCCEEDED</code>. If so, call <a>GetFaceDetection</a>
            and pass the job identifier (<code>JobId</code>) from the initial call to <code>StartFaceDetection</code>.
            </para><para>
            For more information, see Detecting Faces in a Stored Video in the Amazon Rekognition
            Developer Guide.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.StartREKFaceDetectionCmdlet.ClientRequestToken">
            <summary>
            <para>
            <para>Idempotent token used to identify the start request. If you use the same token with
            multiple <code>StartFaceDetection</code> requests, the same <code>JobId</code> is
            returned. Use <code>ClientRequestToken</code> to prevent the same job from being accidently
            started more than once. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.StartREKFaceDetectionCmdlet.FaceAttribute">
            <summary>
            <para>
            <para>The face attributes you want returned.</para><para><code>DEFAULT</code> - The following subset of facial attributes are returned: BoundingBox,
            Confidence, Pose, Quality and Landmarks. </para><para><code>ALL</code> - All facial attributes are returned.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.StartREKFaceDetectionCmdlet.JobTag">
            <summary>
            <para>
            <para>An identifier you specify that's returned in the completion notification that's published
            to your Amazon Simple Notification Service topic. For example, you can use <code>JobTag</code>
            to group related jobs and identify them in the completion notification.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.StartREKFaceDetectionCmdlet.NotificationChannel_RoleArn">
            <summary>
            <para>
            <para>The ARN of an IAM role that gives Amazon Rekognition publishing permissions to the
            Amazon SNS topic. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.StartREKFaceDetectionCmdlet.NotificationChannel_SNSTopicArn">
            <summary>
            <para>
            <para>The Amazon SNS topic to which Amazon Rekognition to posts the completion status.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.StartREKFaceDetectionCmdlet.Video">
            <summary>
            <para>
            <para>The video in which you want to detect faces. The video must be stored in an Amazon
            S3 bucket.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.StartREKFaceDetectionCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'JobId'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Rekognition.Model.StartFaceDetectionResponse).
            Specifying the name of a property of type Amazon.Rekognition.Model.StartFaceDetectionResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.StartREKFaceDetectionCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.REK.StartREKFaceSearchCmdlet">
            <summary>
            Starts the asynchronous search for faces in a collection that match the faces of persons
            detected in a stored video.
            
             
            <para>
            The video must be stored in an Amazon S3 bucket. Use <a>Video</a> to specify the bucket
            name and the filename of the video. <code>StartFaceSearch</code> returns a job identifier
            (<code>JobId</code>) which you use to get the search results once the search has completed.
            When searching is finished, Amazon Rekognition Video publishes a completion status
            to the Amazon Simple Notification Service topic that you specify in <code>NotificationChannel</code>.
            To get the search results, first check that the status value published to the Amazon
            SNS topic is <code>SUCCEEDED</code>. If so, call <a>GetFaceSearch</a> and pass the
            job identifier (<code>JobId</code>) from the initial call to <code>StartFaceSearch</code>.
            For more information, see <a>procedure-person-search-videos</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.StartREKFaceSearchCmdlet.ClientRequestToken">
            <summary>
            <para>
            <para>Idempotent token used to identify the start request. If you use the same token with
            multiple <code>StartFaceSearch</code> requests, the same <code>JobId</code> is returned.
            Use <code>ClientRequestToken</code> to prevent the same job from being accidently
            started more than once. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.StartREKFaceSearchCmdlet.CollectionId">
            <summary>
            <para>
            <para>ID of the collection that contains the faces you want to search for.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.StartREKFaceSearchCmdlet.FaceMatchThreshold">
            <summary>
            <para>
            <para>The minimum confidence in the person match to return. For example, don't return any
            matches where confidence in matches is less than 70%. The default value is 80%.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.StartREKFaceSearchCmdlet.JobTag">
            <summary>
            <para>
            <para>An identifier you specify that's returned in the completion notification that's published
            to your Amazon Simple Notification Service topic. For example, you can use <code>JobTag</code>
            to group related jobs and identify them in the completion notification.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.StartREKFaceSearchCmdlet.NotificationChannel_RoleArn">
            <summary>
            <para>
            <para>The ARN of an IAM role that gives Amazon Rekognition publishing permissions to the
            Amazon SNS topic. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.StartREKFaceSearchCmdlet.NotificationChannel_SNSTopicArn">
            <summary>
            <para>
            <para>The Amazon SNS topic to which Amazon Rekognition to posts the completion status.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.StartREKFaceSearchCmdlet.Video">
            <summary>
            <para>
            <para>The video you want to search. The video must be stored in an Amazon S3 bucket. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.StartREKFaceSearchCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'JobId'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Rekognition.Model.StartFaceSearchResponse).
            Specifying the name of a property of type Amazon.Rekognition.Model.StartFaceSearchResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.StartREKFaceSearchCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the CollectionId parameter.
            The -PassThru parameter is deprecated, use -Select '^CollectionId' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.StartREKFaceSearchCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.REK.StartREKLabelDetectionCmdlet">
            <summary>
            Starts asynchronous detection of labels in a stored video.
            
             
            <para>
            Amazon Rekognition Video can detect labels in a video. Labels are instances of real-world
            entities. This includes objects like flower, tree, and table; events like wedding,
            graduation, and birthday party; concepts like landscape, evening, and nature; and
            activities like a person getting out of a car or a person skiing.
            </para><para>
            The video must be stored in an Amazon S3 bucket. Use <a>Video</a> to specify the bucket
            name and the filename of the video. <code>StartLabelDetection</code> returns a job
            identifier (<code>JobId</code>) which you use to get the results of the operation.
            When label detection is finished, Amazon Rekognition Video publishes a completion
            status to the Amazon Simple Notification Service topic that you specify in <code>NotificationChannel</code>.
            </para><para>
            To get the results of the label detection operation, first check that the status value
            published to the Amazon SNS topic is <code>SUCCEEDED</code>. If so, call <a>GetLabelDetection</a>
            and pass the job identifier (<code>JobId</code>) from the initial call to <code>StartLabelDetection</code>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.StartREKLabelDetectionCmdlet.ClientRequestToken">
            <summary>
            <para>
            <para>Idempotent token used to identify the start request. If you use the same token with
            multiple <code>StartLabelDetection</code> requests, the same <code>JobId</code> is
            returned. Use <code>ClientRequestToken</code> to prevent the same job from being accidently
            started more than once. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.StartREKLabelDetectionCmdlet.JobTag">
            <summary>
            <para>
            <para>An identifier you specify that's returned in the completion notification that's published
            to your Amazon Simple Notification Service topic. For example, you can use <code>JobTag</code>
            to group related jobs and identify them in the completion notification.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.StartREKLabelDetectionCmdlet.MinConfidence">
            <summary>
            <para>
            <para>Specifies the minimum confidence that Amazon Rekognition Video must have in order
            to return a detected label. Confidence represents how certain Amazon Rekognition is
            that a label is correctly identified.0 is the lowest confidence. 100 is the highest
            confidence. Amazon Rekognition Video doesn't return any labels with a confidence level
            lower than this specified value.</para><para>If you don't specify <code>MinConfidence</code>, the operation returns labels with
            confidence values greater than or equal to 50 percent.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.StartREKLabelDetectionCmdlet.NotificationChannel_RoleArn">
            <summary>
            <para>
            <para>The ARN of an IAM role that gives Amazon Rekognition publishing permissions to the
            Amazon SNS topic. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.StartREKLabelDetectionCmdlet.NotificationChannel_SNSTopicArn">
            <summary>
            <para>
            <para>The Amazon SNS topic to which Amazon Rekognition to posts the completion status.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.StartREKLabelDetectionCmdlet.Video">
            <summary>
            <para>
            <para>The video in which you want to detect labels. The video must be stored in an Amazon
            S3 bucket.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.StartREKLabelDetectionCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'JobId'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Rekognition.Model.StartLabelDetectionResponse).
            Specifying the name of a property of type Amazon.Rekognition.Model.StartLabelDetectionResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.StartREKLabelDetectionCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.REK.StartREKPersonTrackingCmdlet">
            <summary>
            Starts the asynchronous tracking of a person's path in a stored video.
            
             
            <para>
            Amazon Rekognition Video can track the path of people in a video stored in an Amazon
            S3 bucket. Use <a>Video</a> to specify the bucket name and the filename of the video.
            <code>StartPersonTracking</code> returns a job identifier (<code>JobId</code>) which
            you use to get the results of the operation. When label detection is finished, Amazon
            Rekognition publishes a completion status to the Amazon Simple Notification Service
            topic that you specify in <code>NotificationChannel</code>. 
            </para><para>
            To get the results of the person detection operation, first check that the status
            value published to the Amazon SNS topic is <code>SUCCEEDED</code>. If so, call <a>GetPersonTracking</a>
            and pass the job identifier (<code>JobId</code>) from the initial call to <code>StartPersonTracking</code>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.StartREKPersonTrackingCmdlet.ClientRequestToken">
            <summary>
            <para>
            <para>Idempotent token used to identify the start request. If you use the same token with
            multiple <code>StartPersonTracking</code> requests, the same <code>JobId</code> is
            returned. Use <code>ClientRequestToken</code> to prevent the same job from being accidently
            started more than once. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.StartREKPersonTrackingCmdlet.JobTag">
            <summary>
            <para>
            <para>An identifier you specify that's returned in the completion notification that's published
            to your Amazon Simple Notification Service topic. For example, you can use <code>JobTag</code>
            to group related jobs and identify them in the completion notification.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.StartREKPersonTrackingCmdlet.NotificationChannel_RoleArn">
            <summary>
            <para>
            <para>The ARN of an IAM role that gives Amazon Rekognition publishing permissions to the
            Amazon SNS topic. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.StartREKPersonTrackingCmdlet.NotificationChannel_SNSTopicArn">
            <summary>
            <para>
            <para>The Amazon SNS topic to which Amazon Rekognition to posts the completion status.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.StartREKPersonTrackingCmdlet.Video">
            <summary>
            <para>
            <para>The video in which you want to detect people. The video must be stored in an Amazon
            S3 bucket.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.StartREKPersonTrackingCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'JobId'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Rekognition.Model.StartPersonTrackingResponse).
            Specifying the name of a property of type Amazon.Rekognition.Model.StartPersonTrackingResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.StartREKPersonTrackingCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.REK.StartREKProjectVersionCmdlet">
            <summary>
            Starts the running of the version of a model. Starting a model takes a while to complete.
            To check the current state of the model, use <a>DescribeProjectVersions</a>.
            
             
            <para>
            Once the model is running, you can detect custom labels in new images by calling <a>DetectCustomLabels</a>.
            </para><note><para>
            You are charged for the amount of time that the model is running. To stop a running
            model, call <a>StopProjectVersion</a>.
            </para></note><para>
            This operation requires permissions to perform the <code>rekognition:StartProjectVersion</code>
            action.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.StartREKProjectVersionCmdlet.MinInferenceUnit">
            <summary>
            <para>
            <para>The minimum number of inference units to use. A single inference unit represents 1
            hour of processing and can support up to 5 Transaction Pers Second (TPS). Use a higher
            number to increase the TPS throughput of your model. You are charged for the number
            of inference units that you use. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.StartREKProjectVersionCmdlet.ProjectVersionArn">
            <summary>
            <para>
            <para>The Amazon Resource Name(ARN) of the model version that you want to start.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.StartREKProjectVersionCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'Status'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Rekognition.Model.StartProjectVersionResponse).
            Specifying the name of a property of type Amazon.Rekognition.Model.StartProjectVersionResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.StartREKProjectVersionCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the ProjectVersionArn parameter.
            The -PassThru parameter is deprecated, use -Select '^ProjectVersionArn' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.StartREKProjectVersionCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.REK.StartREKStreamProcessorCmdlet">
            <summary>
            Starts processing a stream processor. You create a stream processor by calling <a>CreateStreamProcessor</a>.
            To tell <code>StartStreamProcessor</code> which stream processor to start, use the
            value of the <code>Name</code> field specified in the call to <code>CreateStreamProcessor</code>.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.StartREKStreamProcessorCmdlet.Name">
            <summary>
            <para>
            <para>The name of the stream processor to start processing.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.StartREKStreamProcessorCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The cmdlet doesn't have a return value by default.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Rekognition.Model.StartStreamProcessorResponse).
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.StartREKStreamProcessorCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the Name parameter.
            The -PassThru parameter is deprecated, use -Select '^Name' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.StartREKStreamProcessorCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.REK.StartREKTextDetectionCmdlet">
            <summary>
            Starts asynchronous detection of text in a stored video.
            
             
            <para>
            Amazon Rekognition Video can detect text in a video stored in an Amazon S3 bucket.
            Use <a>Video</a> to specify the bucket name and the filename of the video. <code>StartTextDetection</code>
            returns a job identifier (<code>JobId</code>) which you use to get the results of
            the operation. When text detection is finished, Amazon Rekognition Video publishes
            a completion status to the Amazon Simple Notification Service topic that you specify
            in <code>NotificationChannel</code>.
            </para><para>
            To get the results of the text detection operation, first check that the status value
            published to the Amazon SNS topic is <code>SUCCEEDED</code>. if so, call <a>GetTextDetection</a>
            and pass the job identifier (<code>JobId</code>) from the initial call to <code>StartTextDetection</code>.
            
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.StartREKTextDetectionCmdlet.ClientRequestToken">
            <summary>
            <para>
            <para>Idempotent token used to identify the start request. If you use the same token with
            multiple <code>StartTextDetection</code> requests, the same <code>JobId</code> is
            returned. Use <code>ClientRequestToken</code> to prevent the same job from being accidentaly
            started more than once.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.StartREKTextDetectionCmdlet.JobTag">
            <summary>
            <para>
            <para>An identifier returned in the completion status published by your Amazon Simple Notification
            Service topic. For example, you can use <code>JobTag</code> to group related jobs
            and identify them in the completion notification.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.StartREKTextDetectionCmdlet.WordFilter_MinBoundingBoxHeight">
            <summary>
            <para>
            <para>Sets the minimum height of the word bounding box. Words with bounding box heights
            lesser than this value will be excluded from the result. Value is relative to the
            video frame height.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.StartREKTextDetectionCmdlet.WordFilter_MinBoundingBoxWidth">
            <summary>
            <para>
            <para>Sets the minimum width of the word bounding box. Words with bounding boxes widths
            lesser than this value will be excluded from the result. Value is relative to the
            video frame width.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.StartREKTextDetectionCmdlet.WordFilter_MinConfidence">
            <summary>
            <para>
            <para>Sets confidence of word detection. Words with detection confidence below this will
            be excluded from the result. Values should be between 0.5 and 1 as Text in Video will
            not return any result below 0.5.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.StartREKTextDetectionCmdlet.Filters_RegionsOfInterest">
            <summary>
            <para>
            <para>Filter focusing on a certain area of the frame. Uses a <code>BoundingBox</code> object
            to set the region of the screen.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.StartREKTextDetectionCmdlet.NotificationChannel_RoleArn">
            <summary>
            <para>
            <para>The ARN of an IAM role that gives Amazon Rekognition publishing permissions to the
            Amazon SNS topic. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.StartREKTextDetectionCmdlet.NotificationChannel_SNSTopicArn">
            <summary>
            <para>
            <para>The Amazon SNS topic to which Amazon Rekognition to posts the completion status.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.StartREKTextDetectionCmdlet.Video">
            <summary>
            <para>
            The service has not provided documentation for this parameter; please refer to the service's API reference documentation for the latest available information.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.StartREKTextDetectionCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'JobId'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Rekognition.Model.StartTextDetectionResponse).
            Specifying the name of a property of type Amazon.Rekognition.Model.StartTextDetectionResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.StartREKTextDetectionCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the Video parameter.
            The -PassThru parameter is deprecated, use -Select '^Video' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.StartREKTextDetectionCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.REK.StopREKProjectVersionCmdlet">
            <summary>
            Stops a running model. The operation might take a while to complete. To check the
            current status, call <a>DescribeProjectVersions</a>.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.StopREKProjectVersionCmdlet.ProjectVersionArn">
            <summary>
            <para>
            <para>The Amazon Resource Name (ARN) of the model version that you want to delete.</para><para>This operation requires permissions to perform the <code>rekognition:StopProjectVersion</code>
            action.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.StopREKProjectVersionCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'Status'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Rekognition.Model.StopProjectVersionResponse).
            Specifying the name of a property of type Amazon.Rekognition.Model.StopProjectVersionResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.StopREKProjectVersionCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the ProjectVersionArn parameter.
            The -PassThru parameter is deprecated, use -Select '^ProjectVersionArn' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.StopREKProjectVersionCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.REK.StopREKStreamProcessorCmdlet">
            <summary>
            Stops a running stream processor that was created by <a>CreateStreamProcessor</a>.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.StopREKStreamProcessorCmdlet.Name">
            <summary>
            <para>
            <para>The name of a stream processor created by <a>CreateStreamProcessor</a>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.StopREKStreamProcessorCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The cmdlet doesn't have a return value by default.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Rekognition.Model.StopStreamProcessorResponse).
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.StopREKStreamProcessorCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the Name parameter.
            The -PassThru parameter is deprecated, use -Select '^Name' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.REK.StopREKStreamProcessorCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
    </members>
</doc>
