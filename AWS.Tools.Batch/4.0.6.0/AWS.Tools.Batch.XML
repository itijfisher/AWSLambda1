<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AWS.Tools.Batch</name>
    </assembly>
    <members>
        <member name="T:Amazon.PowerShell.Cmdlets.BAT.GetBATComputeEnvironmentCmdlet">
            <summary>
            Describes one or more of your compute environments.
            
             
            <para>
            If you are using an unmanaged compute environment, you can use the <code>DescribeComputeEnvironment</code>
            operation to determine the <code>ecsClusterArn</code> that you should launch your
            Amazon ECS container instances into.
            </para><br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.GetBATComputeEnvironmentCmdlet.ComputeEnvironment">
            <summary>
            <para>
            <para>A list of up to 100 compute environment names or full Amazon Resource Name (ARN) entries.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.GetBATComputeEnvironmentCmdlet.MaxResult">
            <summary>
            <para>
            <para>The maximum number of cluster results returned by <code>DescribeComputeEnvironments</code>
            in paginated output. When this parameter is used, <code>DescribeComputeEnvironments</code>
            only returns <code>maxResults</code> results in a single page along with a <code>nextToken</code>
            response element. The remaining results of the initial request can be seen by sending
            another <code>DescribeComputeEnvironments</code> request with the returned <code>nextToken</code>
            value. This value can be between 1 and 100. If this parameter is not used, then <code>DescribeComputeEnvironments</code>
            returns up to 100 results and a <code>nextToken</code> value if applicable.</para>
            </para>
            <para>
            <br/><b>Note:</b> In AWSPowerShell and AWSPowerShell.NetCore this parameter is used to limit the total number of items returned by the cmdlet.
            <br/>In AWS.Tools this parameter is simply passed to the service to specify how many items should be returned by each service call.
            <br/>Pipe the output of this cmdlet into Select-Object -First to terminate retrieving data pages early and control the number of items returned.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.GetBATComputeEnvironmentCmdlet.NextToken">
            <summary>
            <para>
            <para>The <code>nextToken</code> value returned from a previous paginated <code>DescribeComputeEnvironments</code>
            request where <code>maxResults</code> was used and the results exceeded the value
            of that parameter. Pagination continues from the end of the previous results that
            returned the <code>nextToken</code> value. This value is <code>null</code> when there
            are no more results to return.</para><note><para>This token should be treated as an opaque identifier that is only used to retrieve
            the next items in a list and not for other programmatic purposes.</para></note>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.GetBATComputeEnvironmentCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'ComputeEnvironments'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Batch.Model.DescribeComputeEnvironmentsResponse).
            Specifying the name of a property of type Amazon.Batch.Model.DescribeComputeEnvironmentsResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.GetBATComputeEnvironmentCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.BAT.GetBATJobDefinitionCmdlet">
            <summary>
            Describes a list of job definitions. You can specify a <code>status</code> (such as
            <code>ACTIVE</code>) to only return job definitions that match that status.<br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.GetBATJobDefinitionCmdlet.JobDefinitionName">
            <summary>
            <para>
            <para>The name of the job definition to describe.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.GetBATJobDefinitionCmdlet.JobDefinition">
            <summary>
            <para>
            <para>A list of up to 100 job definition names or full Amazon Resource Name (ARN) entries.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.GetBATJobDefinitionCmdlet.Status">
            <summary>
            <para>
            <para>The status with which to filter job definitions.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.GetBATJobDefinitionCmdlet.MaxResult">
            <summary>
            <para>
            <para>The maximum number of results returned by <code>DescribeJobDefinitions</code> in paginated
            output. When this parameter is used, <code>DescribeJobDefinitions</code> only returns
            <code>maxResults</code> results in a single page along with a <code>nextToken</code>
            response element. The remaining results of the initial request can be seen by sending
            another <code>DescribeJobDefinitions</code> request with the returned <code>nextToken</code>
            value. This value can be between 1 and 100. If this parameter is not used, then <code>DescribeJobDefinitions</code>
            returns up to 100 results and a <code>nextToken</code> value if applicable.</para>
            </para>
            <para>
            <br/><b>Note:</b> In AWSPowerShell and AWSPowerShell.NetCore this parameter is used to limit the total number of items returned by the cmdlet.
            <br/>In AWS.Tools this parameter is simply passed to the service to specify how many items should be returned by each service call.
            <br/>Pipe the output of this cmdlet into Select-Object -First to terminate retrieving data pages early and control the number of items returned.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.GetBATJobDefinitionCmdlet.NextToken">
            <summary>
            <para>
            <para>The <code>nextToken</code> value returned from a previous paginated <code>DescribeJobDefinitions</code>
            request where <code>maxResults</code> was used and the results exceeded the value
            of that parameter. Pagination continues from the end of the previous results that
            returned the <code>nextToken</code> value. This value is <code>null</code> when there
            are no more results to return.</para><note><para>This token should be treated as an opaque identifier that is only used to retrieve
            the next items in a list and not for other programmatic purposes.</para></note>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.GetBATJobDefinitionCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'JobDefinitions'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Batch.Model.DescribeJobDefinitionsResponse).
            Specifying the name of a property of type Amazon.Batch.Model.DescribeJobDefinitionsResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.GetBATJobDefinitionCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the JobDefinitionName parameter.
            The -PassThru parameter is deprecated, use -Select '^JobDefinitionName' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.GetBATJobDefinitionCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.BAT.GetBATJobDetailCmdlet">
            <summary>
            Describes a list of AWS Batch jobs.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.GetBATJobDetailCmdlet.Job">
            <summary>
            <para>
            <para>A list of up to 100 job IDs.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.GetBATJobDetailCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'Jobs'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Batch.Model.DescribeJobsResponse).
            Specifying the name of a property of type Amazon.Batch.Model.DescribeJobsResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.GetBATJobDetailCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the Job parameter.
            The -PassThru parameter is deprecated, use -Select '^Job' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.BAT.GetBATJobListCmdlet">
            <summary>
            Returns a list of AWS Batch jobs.
            
             
            <para>
            You must specify only one of the following:
            </para><ul><li><para>
            a job queue ID to return a list of jobs in that job queue
            </para></li><li><para>
            a multi-node parallel job ID to return a list of that job's nodes
            </para></li><li><para>
            an array job ID to return a list of that job's children
            </para></li></ul><para>
            You can filter the results by job status with the <code>jobStatus</code> parameter.
            If you do not specify a status, only <code>RUNNING</code> jobs are returned.
            </para><br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.GetBATJobListCmdlet.ArrayJobId">
            <summary>
            <para>
            <para>The job ID for an array job. Specifying an array job ID with this parameter lists
            all child jobs from within the specified array.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.GetBATJobListCmdlet.JobQueue">
            <summary>
            <para>
            <para>The name or full Amazon Resource Name (ARN) of the job queue with which to list jobs.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.GetBATJobListCmdlet.JobStatus">
            <summary>
            <para>
            <para>The job status with which to filter jobs in the specified queue. If you do not specify
            a status, only <code>RUNNING</code> jobs are returned.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.GetBATJobListCmdlet.MultiNodeJobId">
            <summary>
            <para>
            <para>The job ID for a multi-node parallel job. Specifying a multi-node parallel job ID
            with this parameter lists all nodes that are associated with the specified job.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.GetBATJobListCmdlet.MaxResult">
            <summary>
            <para>
            <para>The maximum number of results returned by <code>ListJobs</code> in paginated output.
            When this parameter is used, <code>ListJobs</code> only returns <code>maxResults</code>
            results in a single page along with a <code>nextToken</code> response element. The
            remaining results of the initial request can be seen by sending another <code>ListJobs</code>
            request with the returned <code>nextToken</code> value. This value can be between
            1 and 100. If this parameter is not used, then <code>ListJobs</code> returns up to
            100 results and a <code>nextToken</code> value if applicable.</para>
            </para>
            <para>
            <br/><b>Note:</b> In AWSPowerShell and AWSPowerShell.NetCore this parameter is used to limit the total number of items returned by the cmdlet.
            <br/>In AWS.Tools this parameter is simply passed to the service to specify how many items should be returned by each service call.
            <br/>Pipe the output of this cmdlet into Select-Object -First to terminate retrieving data pages early and control the number of items returned.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.GetBATJobListCmdlet.NextToken">
            <summary>
            <para>
            <para>The <code>nextToken</code> value returned from a previous paginated <code>ListJobs</code>
            request where <code>maxResults</code> was used and the results exceeded the value
            of that parameter. Pagination continues from the end of the previous results that
            returned the <code>nextToken</code> value. This value is <code>null</code> when there
            are no more results to return.</para><note><para>This token should be treated as an opaque identifier that is only used to retrieve
            the next items in a list and not for other programmatic purposes.</para></note>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.GetBATJobListCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'JobSummaryList'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Batch.Model.ListJobsResponse).
            Specifying the name of a property of type Amazon.Batch.Model.ListJobsResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.GetBATJobListCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the JobQueue parameter.
            The -PassThru parameter is deprecated, use -Select '^JobQueue' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.GetBATJobListCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.BAT.GetBATJobQueueCmdlet">
            <summary>
            Describes one or more of your job queues.<br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.GetBATJobQueueCmdlet.JobQueue">
            <summary>
            <para>
            <para>A list of up to 100 queue names or full queue Amazon Resource Name (ARN) entries.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.GetBATJobQueueCmdlet.MaxResult">
            <summary>
            <para>
            <para>The maximum number of results returned by <code>DescribeJobQueues</code> in paginated
            output. When this parameter is used, <code>DescribeJobQueues</code> only returns <code>maxResults</code>
            results in a single page along with a <code>nextToken</code> response element. The
            remaining results of the initial request can be seen by sending another <code>DescribeJobQueues</code>
            request with the returned <code>nextToken</code> value. This value can be between
            1 and 100. If this parameter is not used, then <code>DescribeJobQueues</code> returns
            up to 100 results and a <code>nextToken</code> value if applicable.</para>
            </para>
            <para>
            <br/><b>Note:</b> In AWSPowerShell and AWSPowerShell.NetCore this parameter is used to limit the total number of items returned by the cmdlet.
            <br/>In AWS.Tools this parameter is simply passed to the service to specify how many items should be returned by each service call.
            <br/>Pipe the output of this cmdlet into Select-Object -First to terminate retrieving data pages early and control the number of items returned.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.GetBATJobQueueCmdlet.NextToken">
            <summary>
            <para>
            <para>The <code>nextToken</code> value returned from a previous paginated <code>DescribeJobQueues</code>
            request where <code>maxResults</code> was used and the results exceeded the value
            of that parameter. Pagination continues from the end of the previous results that
            returned the <code>nextToken</code> value. This value is <code>null</code> when there
            are no more results to return.</para><note><para>This token should be treated as an opaque identifier that is only used to retrieve
            the next items in a list and not for other programmatic purposes.</para></note>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.GetBATJobQueueCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'JobQueues'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Batch.Model.DescribeJobQueuesResponse).
            Specifying the name of a property of type Amazon.Batch.Model.DescribeJobQueuesResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.GetBATJobQueueCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.BAT.NewBATComputeEnvironmentCmdlet">
            <summary>
            Creates an AWS Batch compute environment. You can create <code>MANAGED</code> or <code>UNMANAGED</code>
            compute environments.
            
             
            <para>
            In a managed compute environment, AWS Batch manages the capacity and instance types
            of the compute resources within the environment. This is based on the compute resource
            specification that you define or the <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html">launch
            template</a> that you specify when you create the compute environment. You can choose
            to use Amazon EC2 On-Demand Instances or Spot Instances in your managed compute environment.
            You can optionally set a maximum price so that Spot Instances only launch when the
            Spot Instance price is below a specified percentage of the On-Demand price.
            </para><note><para>
            Multi-node parallel jobs are not supported on Spot Instances.
            </para></note><para>
            In an unmanaged compute environment, you can manage your own compute resources. This
            provides more compute resource configuration options, such as using a custom AMI,
            but you must ensure that your AMI meets the Amazon ECS container instance AMI specification.
            For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/container_instance_AMIs.html">Container
            Instance AMIs</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.
            After you have created your unmanaged compute environment, you can use the <a>DescribeComputeEnvironments</a>
            operation to find the Amazon ECS cluster that is associated with it. Then, manually
            launch your container instances into that Amazon ECS cluster. For more information,
            see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_container_instance.html">Launching
            an Amazon ECS Container Instance</a> in the <i>Amazon Elastic Container Service Developer
            Guide</i>.
            </para><note><para>
            AWS Batch does not upgrade the AMIs in a compute environment after it is created (for
            example, when a newer version of the Amazon ECS-optimized AMI is available). You are
            responsible for the management of the guest operating system (including updates and
            security patches) and any additional application software or utilities that you install
            on the compute resources. To use a new AMI for your AWS Batch jobs:
            </para><ol><li><para>
            Create a new compute environment with the new AMI.
            </para></li><li><para>
            Add the compute environment to an existing job queue.
            </para></li><li><para>
            Remove the old compute environment from your job queue.
            </para></li><li><para>
            Delete the old compute environment.
            </para></li></ol></note>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.NewBATComputeEnvironmentCmdlet.ComputeResources_AllocationStrategy">
            <summary>
            <para>
            <para>The allocation strategy to use for the compute resource in case not enough instances
            of the best fitting instance type can be allocated. This could be due to availability
            of the instance type in the region or <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-resource-limits.html">Amazon
            EC2 service limits</a>. If this is not specified, the default is <code>BEST_FIT</code>,
            which will use only the best fitting instance type, waiting for additional capacity
            if it's not available. This allocation strategy keeps costs lower but can limit scaling.
            If you are using Spot Fleets with <code>BEST_FIT</code> then the Spot Fleet IAM Role
            must be specified. <code>BEST_FIT_PROGRESSIVE</code> will select additional instance
            types that are large enough to meet the requirements of the jobs in the queue, with
            a preference for instance types with a lower cost per vCPU. <code>SPOT_CAPACITY_OPTIMIZED</code>
            is only available for Spot Instance compute resources and will select additional instance
            types that are large enough to meet the requirements of the jobs in the queue, with
            a preference for instance types that are less likely to be interrupted. For more information,
            see <a href="https://docs.aws.amazon.com/batch/latest/userguide/allocation-strategies.html&#xD;&#xA;            ">Allocation Strategies</a> in the <i>AWS Batch User Guide</i>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.NewBATComputeEnvironmentCmdlet.ComputeResources_BidPercentage">
            <summary>
            <para>
            <para>The maximum percentage that a Spot Instance price can be when compared with the On-Demand
            price for that instance type before instances are launched. For example, if your maximum
            percentage is 20%, then the Spot price must be below 20% of the current On-Demand
            price for that Amazon EC2 instance. You always pay the lowest (market) price and never
            more than your maximum percentage. If you leave this field empty, the default value
            is 100% of the On-Demand price.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.NewBATComputeEnvironmentCmdlet.ComputeEnvironmentName">
            <summary>
            <para>
            <para>The name for your compute environment. Up to 128 letters (uppercase and lowercase),
            numbers, hyphens, and underscores are allowed.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.NewBATComputeEnvironmentCmdlet.ComputeResources_DesiredvCpu">
            <summary>
            <para>
            <para>The desired number of Amazon EC2 vCPUS in the compute environment.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.NewBATComputeEnvironmentCmdlet.ComputeResources_Ec2KeyPair">
            <summary>
            <para>
            <para>The Amazon EC2 key pair that is used for instances launched in the compute environment.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.NewBATComputeEnvironmentCmdlet.ComputeResources_ImageId">
            <summary>
            <para>
            <para>The Amazon Machine Image (AMI) ID used for instances launched in the compute environment.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.NewBATComputeEnvironmentCmdlet.ComputeResources_InstanceRole">
            <summary>
            <para>
            <para>The Amazon ECS instance profile applied to Amazon EC2 instances in a compute environment.
            You can specify the short name or full Amazon Resource Name (ARN) of an instance profile.
            For example, <code><i>ecsInstanceRole</i></code> or <code>arn:aws:iam::<i>&lt;aws_account_id&gt;</i>:instance-profile/<i>ecsInstanceRole</i></code>. For more information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/instance_IAM_role.html">Amazon
            ECS Instance Role</a> in the <i>AWS Batch User Guide</i>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.NewBATComputeEnvironmentCmdlet.ComputeResources_InstanceType">
            <summary>
            <para>
            <para>The instances types that may be launched. You can specify instance families to launch
            any instance type within those families (for example, <code>c5</code> or <code>p3</code>),
            or you can specify specific sizes within a family (such as <code>c5.8xlarge</code>).
            You can also choose <code>optimal</code> to pick instance types (from the C, M, and
            R instance families) on the fly that match the demand of your job queues.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.NewBATComputeEnvironmentCmdlet.LaunchTemplate_LaunchTemplateId">
            <summary>
            <para>
            <para>The ID of the launch template.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.NewBATComputeEnvironmentCmdlet.LaunchTemplate_LaunchTemplateName">
            <summary>
            <para>
            <para>The name of the launch template.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.NewBATComputeEnvironmentCmdlet.ComputeResources_MaxvCpu">
            <summary>
            <para>
            <para>The maximum number of Amazon EC2 vCPUs that an environment can reach.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.NewBATComputeEnvironmentCmdlet.ComputeResources_MinvCpu">
            <summary>
            <para>
            <para>The minimum number of Amazon EC2 vCPUs that an environment should maintain (even if
            the compute environment is <code>DISABLED</code>).</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.NewBATComputeEnvironmentCmdlet.ComputeResources_PlacementGroup">
            <summary>
            <para>
            <para>The Amazon EC2 placement group to associate with your compute resources. If you intend
            to submit multi-node parallel jobs to your compute environment, you should consider
            creating a cluster placement group and associate it with your compute resources. This
            keeps your multi-node parallel job on a logical grouping of instances within a single
            Availability Zone with high network flow potential. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement
            Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.NewBATComputeEnvironmentCmdlet.ComputeResources_SecurityGroupId">
            <summary>
            <para>
            <para>The Amazon EC2 security groups associated with instances launched in the compute environment.
            One or more security groups must be specified, either in <code>securityGroupIds</code>
            or using a launch template referenced in <code>launchTemplate</code>. If security
            groups are specified using both <code>securityGroupIds</code> and <code>launchTemplate</code>,
            the values in <code>securityGroupIds</code> will be used.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.NewBATComputeEnvironmentCmdlet.ServiceRole">
            <summary>
            <para>
            <para>The full Amazon Resource Name (ARN) of the IAM role that allows AWS Batch to make
            calls to other AWS services on your behalf.</para><para>If your specified role has a path other than <code>/</code>, then you must either
            specify the full role ARN (this is recommended) or prefix the role name with the path.</para><note><para>Depending on how you created your AWS Batch service role, its ARN may contain the
            <code>service-role</code> path prefix. When you only specify the name of the service
            role, AWS Batch assumes that your ARN does not use the <code>service-role</code> path
            prefix. Because of this, we recommend that you specify the full ARN of your service
            role when you create compute environments.</para></note>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.NewBATComputeEnvironmentCmdlet.ComputeResources_SpotIamFleetRole">
            <summary>
            <para>
            <para>The Amazon Resource Name (ARN) of the Amazon EC2 Spot Fleet IAM role applied to a
            <code>SPOT</code> compute environment. This role is required if the allocation strategy
            set to <code>BEST_FIT</code> or if the allocation strategy is not specified. For more
            information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/spot_fleet_IAM_role.html">Amazon
            EC2 Spot Fleet Role</a> in the <i>AWS Batch User Guide</i>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.NewBATComputeEnvironmentCmdlet.State">
            <summary>
            <para>
            <para>The state of the compute environment. If the state is <code>ENABLED</code>, then the
            compute environment accepts jobs from a queue and can scale out automatically based
            on queues.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.NewBATComputeEnvironmentCmdlet.ComputeResources_Subnet">
            <summary>
            <para>
            <para>The VPC subnets into which the compute resources are launched. For more information,
            see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html">VPCs
            and Subnets</a> in the <i>Amazon VPC User Guide</i>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.NewBATComputeEnvironmentCmdlet.ComputeResources_Tag">
            <summary>
            <para>
            <para>Key-value pair tags to be applied to resources that are launched in the compute environment.
            For AWS Batch, these take the form of "String1": "String2", where String1 is the tag
            key and String2 is the tag value—for example, { "Name": "AWS Batch Instance - C4OnDemand"
            }.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.NewBATComputeEnvironmentCmdlet.ComputeResources_Type">
            <summary>
            <para>
            <para>The type of compute environment: <code>EC2</code> or <code>SPOT</code>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.NewBATComputeEnvironmentCmdlet.Type">
            <summary>
            <para>
            <para>The type of the compute environment. For more information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/compute_environments.html">Compute
            Environments</a> in the <i>AWS Batch User Guide</i>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.NewBATComputeEnvironmentCmdlet.LaunchTemplate_Version">
            <summary>
            <para>
            <para>The version number of the launch template.</para><para>Default: The default version of the launch template.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.NewBATComputeEnvironmentCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Batch.Model.CreateComputeEnvironmentResponse).
            Specifying the name of a property of type Amazon.Batch.Model.CreateComputeEnvironmentResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.NewBATComputeEnvironmentCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.BAT.NewBATJobQueueCmdlet">
            <summary>
            Creates an AWS Batch job queue. When you create a job queue, you associate one or
            more compute environments to the queue and assign an order of preference for the compute
            environments.
            
             
            <para>
            You also set a priority to the job queue that determines the order in which the AWS
            Batch scheduler places jobs onto its associated compute environments. For example,
            if a compute environment is associated with more than one job queue, the job queue
            with a higher priority is given preference for scheduling jobs to that compute environment.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.NewBATJobQueueCmdlet.ComputeEnvironmentOrder">
            <summary>
            <para>
            <para>The set of compute environments mapped to a job queue and their order relative to
            each other. The job scheduler uses this parameter to determine which compute environment
            should execute a given job. Compute environments must be in the <code>VALID</code>
            state before you can associate them with a job queue. You can associate up to three
            compute environments with a job queue.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.NewBATJobQueueCmdlet.JobQueueName">
            <summary>
            <para>
            <para>The name of the job queue.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.NewBATJobQueueCmdlet.Priority">
            <summary>
            <para>
            <para>The priority of the job queue. Job queues with a higher priority (or a higher integer
            value for the <code>priority</code> parameter) are evaluated first when associated
            with the same compute environment. Priority is determined in descending order, for
            example, a job queue with a priority value of <code>10</code> is given scheduling
            preference over a job queue with a priority value of <code>1</code>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.NewBATJobQueueCmdlet.State">
            <summary>
            <para>
            <para>The state of the job queue. If the job queue state is <code>ENABLED</code>, it is
            able to accept jobs.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.NewBATJobQueueCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Batch.Model.CreateJobQueueResponse).
            Specifying the name of a property of type Amazon.Batch.Model.CreateJobQueueResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.NewBATJobQueueCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.BAT.RegisterBATJobDefinitionCmdlet">
            <summary>
            Registers an AWS Batch job definition.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.RegisterBATJobDefinitionCmdlet.RetryStrategy_Attempt">
            <summary>
            <para>
            <para>The number of times to move a job to the <code>RUNNABLE</code> status. You may specify
            between 1 and 10 attempts. If the value of <code>attempts</code> is greater than one,
            the job is retried on failure the same number of attempts as the value.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.RegisterBATJobDefinitionCmdlet.ContainerProperties_Command">
            <summary>
            <para>
            <para>The command that is passed to the container. This parameter maps to <code>Cmd</code>
            in the <a href="https://docs.docker.com/engine/api/v1.23/#create-a-container">Create
            a container</a> section of the <a href="https://docs.docker.com/engine/api/v1.23/">Docker
            Remote API</a> and the <code>COMMAND</code> parameter to <a href="https://docs.docker.com/engine/reference/run/">docker
            run</a>. For more information, see <a href="https://docs.docker.com/engine/reference/builder/#cmd">https://docs.docker.com/engine/reference/builder/#cmd</a>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.RegisterBATJobDefinitionCmdlet.LinuxParameters_Device">
            <summary>
            <para>
            <para>Any host devices to expose to the container. This parameter maps to <code>Devices</code>
            in the <a href="https://docs.docker.com/engine/api/v1.23/#create-a-container">Create
            a container</a> section of the <a href="https://docs.docker.com/engine/api/v1.23/">Docker
            Remote API</a> and the <code>--device</code> option to <a href="https://docs.docker.com/engine/reference/run/">docker
            run</a>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.RegisterBATJobDefinitionCmdlet.ContainerProperties_Environment">
            <summary>
            <para>
            <para>The environment variables to pass to a container. This parameter maps to <code>Env</code>
            in the <a href="https://docs.docker.com/engine/api/v1.23/#create-a-container">Create
            a container</a> section of the <a href="https://docs.docker.com/engine/api/v1.23/">Docker
            Remote API</a> and the <code>--env</code> option to <a href="https://docs.docker.com/engine/reference/run/">docker
            run</a>.</para><important><para>We do not recommend using plaintext environment variables for sensitive information,
            such as credential data.</para></important><note><para>Environment variables must not start with <code>AWS_BATCH</code>; this naming convention
            is reserved for variables that are set by the AWS Batch service.</para></note>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.RegisterBATJobDefinitionCmdlet.ContainerProperties_Image">
            <summary>
            <para>
            <para>The image used to start a container. This string is passed directly to the Docker
            daemon. Images in the Docker Hub registry are available by default. Other repositories
            are specified with <code><i>repository-url</i>/<i>image</i>:<i>tag</i></code>. Up
            to 255 letters (uppercase and lowercase), numbers, hyphens, underscores, colons, periods,
            forward slashes, and number signs are allowed. This parameter maps to <code>Image</code>
            in the <a href="https://docs.docker.com/engine/api/v1.23/#create-a-container">Create
            a container</a> section of the <a href="https://docs.docker.com/engine/api/v1.23/">Docker
            Remote API</a> and the <code>IMAGE</code> parameter of <a href="https://docs.docker.com/engine/reference/run/">docker
            run</a>.</para><ul><li><para>Images in Amazon ECR repositories use the full registry and repository URI (for example,
            <code>012345678910.dkr.ecr.&lt;region-name&gt;.amazonaws.com/&lt;repository-name&gt;</code>).</para></li><li><para>Images in official repositories on Docker Hub use a single name (for example, <code>ubuntu</code>
            or <code>mongo</code>).</para></li><li><para>Images in other repositories on Docker Hub are qualified with an organization name
            (for example, <code>amazon/amazon-ecs-agent</code>).</para></li><li><para>Images in other online repositories are qualified further by a domain name (for example,
            <code>quay.io/assemblyline/ubuntu</code>).</para></li></ul>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.RegisterBATJobDefinitionCmdlet.ContainerProperties_InstanceType">
            <summary>
            <para>
            <para>The instance type to use for a multi-node parallel job. Currently all node groups
            in a multi-node parallel job must use the same instance type. This parameter is not
            valid for single-node container jobs.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.RegisterBATJobDefinitionCmdlet.JobDefinitionName">
            <summary>
            <para>
            <para>The name of the job definition to register. Up to 128 letters (uppercase and lowercase),
            numbers, hyphens, and underscores are allowed.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.RegisterBATJobDefinitionCmdlet.ContainerProperties_JobRoleArn">
            <summary>
            <para>
            <para>The Amazon Resource Name (ARN) of the IAM role that the container can assume for AWS
            permissions.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.RegisterBATJobDefinitionCmdlet.NodeProperties_MainNode">
            <summary>
            <para>
            <para>Specifies the node index for the main node of a multi-node parallel job. This node
            index value must be fewer than the number of nodes.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.RegisterBATJobDefinitionCmdlet.ContainerProperties_Memory">
            <summary>
            <para>
            <para>The hard limit (in MiB) of memory to present to the container. If your container attempts
            to exceed the memory specified here, the container is killed. This parameter maps
            to <code>Memory</code> in the <a href="https://docs.docker.com/engine/api/v1.23/#create-a-container">Create
            a container</a> section of the <a href="https://docs.docker.com/engine/api/v1.23/">Docker
            Remote API</a> and the <code>--memory</code> option to <a href="https://docs.docker.com/engine/reference/run/">docker
            run</a>. You must specify at least 4 MiB of memory for a job.</para><note><para>If you are trying to maximize your resource utilization by providing your jobs as
            much memory as possible for a particular instance type, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/memory-management.html">Memory
            Management</a> in the <i>AWS Batch User Guide</i>.</para></note>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.RegisterBATJobDefinitionCmdlet.ContainerProperties_MountPoint">
            <summary>
            <para>
            <para>The mount points for data volumes in your container. This parameter maps to <code>Volumes</code>
            in the <a href="https://docs.docker.com/engine/api/v1.23/#create-a-container">Create
            a container</a> section of the <a href="https://docs.docker.com/engine/api/v1.23/">Docker
            Remote API</a> and the <code>--volume</code> option to <a href="https://docs.docker.com/engine/reference/run/">docker
            run</a>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.RegisterBATJobDefinitionCmdlet.NodeProperties_NodeRangeProperty">
            <summary>
            <para>
            <para>A list of node ranges and their properties associated with a multi-node parallel job.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.RegisterBATJobDefinitionCmdlet.NodeProperties_NumNode">
            <summary>
            <para>
            <para>The number of nodes associated with a multi-node parallel job.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.RegisterBATJobDefinitionCmdlet.Parameter">
            <summary>
            <para>
            <para>Default parameter substitution placeholders to set in the job definition. Parameters
            are specified as a key-value pair mapping. Parameters in a <code>SubmitJob</code>
            request override any corresponding parameter defaults from the job definition.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.RegisterBATJobDefinitionCmdlet.ContainerProperties_Privileged">
            <summary>
            <para>
            <para>When this parameter is true, the container is given elevated privileges on the host
            container instance (similar to the <code>root</code> user). This parameter maps to
            <code>Privileged</code> in the <a href="https://docs.docker.com/engine/api/v1.23/#create-a-container">Create
            a container</a> section of the <a href="https://docs.docker.com/engine/api/v1.23/">Docker
            Remote API</a> and the <code>--privileged</code> option to <a href="https://docs.docker.com/engine/reference/run/">docker
            run</a>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.RegisterBATJobDefinitionCmdlet.ContainerProperties_ReadonlyRootFilesystem">
            <summary>
            <para>
            <para>When this parameter is true, the container is given read-only access to its root file
            system. This parameter maps to <code>ReadonlyRootfs</code> in the <a href="https://docs.docker.com/engine/api/v1.23/#create-a-container">Create
            a container</a> section of the <a href="https://docs.docker.com/engine/api/v1.23/">Docker
            Remote API</a> and the <code>--read-only</code> option to <code>docker run</code>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.RegisterBATJobDefinitionCmdlet.ContainerProperties_ResourceRequirement">
            <summary>
            <para>
            <para>The type and amount of a resource to assign to a container. Currently, the only supported
            resource is <code>GPU</code>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.RegisterBATJobDefinitionCmdlet.Timeout">
            <summary>
            <para>
            <para>The timeout configuration for jobs that are submitted with this job definition, after
            which AWS Batch terminates your jobs if they have not finished. If a job is terminated
            due to a timeout, it is not retried. The minimum value for the timeout is 60 seconds.
            Any timeout configuration that is specified during a <a>SubmitJob</a> operation overrides
            the timeout configuration defined here. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/job_timeouts.html">Job
            Timeouts</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.RegisterBATJobDefinitionCmdlet.Type">
            <summary>
            <para>
            <para>The type of job definition.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.RegisterBATJobDefinitionCmdlet.ContainerProperties_Ulimit">
            <summary>
            <para>
            <para>A list of <code>ulimits</code> to set in the container. This parameter maps to <code>Ulimits</code>
            in the <a href="https://docs.docker.com/engine/api/v1.23/#create-a-container">Create
            a container</a> section of the <a href="https://docs.docker.com/engine/api/v1.23/">Docker
            Remote API</a> and the <code>--ulimit</code> option to <a href="https://docs.docker.com/engine/reference/run/">docker
            run</a>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.RegisterBATJobDefinitionCmdlet.ContainerProperties_User">
            <summary>
            <para>
            <para>The user name to use inside the container. This parameter maps to <code>User</code>
            in the <a href="https://docs.docker.com/engine/api/v1.23/#create-a-container">Create
            a container</a> section of the <a href="https://docs.docker.com/engine/api/v1.23/">Docker
            Remote API</a> and the <code>--user</code> option to <a href="https://docs.docker.com/engine/reference/run/">docker
            run</a>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.RegisterBATJobDefinitionCmdlet.ContainerProperties_Vcpus">
            <summary>
            <para>
            <para>The number of vCPUs reserved for the container. This parameter maps to <code>CpuShares</code>
            in the <a href="https://docs.docker.com/engine/api/v1.23/#create-a-container">Create
            a container</a> section of the <a href="https://docs.docker.com/engine/api/v1.23/">Docker
            Remote API</a> and the <code>--cpu-shares</code> option to <a href="https://docs.docker.com/engine/reference/run/">docker
            run</a>. Each vCPU is equivalent to 1,024 CPU shares. You must specify at least one
            vCPU.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.RegisterBATJobDefinitionCmdlet.ContainerProperties_Volume">
            <summary>
            <para>
            <para>A list of data volumes used in a job.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.RegisterBATJobDefinitionCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Batch.Model.RegisterJobDefinitionResponse).
            Specifying the name of a property of type Amazon.Batch.Model.RegisterJobDefinitionResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.RegisterBATJobDefinitionCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the JobDefinitionName parameter.
            The -PassThru parameter is deprecated, use -Select '^JobDefinitionName' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.RegisterBATJobDefinitionCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.BAT.RemoveBATComputeEnvironmentCmdlet">
            <summary>
            Deletes an AWS Batch compute environment.
            
             
            <para>
            Before you can delete a compute environment, you must set its state to <code>DISABLED</code>
            with the <a>UpdateComputeEnvironment</a> API operation and disassociate it from any
            job queues with the <a>UpdateJobQueue</a> API operation.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.RemoveBATComputeEnvironmentCmdlet.ComputeEnvironment">
            <summary>
            <para>
            <para>The name or Amazon Resource Name (ARN) of the compute environment to delete.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.RemoveBATComputeEnvironmentCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The cmdlet doesn't have a return value by default.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Batch.Model.DeleteComputeEnvironmentResponse).
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.RemoveBATComputeEnvironmentCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the ComputeEnvironment parameter.
            The -PassThru parameter is deprecated, use -Select '^ComputeEnvironment' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.RemoveBATComputeEnvironmentCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.BAT.RemoveBATJobCmdlet">
            <summary>
            Terminates a job in a job queue. Jobs that are in the <code>STARTING</code> or <code>RUNNING</code>
            state are terminated, which causes them to transition to <code>FAILED</code>. Jobs
            that have not progressed to the <code>STARTING</code> state are cancelled.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.RemoveBATJobCmdlet.JobId">
            <summary>
            <para>
            <para>The AWS Batch job ID of the job to terminate.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.RemoveBATJobCmdlet.Reason">
            <summary>
            <para>
            <para>A message to attach to the job that explains the reason for canceling it. This message
            is returned by future <a>DescribeJobs</a> operations on the job. This message is also
            recorded in the AWS Batch activity logs.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.RemoveBATJobCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The cmdlet doesn't have a return value by default.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Batch.Model.TerminateJobResponse).
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.RemoveBATJobCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the JobId parameter.
            The -PassThru parameter is deprecated, use -Select '^JobId' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.RemoveBATJobCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.BAT.RemoveBATJobQueueCmdlet">
            <summary>
            Deletes the specified job queue. You must first disable submissions for a queue with
            the <a>UpdateJobQueue</a> operation. All jobs in the queue are terminated when you
            delete a job queue.
            
             
            <para>
            It is not necessary to disassociate compute environments from a queue before submitting
            a <code>DeleteJobQueue</code> request.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.RemoveBATJobQueueCmdlet.JobQueue">
            <summary>
            <para>
            <para>The short name or full Amazon Resource Name (ARN) of the queue to delete.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.RemoveBATJobQueueCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The cmdlet doesn't have a return value by default.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Batch.Model.DeleteJobQueueResponse).
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.RemoveBATJobQueueCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the JobQueue parameter.
            The -PassThru parameter is deprecated, use -Select '^JobQueue' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.RemoveBATJobQueueCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.BAT.StopBATJobCmdlet">
            <summary>
            Cancels a job in an AWS Batch job queue. Jobs that are in the <code>SUBMITTED</code>,
            <code>PENDING</code>, or <code>RUNNABLE</code> state are cancelled. Jobs that have
            progressed to <code>STARTING</code> or <code>RUNNING</code> are not cancelled (but
            the API operation still succeeds, even if no job is cancelled); these jobs must be
            terminated with the <a>TerminateJob</a> operation.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.StopBATJobCmdlet.JobId">
            <summary>
            <para>
            <para>The AWS Batch job ID of the job to cancel.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.StopBATJobCmdlet.Reason">
            <summary>
            <para>
            <para>A message to attach to the job that explains the reason for canceling it. This message
            is returned by future <a>DescribeJobs</a> operations on the job. This message is also
            recorded in the AWS Batch activity logs.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.StopBATJobCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The cmdlet doesn't have a return value by default.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Batch.Model.CancelJobResponse).
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.StopBATJobCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the JobId parameter.
            The -PassThru parameter is deprecated, use -Select '^JobId' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.StopBATJobCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.BAT.SubmitBATJobCmdlet">
            <summary>
            Submits an AWS Batch job from a job definition. Parameters specified during <a>SubmitJob</a>
            override parameters defined in the job definition.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.SubmitBATJobCmdlet.RetryStrategy_Attempt">
            <summary>
            <para>
            <para>The number of times to move a job to the <code>RUNNABLE</code> status. You may specify
            between 1 and 10 attempts. If the value of <code>attempts</code> is greater than one,
            the job is retried on failure the same number of attempts as the value.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.SubmitBATJobCmdlet.ContainerOverrides_Command">
            <summary>
            <para>
            <para>The command to send to the container that overrides the default command from the Docker
            image or the job definition.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.SubmitBATJobCmdlet.DependsOn">
            <summary>
            <para>
            <para>A list of dependencies for the job. A job can depend upon a maximum of 20 jobs. You
            can specify a <code>SEQUENTIAL</code> type dependency without specifying a job ID
            for array jobs so that each child array job completes sequentially, starting at index
            0. You can also specify an <code>N_TO_N</code> type dependency with a job ID for array
            jobs. In that case, each index child of this job must wait for the corresponding index
            child of each dependency to complete before it can begin.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.SubmitBATJobCmdlet.ContainerOverrides_Environment">
            <summary>
            <para>
            <para>The environment variables to send to the container. You can add new environment variables,
            which are added to the container at launch, or you can override the existing environment
            variables from the Docker image or the job definition.</para><note><para>Environment variables must not start with <code>AWS_BATCH</code>; this naming convention
            is reserved for variables that are set by the AWS Batch service.</para></note>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.SubmitBATJobCmdlet.ContainerOverrides_InstanceType">
            <summary>
            <para>
            <para>The instance type to use for a multi-node parallel job. This parameter is not valid
            for single-node container jobs.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.SubmitBATJobCmdlet.JobDefinition">
            <summary>
            <para>
            <para>The job definition used by this job. This value can be one of <code>name</code>, <code>name:revision</code>,
            or the Amazon Resource Name (ARN) for the job definition. If <code>name</code> is
            specified without a revision then the latest active revision is used.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.SubmitBATJobCmdlet.JobName">
            <summary>
            <para>
            <para>The name of the job. The first character must be alphanumeric, and up to 128 letters
            (uppercase and lowercase), numbers, hyphens, and underscores are allowed.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.SubmitBATJobCmdlet.JobQueue">
            <summary>
            <para>
            <para>The job queue into which the job is submitted. You can specify either the name or
            the Amazon Resource Name (ARN) of the queue.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.SubmitBATJobCmdlet.ContainerOverrides_Memory">
            <summary>
            <para>
            <para>The number of MiB of memory reserved for the job. This value overrides the value set
            in the job definition.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.SubmitBATJobCmdlet.NodeOverrides_NodePropertyOverride">
            <summary>
            <para>
            <para>The node property overrides for the job.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.SubmitBATJobCmdlet.NodeOverrides_NumNode">
            <summary>
            <para>
            <para>The number of nodes to use with a multi-node parallel job. This value overrides the
            number of nodes that are specified in the job definition. To use this override:</para><ul><li><para>There must be at least one node range in your job definition that has an open upper
            boundary (such as <code>:</code> or <code>n:</code>).</para></li><li><para>The lower boundary of the node range specified in the job definition must be fewer
            than the number of nodes specified in the override.</para></li><li><para>The main node index specified in the job definition must be fewer than the number
            of nodes specified in the override.</para></li></ul>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.SubmitBATJobCmdlet.Parameter">
            <summary>
            <para>
            <para>Additional parameters passed to the job that replace parameter substitution placeholders
            that are set in the job definition. Parameters are specified as a key and value pair
            mapping. Parameters in a <code>SubmitJob</code> request override any corresponding
            parameter defaults from the job definition.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.SubmitBATJobCmdlet.ContainerOverrides_ResourceRequirement">
            <summary>
            <para>
            <para>The type and amount of a resource to assign to a container. This value overrides the
            value set in the job definition. Currently, the only supported resource is <code>GPU</code>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.SubmitBATJobCmdlet.ArrayProperties_Size">
            <summary>
            <para>
            <para>The size of the array job.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.SubmitBATJobCmdlet.Timeout">
            <summary>
            <para>
            <para>The timeout configuration for this <a>SubmitJob</a> operation. You can specify a timeout
            duration after which AWS Batch terminates your jobs if they have not finished. If
            a job is terminated due to a timeout, it is not retried. The minimum value for the
            timeout is 60 seconds. This configuration overrides any timeout configuration specified
            in the job definition. For array jobs, child jobs have the same timeout configuration
            as the parent job. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/job_timeouts.html">Job
            Timeouts</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.SubmitBATJobCmdlet.ContainerOverrides_Vcpus">
            <summary>
            <para>
            <para>The number of vCPUs to reserve for the container. This value overrides the value set
            in the job definition.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.SubmitBATJobCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Batch.Model.SubmitJobResponse).
            Specifying the name of a property of type Amazon.Batch.Model.SubmitJobResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.SubmitBATJobCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the JobName parameter.
            The -PassThru parameter is deprecated, use -Select '^JobName' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.SubmitBATJobCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.BAT.UnregisterBATJobDefinitionCmdlet">
            <summary>
            Deregisters an AWS Batch job definition. Job definitions will be permanently deleted
            after 180 days.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.UnregisterBATJobDefinitionCmdlet.JobDefinition">
            <summary>
            <para>
            <para>The name and revision (<code>name:revision</code>) or full Amazon Resource Name (ARN)
            of the job definition to deregister.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.UnregisterBATJobDefinitionCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The cmdlet doesn't have a return value by default.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Batch.Model.DeregisterJobDefinitionResponse).
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.UnregisterBATJobDefinitionCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the JobDefinition parameter.
            The -PassThru parameter is deprecated, use -Select '^JobDefinition' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.UnregisterBATJobDefinitionCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.BAT.UpdateBATComputeEnvironmentCmdlet">
            <summary>
            Updates an AWS Batch compute environment.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.UpdateBATComputeEnvironmentCmdlet.ComputeEnvironment">
            <summary>
            <para>
            <para>The name or full Amazon Resource Name (ARN) of the compute environment to update.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.UpdateBATComputeEnvironmentCmdlet.ComputeResources_DesiredvCpu">
            <summary>
            <para>
            <para>The desired number of Amazon EC2 vCPUS in the compute environment.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.UpdateBATComputeEnvironmentCmdlet.ComputeResources_MaxvCpu">
            <summary>
            <para>
            <para>The maximum number of Amazon EC2 vCPUs that an environment can reach.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.UpdateBATComputeEnvironmentCmdlet.ComputeResources_MinvCpu">
            <summary>
            <para>
            <para>The minimum number of Amazon EC2 vCPUs that an environment should maintain.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.UpdateBATComputeEnvironmentCmdlet.ServiceRole">
            <summary>
            <para>
            <para>The full Amazon Resource Name (ARN) of the IAM role that allows AWS Batch to make
            calls to other AWS services on your behalf.</para><para>If your specified role has a path other than <code>/</code>, then you must either
            specify the full role ARN (this is recommended) or prefix the role name with the path.</para><note><para>Depending on how you created your AWS Batch service role, its ARN may contain the
            <code>service-role</code> path prefix. When you only specify the name of the service
            role, AWS Batch assumes that your ARN does not use the <code>service-role</code> path
            prefix. Because of this, we recommend that you specify the full ARN of your service
            role when you create compute environments.</para></note>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.UpdateBATComputeEnvironmentCmdlet.State">
            <summary>
            <para>
            <para>The state of the compute environment. Compute environments in the <code>ENABLED</code>
            state can accept jobs from a queue and scale in or out automatically based on the
            workload demand of its associated queues.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.UpdateBATComputeEnvironmentCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Batch.Model.UpdateComputeEnvironmentResponse).
            Specifying the name of a property of type Amazon.Batch.Model.UpdateComputeEnvironmentResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.UpdateBATComputeEnvironmentCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the ComputeEnvironment parameter.
            The -PassThru parameter is deprecated, use -Select '^ComputeEnvironment' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.UpdateBATComputeEnvironmentCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.BAT.UpdateBATJobQueueCmdlet">
            <summary>
            Updates a job queue.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.UpdateBATJobQueueCmdlet.ComputeEnvironmentOrder">
            <summary>
            <para>
            <para>Details the set of compute environments mapped to a job queue and their order relative
            to each other. This is one of the parameters used by the job scheduler to determine
            which compute environment should execute a given job.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.UpdateBATJobQueueCmdlet.JobQueue">
            <summary>
            <para>
            <para>The name or the Amazon Resource Name (ARN) of the job queue.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.UpdateBATJobQueueCmdlet.Priority">
            <summary>
            <para>
            <para>The priority of the job queue. Job queues with a higher priority (or a higher integer
            value for the <code>priority</code> parameter) are evaluated first when associated
            with the same compute environment. Priority is determined in descending order, for
            example, a job queue with a priority value of <code>10</code> is given scheduling
            preference over a job queue with a priority value of <code>1</code>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.UpdateBATJobQueueCmdlet.State">
            <summary>
            <para>
            <para>Describes the queue's ability to accept new jobs.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.UpdateBATJobQueueCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Batch.Model.UpdateJobQueueResponse).
            Specifying the name of a property of type Amazon.Batch.Model.UpdateJobQueueResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.UpdateBATJobQueueCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the JobQueue parameter.
            The -PassThru parameter is deprecated, use -Select '^JobQueue' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.BAT.UpdateBATJobQueueCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
    </members>
</doc>
