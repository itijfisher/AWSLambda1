<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AWS.Tools.SecretsManager</name>
    </assembly>
    <members>
        <member name="T:Amazon.PowerShell.Cmdlets.SEC.AddSECResourceTagCmdlet">
            <summary>
            Attaches one or more tags, each consisting of a key name and a value, to the specified
            secret. Tags are part of the secret's overall metadata, and are not associated with
            any specific version of the secret. This operation only appends tags to the existing
            list of tags. To remove tags, you must use <a>UntagResource</a>.
            
             
            <para>
            The following basic restrictions apply to tags:
            </para><ul><li><para>
            Maximum number of tags per secret—50
            </para></li><li><para>
            Maximum key length—127 Unicode characters in UTF-8
            </para></li><li><para>
            Maximum value length—255 Unicode characters in UTF-8
            </para></li><li><para>
            Tag keys and values are case sensitive.
            </para></li><li><para>
            Do not use the <code>aws:</code> prefix in your tag names or values because it is
            reserved for AWS use. You can't edit or delete tag names or values with this prefix.
            Tags with this prefix do not count against your tags per secret limit.
            </para></li><li><para>
            If your tagging schema will be used across multiple services and resources, remember
            that other services might have restrictions on allowed characters. Generally allowed
            characters are: letters, spaces, and numbers representable in UTF-8, plus the following
            special characters: + - = . _ : / @.
            </para></li></ul><important><para>
            If you use tags as part of your security strategy, then adding or removing a tag can
            change permissions. If successfully completing this operation would result in you
            losing your permissions for this secret, then the operation is blocked and returns
            an Access Denied error.
            </para></important><para><b>Minimum permissions</b></para><para>
            To run this command, you must have the following permissions:
            </para><ul><li><para>
            secretsmanager:TagResource
            </para></li></ul><para><b>Related operations</b></para><ul><li><para>
            To remove one or more tags from the collection attached to a secret, use <a>UntagResource</a>.
            </para></li><li><para>
            To view the list of tags attached to a secret, use <a>DescribeSecret</a>.
            </para></li></ul>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.AddSECResourceTagCmdlet.SecretId">
            <summary>
            <para>
            <para>The identifier for the secret that you want to attach tags to. You can specify either
            the Amazon Resource Name (ARN) or the friendly name of the secret.</para><note><para>If you specify an ARN, we generally recommend that you specify a complete ARN. You
            can specify a partial ARN too—for example, if you don’t include the final hyphen and
            six random characters that Secrets Manager adds at the end of the ARN when you created
            the secret. A partial ARN match can work as long as it uniquely matches only one secret.
            However, if your secret has a name that ends in a hyphen followed by six characters
            (before Secrets Manager adds the hyphen and six characters to the ARN) and you try
            to use that as a partial ARN, then those characters cause Secrets Manager to assume
            that you’re specifying a complete ARN. This confusion can cause unexpected results.
            To avoid this situation, we recommend that you don’t create secret names that end
            with a hyphen followed by six characters.</para></note>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.AddSECResourceTagCmdlet.Tag">
            <summary>
            <para>
            <para>The tags to attach to the secret. Each element in the list consists of a <code>Key</code>
            and a <code>Value</code>.</para><para>This parameter to the API requires a JSON text string argument. For information on
            how to format a JSON parameter for the various command line tool environments, see
            <a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-using-param.html#cli-using-param-json">Using
            JSON for Parameters</a> in the <i>AWS CLI User Guide</i>. For the AWS CLI, you can
            also use the syntax: <code>--Tags Key="Key1",Value="Value1",Key="Key2",Value="Value2"[,…]</code></para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.AddSECResourceTagCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The cmdlet doesn't have a return value by default.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.SecretsManager.Model.TagResourceResponse).
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.AddSECResourceTagCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the SecretId parameter.
            The -PassThru parameter is deprecated, use -Select '^SecretId' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.AddSECResourceTagCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.SEC.GetSECRandomPasswordCmdlet">
            <summary>
            Generates a random password of the specified complexity. This operation is intended
            for use in the Lambda rotation function. Per best practice, we recommend that you
            specify the maximum length and include every character type that the system you are
            generating a password for can support.
            
             
            <para><b>Minimum permissions</b></para><para>
            To run this command, you must have the following permissions:
            </para><ul><li><para>
            secretsmanager:GetRandomPassword
            </para></li></ul>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.GetSECRandomPasswordCmdlet.ExcludeCharacter">
            <summary>
            <para>
            <para>A string that includes characters that should not be included in the generated password.
            The default is that all characters from the included sets can be used.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.GetSECRandomPasswordCmdlet.ExcludeLowercase">
            <summary>
            <para>
            <para>Specifies that the generated password should not include lowercase letters. The default
            if you do not include this switch parameter is that lowercase letters can be included.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.GetSECRandomPasswordCmdlet.ExcludeNumber">
            <summary>
            <para>
            <para>Specifies that the generated password should not include digits. The default if you
            do not include this switch parameter is that digits can be included.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.GetSECRandomPasswordCmdlet.ExcludePunctuation">
            <summary>
            <para>
            <para>Specifies that the generated password should not include punctuation characters. The
            default if you do not include this switch parameter is that punctuation characters
            can be included.</para><para>The following are the punctuation characters that <i>can</i> be included in the generated
            password if you don't explicitly exclude them with <code>ExcludeCharacters</code>
            or <code>ExcludePunctuation</code>:</para><para><code>! " # $ % &amp; ' ( ) * + , - . / : ; &lt; = &gt; ? @ [ \ ] ^ _ ` { | } ~</code></para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.GetSECRandomPasswordCmdlet.ExcludeUppercase">
            <summary>
            <para>
            <para>Specifies that the generated password should not include uppercase letters. The default
            if you do not include this switch parameter is that uppercase letters can be included.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.GetSECRandomPasswordCmdlet.IncludeSpace">
            <summary>
            <para>
            <para>Specifies that the generated password can include the space character. The default
            if you do not include this switch parameter is that the space character is not included.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.GetSECRandomPasswordCmdlet.PasswordLength">
            <summary>
            <para>
            <para>The desired length of the generated password. The default value if you do not include
            this parameter is 32 characters.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.GetSECRandomPasswordCmdlet.RequireEachIncludedType">
            <summary>
            <para>
            <para>A boolean value that specifies whether the generated password must include at least
            one of every allowed character type. The default value is <code>True</code> and the
            operation requires at least one of every character type.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.GetSECRandomPasswordCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'RandomPassword'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.SecretsManager.Model.GetRandomPasswordResponse).
            Specifying the name of a property of type Amazon.SecretsManager.Model.GetRandomPasswordResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.SEC.GetSECResourcePolicyCmdlet">
            <summary>
            Retrieves the JSON text of the resource-based policy document that's attached to the
            specified secret. The JSON request string input and response output are shown formatted
            with white space and line breaks for better readability. Submit your input as a single
            line JSON string.
            
             
            <para><b>Minimum permissions</b></para><para>
            To run this command, you must have the following permissions:
            </para><ul><li><para>
            secretsmanager:GetResourcePolicy
            </para></li></ul><para><b>Related operations</b></para><ul><li><para>
            To attach a resource policy to a secret, use <a>PutResourcePolicy</a>.
            </para></li><li><para>
            To delete the resource-based policy that's attached to a secret, use <a>DeleteResourcePolicy</a>.
            </para></li><li><para>
            To list all of the currently available secrets, use <a>ListSecrets</a>.
            </para></li></ul>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.GetSECResourcePolicyCmdlet.SecretId">
            <summary>
            <para>
            <para>Specifies the secret that you want to retrieve the attached resource-based policy
            for. You can specify either the Amazon Resource Name (ARN) or the friendly name of
            the secret.</para><note><para>If you specify an ARN, we generally recommend that you specify a complete ARN. You
            can specify a partial ARN too—for example, if you don’t include the final hyphen and
            six random characters that Secrets Manager adds at the end of the ARN when you created
            the secret. A partial ARN match can work as long as it uniquely matches only one secret.
            However, if your secret has a name that ends in a hyphen followed by six characters
            (before Secrets Manager adds the hyphen and six characters to the ARN) and you try
            to use that as a partial ARN, then those characters cause Secrets Manager to assume
            that you’re specifying a complete ARN. This confusion can cause unexpected results.
            To avoid this situation, we recommend that you don’t create secret names that end
            with a hyphen followed by six characters.</para></note>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.GetSECResourcePolicyCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.SecretsManager.Model.GetResourcePolicyResponse).
            Specifying the name of a property of type Amazon.SecretsManager.Model.GetResourcePolicyResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.GetSECResourcePolicyCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the SecretId parameter.
            The -PassThru parameter is deprecated, use -Select '^SecretId' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.SEC.GetSECSecretCmdlet">
            <summary>
            Retrieves the details of a secret. It does not include the encrypted fields. Only
            those fields that are populated with a value are returned in the response. 
            
             
            <para><b>Minimum permissions</b></para><para>
            To run this command, you must have the following permissions:
            </para><ul><li><para>
            secretsmanager:DescribeSecret
            </para></li></ul><para><b>Related operations</b></para><ul><li><para>
            To create a secret, use <a>CreateSecret</a>.
            </para></li><li><para>
            To modify a secret, use <a>UpdateSecret</a>.
            </para></li><li><para>
            To retrieve the encrypted secret information in a version of the secret, use <a>GetSecretValue</a>.
            </para></li><li><para>
            To list all of the secrets in the AWS account, use <a>ListSecrets</a>.
            </para></li></ul>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.GetSECSecretCmdlet.SecretId">
            <summary>
            <para>
            <para>The identifier of the secret whose details you want to retrieve. You can specify either
            the Amazon Resource Name (ARN) or the friendly name of the secret.</para><note><para>If you specify an ARN, we generally recommend that you specify a complete ARN. You
            can specify a partial ARN too—for example, if you don’t include the final hyphen and
            six random characters that Secrets Manager adds at the end of the ARN when you created
            the secret. A partial ARN match can work as long as it uniquely matches only one secret.
            However, if your secret has a name that ends in a hyphen followed by six characters
            (before Secrets Manager adds the hyphen and six characters to the ARN) and you try
            to use that as a partial ARN, then those characters cause Secrets Manager to assume
            that you’re specifying a complete ARN. This confusion can cause unexpected results.
            To avoid this situation, we recommend that you don’t create secret names that end
            with a hyphen followed by six characters.</para></note>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.GetSECSecretCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.SecretsManager.Model.DescribeSecretResponse).
            Specifying the name of a property of type Amazon.SecretsManager.Model.DescribeSecretResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.GetSECSecretCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the SecretId parameter.
            The -PassThru parameter is deprecated, use -Select '^SecretId' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.SEC.GetSECSecretListCmdlet">
            <summary>
            Lists all of the secrets that are stored by Secrets Manager in the AWS account. To
            list the versions currently stored for a specific secret, use <a>ListSecretVersionIds</a>.
            The encrypted fields <code>SecretString</code> and <code>SecretBinary</code> are not
            included in the output. To get that information, call the <a>GetSecretValue</a> operation.
            
             <note><para>
            Always check the <code>NextToken</code> response parameter when calling any of the
            <code>List*</code> operations. These operations can occasionally return an empty or
            shorter than expected list of results even when there are more results available.
            When this happens, the <code>NextToken</code> response parameter contains a value
            to pass to the next call to the same API to request the next part of the list.
            </para></note><para><b>Minimum permissions</b></para><para>
            To run this command, you must have the following permissions:
            </para><ul><li><para>
            secretsmanager:ListSecrets
            </para></li></ul><para><b>Related operations</b></para><ul><li><para>
            To list the versions attached to a secret, use <a>ListSecretVersionIds</a>.
            </para></li></ul><br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.GetSECSecretListCmdlet.MaxResult">
            <summary>
            <para>
            <para>(Optional) Limits the number of results that you want to include in the response.
            If you don't include this parameter, it defaults to a value that's specific to the
            operation. If additional items exist beyond the maximum you specify, the <code>NextToken</code>
            response element is present and has a value (isn't null). Include that value as the
            <code>NextToken</code> request parameter in the next call to the operation to get
            the next part of the results. Note that Secrets Manager might return fewer results
            than the maximum even when there are more results available. You should check <code>NextToken</code>
            after every operation to ensure that you receive all of the results.</para>
            </para>
            <para>
            <br/><b>Note:</b> In AWSPowerShell and AWSPowerShell.NetCore this parameter is used to limit the total number of items returned by the cmdlet.
            <br/>In AWS.Tools this parameter is simply passed to the service to specify how many items should be returned by each service call.
            <br/>Pipe the output of this cmdlet into Select-Object -First to terminate retrieving data pages early and control the number of items returned.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.GetSECSecretListCmdlet.NextToken">
            <summary>
            <para>
            <para>(Optional) Use this parameter in a request if you receive a <code>NextToken</code>
            response in a previous request that indicates that there's more output available.
            In a subsequent call, set it to the value of the previous call's <code>NextToken</code>
            response to indicate where the output should continue from.</para>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.GetSECSecretListCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'SecretList'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.SecretsManager.Model.ListSecretsResponse).
            Specifying the name of a property of type Amazon.SecretsManager.Model.ListSecretsResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.GetSECSecretListCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.SEC.GetSECSecretValueCmdlet">
            <summary>
            Retrieves the contents of the encrypted fields <code>SecretString</code> or <code>SecretBinary</code>
            from the specified version of a secret, whichever contains content.
            
             
            <para><b>Minimum permissions</b></para><para>
            To run this command, you must have the following permissions:
            </para><ul><li><para>
            secretsmanager:GetSecretValue
            </para></li><li><para>
            kms:Decrypt - required only if you use a customer-managed AWS KMS key to encrypt the
            secret. You do not need this permission to use the account's default AWS managed CMK
            for Secrets Manager.
            </para></li></ul><para><b>Related operations</b></para><ul><li><para>
            To create a new version of the secret with different encrypted information, use <a>PutSecretValue</a>.
            </para></li><li><para>
            To retrieve the non-encrypted details for the secret, use <a>DescribeSecret</a>.
            </para></li></ul>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.GetSECSecretValueCmdlet.SecretId">
            <summary>
            <para>
            <para>Specifies the secret containing the version that you want to retrieve. You can specify
            either the Amazon Resource Name (ARN) or the friendly name of the secret.</para><note><para>If you specify an ARN, we generally recommend that you specify a complete ARN. You
            can specify a partial ARN too—for example, if you don’t include the final hyphen and
            six random characters that Secrets Manager adds at the end of the ARN when you created
            the secret. A partial ARN match can work as long as it uniquely matches only one secret.
            However, if your secret has a name that ends in a hyphen followed by six characters
            (before Secrets Manager adds the hyphen and six characters to the ARN) and you try
            to use that as a partial ARN, then those characters cause Secrets Manager to assume
            that you’re specifying a complete ARN. This confusion can cause unexpected results.
            To avoid this situation, we recommend that you don’t create secret names that end
            with a hyphen followed by six characters.</para></note>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.GetSECSecretValueCmdlet.VersionId">
            <summary>
            <para>
            <para>Specifies the unique identifier of the version of the secret that you want to retrieve.
            If you specify this parameter then don't specify <code>VersionStage</code>. If you
            don't specify either a <code>VersionStage</code> or <code>VersionId</code> then the
            default is to perform the operation on the version with the <code>VersionStage</code>
            value of <code>AWSCURRENT</code>.</para><para>This value is typically a <a href="https://wikipedia.org/wiki/Universally_unique_identifier">UUID-type</a>
            value with 32 hexadecimal digits.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.GetSECSecretValueCmdlet.VersionStage">
            <summary>
            <para>
            <para>Specifies the secret version that you want to retrieve by the staging label attached
            to the version.</para><para>Staging labels are used to keep track of different versions during the rotation process.
            If you use this parameter then don't specify <code>VersionId</code>. If you don't
            specify either a <code>VersionStage</code> or <code>VersionId</code>, then the default
            is to perform the operation on the version with the <code>VersionStage</code> value
            of <code>AWSCURRENT</code>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.GetSECSecretValueCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.SecretsManager.Model.GetSecretValueResponse).
            Specifying the name of a property of type Amazon.SecretsManager.Model.GetSecretValueResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.GetSECSecretValueCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the SecretId parameter.
            The -PassThru parameter is deprecated, use -Select '^SecretId' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.SEC.GetSECSecretVersionIdListCmdlet">
            <summary>
            Lists all of the versions attached to the specified secret. The output does not include
            the <code>SecretString</code> or <code>SecretBinary</code> fields. By default, the
            list includes only versions that have at least one staging label in <code>VersionStage</code>
            attached.
            
             <note><para>
            Always check the <code>NextToken</code> response parameter when calling any of the
            <code>List*</code> operations. These operations can occasionally return an empty or
            shorter than expected list of results even when there are more results available.
            When this happens, the <code>NextToken</code> response parameter contains a value
            to pass to the next call to the same API to request the next part of the list.
            </para></note><para><b>Minimum permissions</b></para><para>
            To run this command, you must have the following permissions:
            </para><ul><li><para>
            secretsmanager:ListSecretVersionIds
            </para></li></ul><para><b>Related operations</b></para><ul><li><para>
            To list the secrets in an account, use <a>ListSecrets</a>.
            </para></li></ul><br/><br/>In the AWS.Tools.SecretsManager module, this cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.GetSECSecretVersionIdListCmdlet.IncludeDeprecated">
            <summary>
            <para>
            <para>(Optional) Specifies that you want the results to include versions that do not have
            any staging labels attached to them. Such versions are considered deprecated and are
            subject to deletion by Secrets Manager as needed.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.GetSECSecretVersionIdListCmdlet.SecretId">
            <summary>
            <para>
            <para>The identifier for the secret containing the versions you want to list. You can specify
            either the Amazon Resource Name (ARN) or the friendly name of the secret.</para><note><para>If you specify an ARN, we generally recommend that you specify a complete ARN. You
            can specify a partial ARN too—for example, if you don’t include the final hyphen and
            six random characters that Secrets Manager adds at the end of the ARN when you created
            the secret. A partial ARN match can work as long as it uniquely matches only one secret.
            However, if your secret has a name that ends in a hyphen followed by six characters
            (before Secrets Manager adds the hyphen and six characters to the ARN) and you try
            to use that as a partial ARN, then those characters cause Secrets Manager to assume
            that you’re specifying a complete ARN. This confusion can cause unexpected results.
            To avoid this situation, we recommend that you don’t create secret names that end
            with a hyphen followed by six characters.</para></note>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.GetSECSecretVersionIdListCmdlet.MaxResult">
            <summary>
            <para>
            <para>(Optional) Limits the number of results that you want to include in the response.
            If you don't include this parameter, it defaults to a value that's specific to the
            operation. If additional items exist beyond the maximum you specify, the <code>NextToken</code>
            response element is present and has a value (isn't null). Include that value as the
            <code>NextToken</code> request parameter in the next call to the operation to get
            the next part of the results. Note that Secrets Manager might return fewer results
            than the maximum even when there are more results available. You should check <code>NextToken</code>
            after every operation to ensure that you receive all of the results.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.GetSECSecretVersionIdListCmdlet.NextToken">
            <summary>
            <para>
            <para>(Optional) Use this parameter in a request if you receive a <code>NextToken</code>
            response in a previous request that indicates that there's more output available.
            In a subsequent call, set it to the value of the previous call's <code>NextToken</code>
            response to indicate where the output should continue from.</para>
            </para>
            <para>
            <br/><b>Note:</b> In the AWS.Tools.SecretsManager module, this parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.GetSECSecretVersionIdListCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.SecretsManager.Model.ListSecretVersionIdsResponse).
            Specifying the name of a property of type Amazon.SecretsManager.Model.ListSecretVersionIdsResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.GetSECSecretVersionIdListCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the SecretId parameter.
            The -PassThru parameter is deprecated, use -Select '^SecretId' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.GetSECSecretVersionIdListCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.SEC.InvokeSECSecretRotationCmdlet">
            <summary>
            Configures and starts the asynchronous process of rotating this secret. If you include
            the configuration parameters, the operation sets those values for the secret and then
            immediately starts a rotation. If you do not include the configuration parameters,
            the operation starts a rotation with the values already stored in the secret. After
            the rotation completes, the protected service and its clients all use the new version
            of the secret. 
            
             
            <para>
            This required configuration information includes the ARN of an AWS Lambda function
            and the time between scheduled rotations. The Lambda rotation function creates a new
            version of the secret and creates or updates the credentials on the protected service
            to match. After testing the new credentials, the function marks the new secret with
            the staging label <code>AWSCURRENT</code> so that your clients all immediately begin
            to use the new version. For more information about rotating secrets and how to configure
            a Lambda function to rotate the secrets for your protected service, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/rotating-secrets.html">Rotating
            Secrets in AWS Secrets Manager</a> in the <i>AWS Secrets Manager User Guide</i>.
            </para><para>
            Secrets Manager schedules the next rotation when the previous one is complete. Secrets
            Manager schedules the date by adding the rotation interval (number of days) to the
            actual date of the last rotation. The service chooses the hour within that 24-hour
            date window randomly. The minute is also chosen somewhat randomly, but weighted towards
            the top of the hour and influenced by a variety of factors that help distribute load.
            </para><para>
            The rotation function must end with the versions of the secret in one of two states:
            </para><ul><li><para>
            The <code>AWSPENDING</code> and <code>AWSCURRENT</code> staging labels are attached
            to the same version of the secret, or
            </para></li><li><para>
            The <code>AWSPENDING</code> staging label is not attached to any version of the secret.
            </para></li></ul><para>
            If instead the <code>AWSPENDING</code> staging label is present but is not attached
            to the same version as <code>AWSCURRENT</code> then any later invocation of <code>RotateSecret</code>
            assumes that a previous rotation request is still in progress and returns an error.
            </para><para><b>Minimum permissions</b></para><para>
            To run this command, you must have the following permissions:
            </para><ul><li><para>
            secretsmanager:RotateSecret
            </para></li><li><para>
            lambda:InvokeFunction (on the function specified in the secret's metadata)
            </para></li></ul><para><b>Related operations</b></para><ul><li><para>
            To list the secrets in your account, use <a>ListSecrets</a>.
            </para></li><li><para>
            To get the details for a version of a secret, use <a>DescribeSecret</a>.
            </para></li><li><para>
            To create a new version of a secret, use <a>CreateSecret</a>.
            </para></li><li><para>
            To attach staging labels to or remove staging labels from a version of a secret, use
            <a>UpdateSecretVersionStage</a>.
            </para></li></ul>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.InvokeSECSecretRotationCmdlet.RotationRules_AutomaticallyAfterDay">
            <summary>
            <para>
            <para>Specifies the number of days between automatic scheduled rotations of the secret.</para><para>Secrets Manager schedules the next rotation when the previous one is complete. Secrets
            Manager schedules the date by adding the rotation interval (number of days) to the
            actual date of the last rotation. The service chooses the hour within that 24-hour
            date window randomly. The minute is also chosen somewhat randomly, but weighted towards
            the top of the hour and influenced by a variety of factors that help distribute load.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.InvokeSECSecretRotationCmdlet.ClientRequestToken">
            <summary>
            <para>
            <para>(Optional) Specifies a unique identifier for the new version of the secret that helps
            ensure idempotency. </para><para>If you use the AWS CLI or one of the AWS SDK to call this operation, then you can
            leave this parameter empty. The CLI or SDK generates a random UUID for you and includes
            that in the request for this parameter. If you don't use the SDK and instead generate
            a raw HTTP request to the Secrets Manager service endpoint, then you must generate
            a <code>ClientRequestToken</code> yourself for new versions and include that value
            in the request.</para><para>You only need to specify your own value if you are implementing your own retry logic
            and want to ensure that a given secret is not created twice. We recommend that you
            generate a <a href="https://wikipedia.org/wiki/Universally_unique_identifier">UUID-type</a>
            value to ensure uniqueness within the specified secret. </para><para>Secrets Manager uses this value to prevent the accidental creation of duplicate versions
            if there are failures and retries during the function's processing. This value becomes
            the <code>VersionId</code> of the new version.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.InvokeSECSecretRotationCmdlet.RotationLambdaARN">
            <summary>
            <para>
            <para>(Optional) Specifies the ARN of the Lambda function that can rotate the secret.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.InvokeSECSecretRotationCmdlet.SecretId">
            <summary>
            <para>
            <para>Specifies the secret that you want to rotate. You can specify either the Amazon Resource
            Name (ARN) or the friendly name of the secret.</para><note><para>If you specify an ARN, we generally recommend that you specify a complete ARN. You
            can specify a partial ARN too—for example, if you don’t include the final hyphen and
            six random characters that Secrets Manager adds at the end of the ARN when you created
            the secret. A partial ARN match can work as long as it uniquely matches only one secret.
            However, if your secret has a name that ends in a hyphen followed by six characters
            (before Secrets Manager adds the hyphen and six characters to the ARN) and you try
            to use that as a partial ARN, then those characters cause Secrets Manager to assume
            that you’re specifying a complete ARN. This confusion can cause unexpected results.
            To avoid this situation, we recommend that you don’t create secret names that end
            with a hyphen followed by six characters.</para></note>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.InvokeSECSecretRotationCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.SecretsManager.Model.RotateSecretResponse).
            Specifying the name of a property of type Amazon.SecretsManager.Model.RotateSecretResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.InvokeSECSecretRotationCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the SecretId parameter.
            The -PassThru parameter is deprecated, use -Select '^SecretId' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.InvokeSECSecretRotationCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.SEC.NewSECSecretCmdlet">
            <summary>
            Creates a new secret. A secret in Secrets Manager consists of both the protected secret
            data and the important information needed to manage the secret.
            
             
            <para>
            Secrets Manager stores the encrypted secret data in one of a collection of "versions"
            associated with the secret. Each version contains a copy of the encrypted secret data.
            Each version is associated with one or more "staging labels" that identify where the
            version is in the rotation cycle. The <code>SecretVersionsToStages</code> field of
            the secret contains the mapping of staging labels to the active versions of the secret.
            Versions without a staging label are considered deprecated and are not included in
            the list.
            </para><para>
            You provide the secret data to be encrypted by putting text in either the <code>SecretString</code>
            parameter or binary data in the <code>SecretBinary</code> parameter, but not both.
            If you include <code>SecretString</code> or <code>SecretBinary</code> then Secrets
            Manager also creates an initial secret version and automatically attaches the staging
            label <code>AWSCURRENT</code> to the new version.
            </para><note><ul><li><para>
            If you call an operation that needs to encrypt or decrypt the <code>SecretString</code>
            or <code>SecretBinary</code> for a secret in the same account as the calling user
            and that secret doesn't specify a AWS KMS encryption key, Secrets Manager uses the
            account's default AWS managed customer master key (CMK) with the alias <code>aws/secretsmanager</code>.
            If this key doesn't already exist in your account then Secrets Manager creates it
            for you automatically. All users and roles in the same AWS account automatically have
            access to use the default CMK. Note that if an Secrets Manager API call results in
            AWS having to create the account's AWS-managed CMK, it can result in a one-time significant
            delay in returning the result.
            </para></li><li><para>
            If the secret is in a different AWS account from the credentials calling an API that
            requires encryption or decryption of the secret value then you must create and use
            a custom AWS KMS CMK because you can't access the default CMK for the account using
            credentials from a different AWS account. Store the ARN of the CMK in the secret when
            you create the secret or when you update it by including it in the <code>KMSKeyId</code>.
            If you call an API that must encrypt or decrypt <code>SecretString</code> or <code>SecretBinary</code>
            using credentials from a different account then the AWS KMS key policy must grant
            cross-account access to that other account's user or role for both the kms:GenerateDataKey
            and kms:Decrypt operations.
            </para></li></ul></note><para></para><para><b>Minimum permissions</b></para><para>
            To run this command, you must have the following permissions:
            </para><ul><li><para>
            secretsmanager:CreateSecret
            </para></li><li><para>
            kms:GenerateDataKey - needed only if you use a customer-managed AWS KMS key to encrypt
            the secret. You do not need this permission to use the account's default AWS managed
            CMK for Secrets Manager.
            </para></li><li><para>
            kms:Decrypt - needed only if you use a customer-managed AWS KMS key to encrypt the
            secret. You do not need this permission to use the account's default AWS managed CMK
            for Secrets Manager.
            </para></li><li><para>
            secretsmanager:TagResource - needed only if you include the <code>Tags</code> parameter.
            
            </para></li></ul><para><b>Related operations</b></para><ul><li><para>
            To delete a secret, use <a>DeleteSecret</a>.
            </para></li><li><para>
            To modify an existing secret, use <a>UpdateSecret</a>.
            </para></li><li><para>
            To create a new version of a secret, use <a>PutSecretValue</a>.
            </para></li><li><para>
            To retrieve the encrypted secure string and secure binary values, use <a>GetSecretValue</a>.
            </para></li><li><para>
            To retrieve all other details for a secret, use <a>DescribeSecret</a>. This does not
            include the encrypted secure string and secure binary values.
            </para></li><li><para>
            To retrieve the list of secret versions associated with the current secret, use <a>DescribeSecret</a>
            and examine the <code>SecretVersionsToStages</code> response value.
            </para></li></ul>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.NewSECSecretCmdlet.ClientRequestToken">
            <summary>
            <para>
            <para>(Optional) If you include <code>SecretString</code> or <code>SecretBinary</code>,
            then an initial version is created as part of the secret, and this parameter specifies
            a unique identifier for the new version. </para><note><para>If you use the AWS CLI or one of the AWS SDK to call this operation, then you can
            leave this parameter empty. The CLI or SDK generates a random UUID for you and includes
            it as the value for this parameter in the request. If you don't use the SDK and instead
            generate a raw HTTP request to the Secrets Manager service endpoint, then you must
            generate a <code>ClientRequestToken</code> yourself for the new version and include
            that value in the request.</para></note><para>This value helps ensure idempotency. Secrets Manager uses this value to prevent the
            accidental creation of duplicate versions if there are failures and retries during
            a rotation. We recommend that you generate a <a href="https://wikipedia.org/wiki/Universally_unique_identifier">UUID-type</a>
            value to ensure uniqueness of your versions within the specified secret. </para><ul><li><para>If the <code>ClientRequestToken</code> value isn't already associated with a version
            of the secret then a new version of the secret is created. </para></li><li><para>If a version with this value already exists and that version's <code>SecretString</code>
            and <code>SecretBinary</code> values are the same as those in the request, then the
            request is ignored (the operation is idempotent).</para></li><li><para>If a version with this value already exists and that version's <code>SecretString</code>
            and <code>SecretBinary</code> values are different from those in the request then
            the request fails because you cannot modify an existing version. Instead, use <a>PutSecretValue</a>
            to create a new version.</para></li></ul><para>This value becomes the <code>VersionId</code> of the new version.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.NewSECSecretCmdlet.Description">
            <summary>
            <para>
            <para>(Optional) Specifies a user-provided description of the secret.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.NewSECSecretCmdlet.KmsKeyId">
            <summary>
            <para>
            <para>(Optional) Specifies the ARN, Key ID, or alias of the AWS KMS customer master key
            (CMK) to be used to encrypt the <code>SecretString</code> or <code>SecretBinary</code>
            values in the versions stored in this secret.</para><para>You can specify any of the supported ways to identify a AWS KMS key ID. If you need
            to reference a CMK in a different account, you can use only the key ARN or the alias
            ARN.</para><para>If you don't specify this value, then Secrets Manager defaults to using the AWS account's
            default CMK (the one named <code>aws/secretsmanager</code>). If a AWS KMS CMK with
            that name doesn't yet exist, then Secrets Manager creates it for you automatically
            the first time it needs to encrypt a version's <code>SecretString</code> or <code>SecretBinary</code>
            fields.</para><important><para>You can use the account's default CMK to encrypt and decrypt only if you call this
            operation using credentials from the same account that owns the secret. If the secret
            is in a different account, then you must create a custom CMK and specify the ARN in
            this field. </para></important>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.NewSECSecretCmdlet.Name">
            <summary>
            <para>
            <para>Specifies the friendly name of the new secret.</para><para>The secret name must be ASCII letters, digits, or the following characters : /_+=.@-</para><note><para>Don't end your secret name with a hyphen followed by six characters. If you do so,
            you risk confusion and unexpected results when searching for a secret by partial ARN.
            This is because Secrets Manager automatically adds a hyphen and six random characters
            at the end of the ARN.</para></note>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.NewSECSecretCmdlet.SecretBinary">
            <summary>
            <para>
            <para>(Optional) Specifies binary data that you want to encrypt and store in the new version
            of the secret. To use this parameter in the command-line tools, we recommend that
            you store your binary data in a file and then use the appropriate technique for your
            tool to pass the contents of the file as a parameter.</para><para>Either <code>SecretString</code> or <code>SecretBinary</code> must have a value, but
            not both. They cannot both be empty.</para><para>This parameter is not available using the Secrets Manager console. It can be accessed
            only by using the AWS CLI or one of the AWS SDKs.</para>
            </para>
            <para>The cmdlet will automatically convert the supplied parameter of type string, string[], System.IO.FileInfo or System.IO.Stream to byte[] before supplying it to the service.</para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.NewSECSecretCmdlet.SecretString">
            <summary>
            <para>
            <para>(Optional) Specifies text data that you want to encrypt and store in this new version
            of the secret.</para><para>Either <code>SecretString</code> or <code>SecretBinary</code> must have a value, but
            not both. They cannot both be empty.</para><para>If you create a secret by using the Secrets Manager console then Secrets Manager puts
            the protected secret text in only the <code>SecretString</code> parameter. The Secrets
            Manager console stores the information as a JSON structure of key/value pairs that
            the Lambda rotation function knows how to parse.</para><para>For storing multiple values, we recommend that you use a JSON text string argument
            and specify key/value pairs. For information on how to format a JSON parameter for
            the various command line tool environments, see <a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-using-param.html#cli-using-param-json">Using
            JSON for Parameters</a> in the <i>AWS CLI User Guide</i>. For example:</para><para><code>[{"username":"bob"},{"password":"abc123xyz456"}]</code></para><para>If your command-line tool or SDK requires quotation marks around the parameter, you
            should use single quotes to avoid confusion with the double quotes required in the
            JSON text. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.NewSECSecretCmdlet.Tag">
            <summary>
            <para>
            <para>(Optional) Specifies a list of user-defined tags that are attached to the secret.
            Each tag is a "Key" and "Value" pair of strings. This operation only appends tags
            to the existing list of tags. To remove tags, you must use <a>UntagResource</a>.</para><important><ul><li><para>Secrets Manager tag key names are case sensitive. A tag with the key "ABC" is a different
            tag from one with key "abc".</para></li><li><para>If you check tags in IAM policy <code>Condition</code> elements as part of your security
            strategy, then adding or removing a tag can change permissions. If the successful
            completion of this operation would result in you losing your permissions for this
            secret, then this operation is blocked and returns an <code>Access Denied</code> error.</para></li></ul></important><para>This parameter requires a JSON text string argument. For information on how to format
            a JSON parameter for the various command line tool environments, see <a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-using-param.html#cli-using-param-json">Using
            JSON for Parameters</a> in the <i>AWS CLI User Guide</i>. For example:</para><para><code>[{"Key":"CostCenter","Value":"12345"},{"Key":"environment","Value":"production"}]</code></para><para>If your command-line tool or SDK requires quotation marks around the parameter, you
            should use single quotes to avoid confusion with the double quotes required in the
            JSON text. </para><para>The following basic restrictions apply to tags:</para><ul><li><para>Maximum number of tags per secret—50</para></li><li><para>Maximum key length—127 Unicode characters in UTF-8</para></li><li><para>Maximum value length—255 Unicode characters in UTF-8</para></li><li><para>Tag keys and values are case sensitive.</para></li><li><para>Do not use the <code>aws:</code> prefix in your tag names or values because it is
            reserved for AWS use. You can't edit or delete tag names or values with this prefix.
            Tags with this prefix do not count against your tags per secret limit.</para></li><li><para>If your tagging schema will be used across multiple services and resources, remember
            that other services might have restrictions on allowed characters. Generally allowed
            characters are: letters, spaces, and numbers representable in UTF-8, plus the following
            special characters: + - = . _ : / @.</para></li></ul>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.NewSECSecretCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.SecretsManager.Model.CreateSecretResponse).
            Specifying the name of a property of type Amazon.SecretsManager.Model.CreateSecretResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.NewSECSecretCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the SecretString parameter.
            The -PassThru parameter is deprecated, use -Select '^SecretString' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.NewSECSecretCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.SEC.RemoveSECResourcePolicyCmdlet">
            <summary>
            Deletes the resource-based permission policy that's attached to the secret.
            
             
            <para><b>Minimum permissions</b></para><para>
            To run this command, you must have the following permissions:
            </para><ul><li><para>
            secretsmanager:DeleteResourcePolicy
            </para></li></ul><para><b>Related operations</b></para><ul><li><para>
            To attach a resource policy to a secret, use <a>PutResourcePolicy</a>.
            </para></li><li><para>
            To retrieve the current resource-based policy that's attached to a secret, use <a>GetResourcePolicy</a>.
            </para></li><li><para>
            To list all of the currently available secrets, use <a>ListSecrets</a>.
            </para></li></ul>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.RemoveSECResourcePolicyCmdlet.SecretId">
            <summary>
            <para>
            <para>Specifies the secret that you want to delete the attached resource-based policy for.
            You can specify either the Amazon Resource Name (ARN) or the friendly name of the
            secret.</para><note><para>If you specify an ARN, we generally recommend that you specify a complete ARN. You
            can specify a partial ARN too—for example, if you don’t include the final hyphen and
            six random characters that Secrets Manager adds at the end of the ARN when you created
            the secret. A partial ARN match can work as long as it uniquely matches only one secret.
            However, if your secret has a name that ends in a hyphen followed by six characters
            (before Secrets Manager adds the hyphen and six characters to the ARN) and you try
            to use that as a partial ARN, then those characters cause Secrets Manager to assume
            that you’re specifying a complete ARN. This confusion can cause unexpected results.
            To avoid this situation, we recommend that you don’t create secret names that end
            with a hyphen followed by six characters.</para></note>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.RemoveSECResourcePolicyCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.SecretsManager.Model.DeleteResourcePolicyResponse).
            Specifying the name of a property of type Amazon.SecretsManager.Model.DeleteResourcePolicyResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.RemoveSECResourcePolicyCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the SecretId parameter.
            The -PassThru parameter is deprecated, use -Select '^SecretId' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.RemoveSECResourcePolicyCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.SEC.RemoveSECResourceTagCmdlet">
            <summary>
            Removes one or more tags from the specified secret.
            
             
            <para>
            This operation is idempotent. If a requested tag is not attached to the secret, no
            error is returned and the secret metadata is unchanged.
            </para><important><para>
            If you use tags as part of your security strategy, then removing a tag can change
            permissions. If successfully completing this operation would result in you losing
            your permissions for this secret, then the operation is blocked and returns an Access
            Denied error.
            </para></important><para><b>Minimum permissions</b></para><para>
            To run this command, you must have the following permissions:
            </para><ul><li><para>
            secretsmanager:UntagResource
            </para></li></ul><para><b>Related operations</b></para><ul><li><para>
            To add one or more tags to the collection attached to a secret, use <a>TagResource</a>.
            </para></li><li><para>
            To view the list of tags attached to a secret, use <a>DescribeSecret</a>.
            </para></li></ul>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.RemoveSECResourceTagCmdlet.SecretId">
            <summary>
            <para>
            <para>The identifier for the secret that you want to remove tags from. You can specify either
            the Amazon Resource Name (ARN) or the friendly name of the secret.</para><note><para>If you specify an ARN, we generally recommend that you specify a complete ARN. You
            can specify a partial ARN too—for example, if you don’t include the final hyphen and
            six random characters that Secrets Manager adds at the end of the ARN when you created
            the secret. A partial ARN match can work as long as it uniquely matches only one secret.
            However, if your secret has a name that ends in a hyphen followed by six characters
            (before Secrets Manager adds the hyphen and six characters to the ARN) and you try
            to use that as a partial ARN, then those characters cause Secrets Manager to assume
            that you’re specifying a complete ARN. This confusion can cause unexpected results.
            To avoid this situation, we recommend that you don’t create secret names that end
            with a hyphen followed by six characters.</para></note>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.RemoveSECResourceTagCmdlet.TagKey">
            <summary>
            <para>
            <para>A list of tag key names to remove from the secret. You don't specify the value. Both
            the key and its associated value are removed.</para><para>This parameter to the API requires a JSON text string argument. For information on
            how to format a JSON parameter for the various command line tool environments, see
            <a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-using-param.html#cli-using-param-json">Using
            JSON for Parameters</a> in the <i>AWS CLI User Guide</i>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.RemoveSECResourceTagCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The cmdlet doesn't have a return value by default.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.SecretsManager.Model.UntagResourceResponse).
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.RemoveSECResourceTagCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the SecretId parameter.
            The -PassThru parameter is deprecated, use -Select '^SecretId' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.RemoveSECResourceTagCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.SEC.RemoveSECSecretCmdlet">
            <summary>
            Deletes an entire secret and all of its versions. You can optionally include a recovery
            window during which you can restore the secret. If you don't specify a recovery window
            value, the operation defaults to 30 days. Secrets Manager attaches a <code>DeletionDate</code>
            stamp to the secret that specifies the end of the recovery window. At the end of the
            recovery window, Secrets Manager deletes the secret permanently.
            
             
            <para>
            At any time before recovery window ends, you can use <a>RestoreSecret</a> to remove
            the <code>DeletionDate</code> and cancel the deletion of the secret.
            </para><para>
            You cannot access the encrypted secret information in any secret that is scheduled
            for deletion. If you need to access that information, you must cancel the deletion
            with <a>RestoreSecret</a> and then retrieve the information.
            </para><note><ul><li><para>
            There is no explicit operation to delete a version of a secret. Instead, remove all
            staging labels from the <code>VersionStage</code> field of a version. That marks the
            version as deprecated and allows Secrets Manager to delete it as needed. Versions
            that do not have any staging labels do not show up in <a>ListSecretVersionIds</a>
            unless you specify <code>IncludeDeprecated</code>.
            </para></li><li><para>
            The permanent secret deletion at the end of the waiting period is performed as a background
            task with low priority. There is no guarantee of a specific time after the recovery
            window for the actual delete operation to occur.
            </para></li></ul></note><para><b>Minimum permissions</b></para><para>
            To run this command, you must have the following permissions:
            </para><ul><li><para>
            secretsmanager:DeleteSecret
            </para></li></ul><para><b>Related operations</b></para><ul><li><para>
            To create a secret, use <a>CreateSecret</a>.
            </para></li><li><para>
            To cancel deletion of a version of a secret before the recovery window has expired,
            use <a>RestoreSecret</a>.
            </para></li></ul>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.RemoveSECSecretCmdlet.DeleteWithNoRecovery">
            <summary>
            <para>
            <para>(Optional) Specifies that the secret is to be deleted without any recovery window.
            You can't use both this parameter and the <code>RecoveryWindowInDays</code> parameter
            in the same API call.</para><para>An asynchronous background process performs the actual deletion, so there can be a
            short delay before the operation completes. If you write code to delete and then immediately
            recreate a secret with the same name, ensure that your code includes appropriate back
            off and retry logic.</para><important><para>Use this parameter with caution. This parameter causes the operation to skip the normal
            waiting period before the permanent deletion that AWS would normally impose with the
            <code>RecoveryWindowInDays</code> parameter. If you delete a secret with the <code>ForceDeleteWithouRecovery</code>
            parameter, then you have no opportunity to recover the secret. It is permanently lost.</para></important>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.RemoveSECSecretCmdlet.RecoveryWindowInDay">
            <summary>
            <para>
            <para>(Optional) Specifies the number of days that Secrets Manager waits before it can delete
            the secret. You can't use both this parameter and the <code>ForceDeleteWithoutRecovery</code>
            parameter in the same API call.</para><para>This value can range from 7 to 30 days. The default value is 30.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.RemoveSECSecretCmdlet.SecretId">
            <summary>
            <para>
            <para>Specifies the secret that you want to delete. You can specify either the Amazon Resource
            Name (ARN) or the friendly name of the secret.</para><note><para>If you specify an ARN, we generally recommend that you specify a complete ARN. You
            can specify a partial ARN too—for example, if you don’t include the final hyphen and
            six random characters that Secrets Manager adds at the end of the ARN when you created
            the secret. A partial ARN match can work as long as it uniquely matches only one secret.
            However, if your secret has a name that ends in a hyphen followed by six characters
            (before Secrets Manager adds the hyphen and six characters to the ARN) and you try
            to use that as a partial ARN, then those characters cause Secrets Manager to assume
            that you’re specifying a complete ARN. This confusion can cause unexpected results.
            To avoid this situation, we recommend that you don’t create secret names that end
            with a hyphen followed by six characters.</para></note>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.RemoveSECSecretCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.SecretsManager.Model.DeleteSecretResponse).
            Specifying the name of a property of type Amazon.SecretsManager.Model.DeleteSecretResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.RemoveSECSecretCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the SecretId parameter.
            The -PassThru parameter is deprecated, use -Select '^SecretId' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.RemoveSECSecretCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.SEC.RestoreSECSecretCmdlet">
            <summary>
            Cancels the scheduled deletion of a secret by removing the <code>DeletedDate</code>
            time stamp. This makes the secret accessible to query once again.
            
             
            <para><b>Minimum permissions</b></para><para>
            To run this command, you must have the following permissions:
            </para><ul><li><para>
            secretsmanager:RestoreSecret
            </para></li></ul><para><b>Related operations</b></para><ul><li><para>
            To delete a secret, use <a>DeleteSecret</a>.
            </para></li></ul>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.RestoreSECSecretCmdlet.SecretId">
            <summary>
            <para>
            <para>Specifies the secret that you want to restore from a previously scheduled deletion.
            You can specify either the Amazon Resource Name (ARN) or the friendly name of the
            secret.</para><note><para>If you specify an ARN, we generally recommend that you specify a complete ARN. You
            can specify a partial ARN too—for example, if you don’t include the final hyphen and
            six random characters that Secrets Manager adds at the end of the ARN when you created
            the secret. A partial ARN match can work as long as it uniquely matches only one secret.
            However, if your secret has a name that ends in a hyphen followed by six characters
            (before Secrets Manager adds the hyphen and six characters to the ARN) and you try
            to use that as a partial ARN, then those characters cause Secrets Manager to assume
            that you’re specifying a complete ARN. This confusion can cause unexpected results.
            To avoid this situation, we recommend that you don’t create secret names that end
            with a hyphen followed by six characters.</para></note>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.RestoreSECSecretCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.SecretsManager.Model.RestoreSecretResponse).
            Specifying the name of a property of type Amazon.SecretsManager.Model.RestoreSecretResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.RestoreSECSecretCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the SecretId parameter.
            The -PassThru parameter is deprecated, use -Select '^SecretId' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.RestoreSECSecretCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.SEC.StopSECSecretRotationCmdlet">
            <summary>
            Disables automatic scheduled rotation and cancels the rotation of a secret if one
            is currently in progress.
            
             
            <para>
            To re-enable scheduled rotation, call <a>RotateSecret</a> with <code>AutomaticallyRotateAfterDays</code>
            set to a value greater than 0. This will immediately rotate your secret and then enable
            the automatic schedule.
            </para><note><para>
            If you cancel a rotation that is in progress, it can leave the <code>VersionStage</code>
            labels in an unexpected state. Depending on what step of the rotation was in progress,
            you might need to remove the staging label <code>AWSPENDING</code> from the partially
            created version, specified by the <code>VersionId</code> response value. You should
            also evaluate the partially rotated new version to see if it should be deleted, which
            you can do by removing all staging labels from the new version's <code>VersionStage</code>
            field.
            </para></note><para>
            To successfully start a rotation, the staging label <code>AWSPENDING</code> must be
            in one of the following states:
            </para><ul><li><para>
            Not be attached to any version at all
            </para></li><li><para>
            Attached to the same version as the staging label <code>AWSCURRENT</code></para></li></ul><para>
            If the staging label <code>AWSPENDING</code> is attached to a different version than
            the version with <code>AWSCURRENT</code> then the attempt to rotate fails.
            </para><para><b>Minimum permissions</b></para><para>
            To run this command, you must have the following permissions:
            </para><ul><li><para>
            secretsmanager:CancelRotateSecret
            </para></li></ul><para><b>Related operations</b></para><ul><li><para>
            To configure rotation for a secret or to manually trigger a rotation, use <a>RotateSecret</a>.
            </para></li><li><para>
            To get the rotation configuration details for a secret, use <a>DescribeSecret</a>.
            </para></li><li><para>
            To list all of the currently available secrets, use <a>ListSecrets</a>.
            </para></li><li><para>
            To list all of the versions currently associated with a secret, use <a>ListSecretVersionIds</a>.
            </para></li></ul>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.StopSECSecretRotationCmdlet.SecretId">
            <summary>
            <para>
            <para>Specifies the secret for which you want to cancel a rotation request. You can specify
            either the Amazon Resource Name (ARN) or the friendly name of the secret.</para><note><para>If you specify an ARN, we generally recommend that you specify a complete ARN. You
            can specify a partial ARN too—for example, if you don’t include the final hyphen and
            six random characters that Secrets Manager adds at the end of the ARN when you created
            the secret. A partial ARN match can work as long as it uniquely matches only one secret.
            However, if your secret has a name that ends in a hyphen followed by six characters
            (before Secrets Manager adds the hyphen and six characters to the ARN) and you try
            to use that as a partial ARN, then those characters cause Secrets Manager to assume
            that you’re specifying a complete ARN. This confusion can cause unexpected results.
            To avoid this situation, we recommend that you don’t create secret names that end
            with a hyphen followed by six characters.</para></note>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.StopSECSecretRotationCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.SecretsManager.Model.CancelRotateSecretResponse).
            Specifying the name of a property of type Amazon.SecretsManager.Model.CancelRotateSecretResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.StopSECSecretRotationCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the SecretId parameter.
            The -PassThru parameter is deprecated, use -Select '^SecretId' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.StopSECSecretRotationCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.SEC.UpdateSECSecretCmdlet">
            <summary>
            Modifies many of the details of the specified secret. If you include a <code>ClientRequestToken</code>
            and <i>either</i><code>SecretString</code> or <code>SecretBinary</code> then it also
            creates a new version attached to the secret.
            
             
            <para>
            To modify the rotation configuration of a secret, use <a>RotateSecret</a> instead.
            </para><note><para>
            The Secrets Manager console uses only the <code>SecretString</code> parameter and
            therefore limits you to encrypting and storing only a text string. To encrypt and
            store binary data as part of the version of a secret, you must use either the AWS
            CLI or one of the AWS SDKs.
            </para></note><ul><li><para>
            If a version with a <code>VersionId</code> with the same value as the <code>ClientRequestToken</code>
            parameter already exists, the operation results in an error. You cannot modify an
            existing version, you can only create a new version.
            </para></li><li><para>
            If you include <code>SecretString</code> or <code>SecretBinary</code> to create a
            new secret version, Secrets Manager automatically attaches the staging label <code>AWSCURRENT</code>
            to the new version. 
            </para></li></ul><note><ul><li><para>
            If you call an operation that needs to encrypt or decrypt the <code>SecretString</code>
            or <code>SecretBinary</code> for a secret in the same account as the calling user
            and that secret doesn't specify a AWS KMS encryption key, Secrets Manager uses the
            account's default AWS managed customer master key (CMK) with the alias <code>aws/secretsmanager</code>.
            If this key doesn't already exist in your account then Secrets Manager creates it
            for you automatically. All users and roles in the same AWS account automatically have
            access to use the default CMK. Note that if an Secrets Manager API call results in
            AWS having to create the account's AWS-managed CMK, it can result in a one-time significant
            delay in returning the result.
            </para></li><li><para>
            If the secret is in a different AWS account from the credentials calling an API that
            requires encryption or decryption of the secret value then you must create and use
            a custom AWS KMS CMK because you can't access the default CMK for the account using
            credentials from a different AWS account. Store the ARN of the CMK in the secret when
            you create the secret or when you update it by including it in the <code>KMSKeyId</code>.
            If you call an API that must encrypt or decrypt <code>SecretString</code> or <code>SecretBinary</code>
            using credentials from a different account then the AWS KMS key policy must grant
            cross-account access to that other account's user or role for both the kms:GenerateDataKey
            and kms:Decrypt operations.
            </para></li></ul></note><para><b>Minimum permissions</b></para><para>
            To run this command, you must have the following permissions:
            </para><ul><li><para>
            secretsmanager:UpdateSecret
            </para></li><li><para>
            kms:GenerateDataKey - needed only if you use a custom AWS KMS key to encrypt the secret.
            You do not need this permission to use the account's AWS managed CMK for Secrets Manager.
            </para></li><li><para>
            kms:Decrypt - needed only if you use a custom AWS KMS key to encrypt the secret. You
            do not need this permission to use the account's AWS managed CMK for Secrets Manager.
            </para></li></ul><para><b>Related operations</b></para><ul><li><para>
            To create a new secret, use <a>CreateSecret</a>.
            </para></li><li><para>
            To add only a new version to an existing secret, use <a>PutSecretValue</a>.
            </para></li><li><para>
            To get the details for a secret, use <a>DescribeSecret</a>.
            </para></li><li><para>
            To list the versions contained in a secret, use <a>ListSecretVersionIds</a>.
            </para></li></ul>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.UpdateSECSecretCmdlet.ClientRequestToken">
            <summary>
            <para>
            <para>(Optional) If you want to add a new version to the secret, this parameter specifies
            a unique identifier for the new version that helps ensure idempotency. </para><para>If you use the AWS CLI or one of the AWS SDK to call this operation, then you can
            leave this parameter empty. The CLI or SDK generates a random UUID for you and includes
            that in the request. If you don't use the SDK and instead generate a raw HTTP request
            to the Secrets Manager service endpoint, then you must generate a <code>ClientRequestToken</code>
            yourself for new versions and include that value in the request.</para><para>You typically only need to interact with this value if you implement your own retry
            logic and want to ensure that a given secret is not created twice. We recommend that
            you generate a <a href="https://wikipedia.org/wiki/Universally_unique_identifier">UUID-type</a>
            value to ensure uniqueness within the specified secret. </para><para>Secrets Manager uses this value to prevent the accidental creation of duplicate versions
            if there are failures and retries during the Lambda rotation function's processing.</para><ul><li><para>If the <code>ClientRequestToken</code> value isn't already associated with a version
            of the secret then a new version of the secret is created. </para></li><li><para>If a version with this value already exists and that version's <code>SecretString</code>
            and <code>SecretBinary</code> values are the same as those in the request then the
            request is ignored (the operation is idempotent). </para></li><li><para>If a version with this value already exists and that version's <code>SecretString</code>
            and <code>SecretBinary</code> values are different from the request then an error
            occurs because you cannot modify an existing secret value.</para></li></ul><para>This value becomes the <code>VersionId</code> of the new version.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.UpdateSECSecretCmdlet.Description">
            <summary>
            <para>
            <para>(Optional) Specifies an updated user-provided description of the secret.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.UpdateSECSecretCmdlet.KmsKeyId">
            <summary>
            <para>
            <para>(Optional) Specifies an updated ARN or alias of the AWS KMS customer master key (CMK)
            to be used to encrypt the protected text in new versions of this secret.</para><important><para>You can only use the account's default CMK to encrypt and decrypt if you call this
            operation using credentials from the same account that owns the secret. If the secret
            is in a different account, then you must create a custom CMK and provide the ARN of
            that CMK in this field. The user making the call must have permissions to both the
            secret and the CMK in their respective accounts.</para></important>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.UpdateSECSecretCmdlet.SecretBinary">
            <summary>
            <para>
            <para>(Optional) Specifies updated binary data that you want to encrypt and store in the
            new version of the secret. To use this parameter in the command-line tools, we recommend
            that you store your binary data in a file and then use the appropriate technique for
            your tool to pass the contents of the file as a parameter. Either <code>SecretBinary</code>
            or <code>SecretString</code> must have a value, but not both. They cannot both be
            empty.</para><para>This parameter is not accessible using the Secrets Manager console.</para>
            </para>
            <para>The cmdlet will automatically convert the supplied parameter of type string, string[], System.IO.FileInfo or System.IO.Stream to byte[] before supplying it to the service.</para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.UpdateSECSecretCmdlet.SecretId">
            <summary>
            <para>
            <para>Specifies the secret that you want to modify or to which you want to add a new version.
            You can specify either the Amazon Resource Name (ARN) or the friendly name of the
            secret.</para><note><para>If you specify an ARN, we generally recommend that you specify a complete ARN. You
            can specify a partial ARN too—for example, if you don’t include the final hyphen and
            six random characters that Secrets Manager adds at the end of the ARN when you created
            the secret. A partial ARN match can work as long as it uniquely matches only one secret.
            However, if your secret has a name that ends in a hyphen followed by six characters
            (before Secrets Manager adds the hyphen and six characters to the ARN) and you try
            to use that as a partial ARN, then those characters cause Secrets Manager to assume
            that you’re specifying a complete ARN. This confusion can cause unexpected results.
            To avoid this situation, we recommend that you don’t create secret names that end
            with a hyphen followed by six characters.</para></note>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.UpdateSECSecretCmdlet.SecretString">
            <summary>
            <para>
            <para>(Optional) Specifies updated text data that you want to encrypt and store in this
            new version of the secret. Either <code>SecretBinary</code> or <code>SecretString</code>
            must have a value, but not both. They cannot both be empty.</para><para>If you create this secret by using the Secrets Manager console then Secrets Manager
            puts the protected secret text in only the <code>SecretString</code> parameter. The
            Secrets Manager console stores the information as a JSON structure of key/value pairs
            that the default Lambda rotation function knows how to parse.</para><para>For storing multiple values, we recommend that you use a JSON text string argument
            and specify key/value pairs. For information on how to format a JSON parameter for
            the various command line tool environments, see <a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-using-param.html#cli-using-param-json">Using
            JSON for Parameters</a> in the <i>AWS CLI User Guide</i>. For example:</para><para><code>[{"username":"bob"},{"password":"abc123xyz456"}]</code></para><para>If your command-line tool or SDK requires quotation marks around the parameter, you
            should use single quotes to avoid confusion with the double quotes required in the
            JSON text. You can also 'escape' the double quote character in the embedded JSON text
            by prefacing each with a backslash. For example, the following string is surrounded
            by double-quotes. All of the embedded double quotes are escaped:</para><para><code>"[{\"username\":\"bob\"},{\"password\":\"abc123xyz456\"}]"</code></para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.UpdateSECSecretCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.SecretsManager.Model.UpdateSecretResponse).
            Specifying the name of a property of type Amazon.SecretsManager.Model.UpdateSecretResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.UpdateSECSecretCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the SecretString parameter.
            The -PassThru parameter is deprecated, use -Select '^SecretString' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.UpdateSECSecretCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.SEC.UpdateSECSecretVersionStageCmdlet">
            <summary>
            Modifies the staging labels attached to a version of a secret. Staging labels are
            used to track a version as it progresses through the secret rotation process. You
            can attach a staging label to only one version of a secret at a time. If a staging
            label to be added is already attached to another version, then it is moved--removed
            from the other version first and then attached to this one. For more information about
            staging labels, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/terms-concepts.html#term_staging-label">Staging
            Labels</a> in the <i>AWS Secrets Manager User Guide</i>. 
            
             
            <para>
            The staging labels that you specify in the <code>VersionStage</code> parameter are
            added to the existing list of staging labels--they don't replace it.
            </para><para>
            You can move the <code>AWSCURRENT</code> staging label to this version by including
            it in this call.
            </para><note><para>
            Whenever you move <code>AWSCURRENT</code>, Secrets Manager automatically moves the
            label <code>AWSPREVIOUS</code> to the version that <code>AWSCURRENT</code> was removed
            from.
            </para></note><para>
            If this action results in the last label being removed from a version, then the version
            is considered to be 'deprecated' and can be deleted by Secrets Manager.
            </para><para><b>Minimum permissions</b></para><para>
            To run this command, you must have the following permissions:
            </para><ul><li><para>
            secretsmanager:UpdateSecretVersionStage
            </para></li></ul><para><b>Related operations</b></para><ul><li><para>
            To get the list of staging labels that are currently associated with a version of
            a secret, use <code><a>DescribeSecret</a></code> and examine the <code>SecretVersionsToStages</code>
            response value. 
            </para></li></ul>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.UpdateSECSecretVersionStageCmdlet.MoveToVersionId">
            <summary>
            <para>
            <para>(Optional) The secret version ID that you want to add the staging label to. If you
            want to remove a label from a version, then do not specify this parameter.</para><para>If the staging label is already attached to a different version of the secret, then
            you must also specify the <code>RemoveFromVersionId</code> parameter. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.UpdateSECSecretVersionStageCmdlet.RemoveFromVersionId">
            <summary>
            <para>
            <para>Specifies the secret version ID of the version that the staging label is to be removed
            from. If the staging label you are trying to attach to one version is already attached
            to a different version, then you must include this parameter and specify the version
            that the label is to be removed from. If the label is attached and you either do not
            specify this parameter, or the version ID does not match, then the operation fails.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.UpdateSECSecretVersionStageCmdlet.SecretId">
            <summary>
            <para>
            <para>Specifies the secret with the version whose list of staging labels you want to modify.
            You can specify either the Amazon Resource Name (ARN) or the friendly name of the
            secret.</para><note><para>If you specify an ARN, we generally recommend that you specify a complete ARN. You
            can specify a partial ARN too—for example, if you don’t include the final hyphen and
            six random characters that Secrets Manager adds at the end of the ARN when you created
            the secret. A partial ARN match can work as long as it uniquely matches only one secret.
            However, if your secret has a name that ends in a hyphen followed by six characters
            (before Secrets Manager adds the hyphen and six characters to the ARN) and you try
            to use that as a partial ARN, then those characters cause Secrets Manager to assume
            that you’re specifying a complete ARN. This confusion can cause unexpected results.
            To avoid this situation, we recommend that you don’t create secret names that end
            with a hyphen followed by six characters.</para></note>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.UpdateSECSecretVersionStageCmdlet.VersionStage">
            <summary>
            <para>
            <para>The staging label to add to this version.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.UpdateSECSecretVersionStageCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.SecretsManager.Model.UpdateSecretVersionStageResponse).
            Specifying the name of a property of type Amazon.SecretsManager.Model.UpdateSecretVersionStageResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.UpdateSECSecretVersionStageCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the VersionStage parameter.
            The -PassThru parameter is deprecated, use -Select '^VersionStage' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.UpdateSECSecretVersionStageCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.SEC.WriteSECResourcePolicyCmdlet">
            <summary>
            Attaches the contents of the specified resource-based permission policy to a secret.
            A resource-based policy is optional. Alternatively, you can use IAM identity-based
            policies that specify the secret's Amazon Resource Name (ARN) in the policy statement's
            <code>Resources</code> element. You can also use a combination of both identity-based
            and resource-based policies. The affected users and roles receive the permissions
            that are permitted by all of the relevant policies. For more information, see <a href="http://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access_resource-based-policies.html">Using
            Resource-Based Policies for AWS Secrets Manager</a>. For the complete description
            of the AWS policy syntax and grammar, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies.html">IAM
            JSON Policy Reference</a> in the <i>IAM User Guide</i>.
            
             
            <para><b>Minimum permissions</b></para><para>
            To run this command, you must have the following permissions:
            </para><ul><li><para>
            secretsmanager:PutResourcePolicy
            </para></li></ul><para><b>Related operations</b></para><ul><li><para>
            To retrieve the resource policy that's attached to a secret, use <a>GetResourcePolicy</a>.
            </para></li><li><para>
            To delete the resource-based policy that's attached to a secret, use <a>DeleteResourcePolicy</a>.
            </para></li><li><para>
            To list all of the currently available secrets, use <a>ListSecrets</a>.
            </para></li></ul>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.WriteSECResourcePolicyCmdlet.ResourcePolicy">
            <summary>
            <para>
            <para>A JSON-formatted string that's constructed according to the grammar and syntax for
            an AWS resource-based policy. The policy in the string identifies who can access or
            manage this secret and its versions. For information on how to format a JSON parameter
            for the various command line tool environments, see <a href="http://docs.aws.amazon.com/cli/latest/userguide/cli-using-param.html#cli-using-param-json">Using
            JSON for Parameters</a> in the <i>AWS CLI User Guide</i>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.WriteSECResourcePolicyCmdlet.SecretId">
            <summary>
            <para>
            <para>Specifies the secret that you want to attach the resource-based policy to. You can
            specify either the ARN or the friendly name of the secret.</para><note><para>If you specify an ARN, we generally recommend that you specify a complete ARN. You
            can specify a partial ARN too—for example, if you don’t include the final hyphen and
            six random characters that Secrets Manager adds at the end of the ARN when you created
            the secret. A partial ARN match can work as long as it uniquely matches only one secret.
            However, if your secret has a name that ends in a hyphen followed by six characters
            (before Secrets Manager adds the hyphen and six characters to the ARN) and you try
            to use that as a partial ARN, then those characters cause Secrets Manager to assume
            that you’re specifying a complete ARN. This confusion can cause unexpected results.
            To avoid this situation, we recommend that you don’t create secret names that end
            with a hyphen followed by six characters.</para></note>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.WriteSECResourcePolicyCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.SecretsManager.Model.PutResourcePolicyResponse).
            Specifying the name of a property of type Amazon.SecretsManager.Model.PutResourcePolicyResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.WriteSECResourcePolicyCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the ResourcePolicy parameter.
            The -PassThru parameter is deprecated, use -Select '^ResourcePolicy' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.WriteSECResourcePolicyCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.SEC.WriteSECSecretValueCmdlet">
            <summary>
            Stores a new encrypted secret value in the specified secret. To do this, the operation
            creates a new version and attaches it to the secret. The version can contain a new
            <code>SecretString</code> value or a new <code>SecretBinary</code> value. You can
            also specify the staging labels that are initially attached to the new version.
            
             <note><para>
            The Secrets Manager console uses only the <code>SecretString</code> field. To add
            binary data to a secret with the <code>SecretBinary</code> field you must use the
            AWS CLI or one of the AWS SDKs.
            </para></note><ul><li><para>
            If this operation creates the first version for the secret then Secrets Manager automatically
            attaches the staging label <code>AWSCURRENT</code> to the new version.
            </para></li><li><para>
            If another version of this secret already exists, then this operation does not automatically
            move any staging labels other than those that you explicitly specify in the <code>VersionStages</code>
            parameter.
            </para></li><li><para>
            If this operation moves the staging label <code>AWSCURRENT</code> from another version
            to this version (because you included it in the <code>StagingLabels</code> parameter)
            then Secrets Manager also automatically moves the staging label <code>AWSPREVIOUS</code>
            to the version that <code>AWSCURRENT</code> was removed from.
            </para></li><li><para>
            This operation is idempotent. If a version with a <code>VersionId</code> with the
            same value as the <code>ClientRequestToken</code> parameter already exists and you
            specify the same secret data, the operation succeeds but does nothing. However, if
            the secret data is different, then the operation fails because you cannot modify an
            existing version; you can only create new ones.
            </para></li></ul><note><ul><li><para>
            If you call an operation that needs to encrypt or decrypt the <code>SecretString</code>
            or <code>SecretBinary</code> for a secret in the same account as the calling user
            and that secret doesn't specify a AWS KMS encryption key, Secrets Manager uses the
            account's default AWS managed customer master key (CMK) with the alias <code>aws/secretsmanager</code>.
            If this key doesn't already exist in your account then Secrets Manager creates it
            for you automatically. All users and roles in the same AWS account automatically have
            access to use the default CMK. Note that if an Secrets Manager API call results in
            AWS having to create the account's AWS-managed CMK, it can result in a one-time significant
            delay in returning the result.
            </para></li><li><para>
            If the secret is in a different AWS account from the credentials calling an API that
            requires encryption or decryption of the secret value then you must create and use
            a custom AWS KMS CMK because you can't access the default CMK for the account using
            credentials from a different AWS account. Store the ARN of the CMK in the secret when
            you create the secret or when you update it by including it in the <code>KMSKeyId</code>.
            If you call an API that must encrypt or decrypt <code>SecretString</code> or <code>SecretBinary</code>
            using credentials from a different account then the AWS KMS key policy must grant
            cross-account access to that other account's user or role for both the kms:GenerateDataKey
            and kms:Decrypt operations.
            </para></li></ul></note><para><b>Minimum permissions</b></para><para>
            To run this command, you must have the following permissions:
            </para><ul><li><para>
            secretsmanager:PutSecretValue
            </para></li><li><para>
            kms:GenerateDataKey - needed only if you use a customer-managed AWS KMS key to encrypt
            the secret. You do not need this permission to use the account's default AWS managed
            CMK for Secrets Manager.
            </para></li></ul><para><b>Related operations</b></para><ul><li><para>
            To retrieve the encrypted value you store in the version of a secret, use <a>GetSecretValue</a>.
            </para></li><li><para>
            To create a secret, use <a>CreateSecret</a>.
            </para></li><li><para>
            To get the details for a secret, use <a>DescribeSecret</a>.
            </para></li><li><para>
            To list the versions attached to a secret, use <a>ListSecretVersionIds</a>.
            </para></li></ul>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.WriteSECSecretValueCmdlet.ClientRequestToken">
            <summary>
            <para>
            <para>(Optional) Specifies a unique identifier for the new version of the secret. </para><note><para>If you use the AWS CLI or one of the AWS SDK to call this operation, then you can
            leave this parameter empty. The CLI or SDK generates a random UUID for you and includes
            that in the request. If you don't use the SDK and instead generate a raw HTTP request
            to the Secrets Manager service endpoint, then you must generate a <code>ClientRequestToken</code>
            yourself for new versions and include that value in the request. </para></note><para>This value helps ensure idempotency. Secrets Manager uses this value to prevent the
            accidental creation of duplicate versions if there are failures and retries during
            the Lambda rotation function's processing. We recommend that you generate a <a href="https://wikipedia.org/wiki/Universally_unique_identifier">UUID-type</a>
            value to ensure uniqueness within the specified secret. </para><ul><li><para>If the <code>ClientRequestToken</code> value isn't already associated with a version
            of the secret then a new version of the secret is created. </para></li><li><para>If a version with this value already exists and that version's <code>SecretString</code>
            or <code>SecretBinary</code> values are the same as those in the request then the
            request is ignored (the operation is idempotent). </para></li><li><para>If a version with this value already exists and that version's <code>SecretString</code>
            and <code>SecretBinary</code> values are different from those in the request then
            the request fails because you cannot modify an existing secret version. You can only
            create new versions to store new secret values.</para></li></ul><para>This value becomes the <code>VersionId</code> of the new version.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.WriteSECSecretValueCmdlet.SecretBinary">
            <summary>
            <para>
            <para>(Optional) Specifies binary data that you want to encrypt and store in the new version
            of the secret. To use this parameter in the command-line tools, we recommend that
            you store your binary data in a file and then use the appropriate technique for your
            tool to pass the contents of the file as a parameter. Either <code>SecretBinary</code>
            or <code>SecretString</code> must have a value, but not both. They cannot both be
            empty.</para><para>This parameter is not accessible if the secret using the Secrets Manager console.</para>
            </para>
            <para>The cmdlet will automatically convert the supplied parameter of type string, string[], System.IO.FileInfo or System.IO.Stream to byte[] before supplying it to the service.</para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.WriteSECSecretValueCmdlet.SecretId">
            <summary>
            <para>
            <para>Specifies the secret to which you want to add a new version. You can specify either
            the Amazon Resource Name (ARN) or the friendly name of the secret. The secret must
            already exist.</para><note><para>If you specify an ARN, we generally recommend that you specify a complete ARN. You
            can specify a partial ARN too—for example, if you don’t include the final hyphen and
            six random characters that Secrets Manager adds at the end of the ARN when you created
            the secret. A partial ARN match can work as long as it uniquely matches only one secret.
            However, if your secret has a name that ends in a hyphen followed by six characters
            (before Secrets Manager adds the hyphen and six characters to the ARN) and you try
            to use that as a partial ARN, then those characters cause Secrets Manager to assume
            that you’re specifying a complete ARN. This confusion can cause unexpected results.
            To avoid this situation, we recommend that you don’t create secret names that end
            with a hyphen followed by six characters.</para></note>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.WriteSECSecretValueCmdlet.SecretString">
            <summary>
            <para>
            <para>(Optional) Specifies text data that you want to encrypt and store in this new version
            of the secret. Either <code>SecretString</code> or <code>SecretBinary</code> must
            have a value, but not both. They cannot both be empty.</para><para>If you create this secret by using the Secrets Manager console then Secrets Manager
            puts the protected secret text in only the <code>SecretString</code> parameter. The
            Secrets Manager console stores the information as a JSON structure of key/value pairs
            that the default Lambda rotation function knows how to parse.</para><para>For storing multiple values, we recommend that you use a JSON text string argument
            and specify key/value pairs. For information on how to format a JSON parameter for
            the various command line tool environments, see <a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-using-param.html#cli-using-param-json">Using
            JSON for Parameters</a> in the <i>AWS CLI User Guide</i>.</para><para> For example:</para><para><code>[{"username":"bob"},{"password":"abc123xyz456"}]</code></para><para>If your command-line tool or SDK requires quotation marks around the parameter, you
            should use single quotes to avoid confusion with the double quotes required in the
            JSON text.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.WriteSECSecretValueCmdlet.VersionStage">
            <summary>
            <para>
            <para>(Optional) Specifies a list of staging labels that are attached to this version of
            the secret. These staging labels are used to track the versions through the rotation
            process by the Lambda rotation function.</para><para>A staging label must be unique to a single version of the secret. If you specify a
            staging label that's already associated with a different version of the same secret
            then that staging label is automatically removed from the other version and attached
            to this version.</para><para>If you do not specify a value for <code>VersionStages</code> then Secrets Manager
            automatically moves the staging label <code>AWSCURRENT</code> to this new version.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.WriteSECSecretValueCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.SecretsManager.Model.PutSecretValueResponse).
            Specifying the name of a property of type Amazon.SecretsManager.Model.PutSecretValueResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.WriteSECSecretValueCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the SecretString parameter.
            The -PassThru parameter is deprecated, use -Select '^SecretString' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.SEC.WriteSECSecretValueCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
    </members>
</doc>
